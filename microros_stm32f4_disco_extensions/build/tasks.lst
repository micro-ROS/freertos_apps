ARM GAS  /tmp/ccQcdK8x.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	pxCurrentTCB
  18              		.section	.bss.pxCurrentTCB,"aw",%nobits
  19              		.align	2
  22              	pxCurrentTCB:
  23 0000 00000000 		.space	4
  24              		.section	.bss.pxReadyTasksLists,"aw",%nobits
  25              		.align	2
  28              	pxReadyTasksLists:
  29 0000 00000000 		.space	1120
  29      00000000 
  29      00000000 
  29      00000000 
  29      00000000 
  30              		.section	.bss.xDelayedTaskList1,"aw",%nobits
  31              		.align	2
  34              	xDelayedTaskList1:
  35 0000 00000000 		.space	20
  35      00000000 
  35      00000000 
  35      00000000 
  35      00000000 
  36              		.section	.bss.xDelayedTaskList2,"aw",%nobits
  37              		.align	2
  40              	xDelayedTaskList2:
  41 0000 00000000 		.space	20
  41      00000000 
  41      00000000 
  41      00000000 
  41      00000000 
  42              		.section	.bss.pxDelayedTaskList,"aw",%nobits
  43              		.align	2
  46              	pxDelayedTaskList:
  47 0000 00000000 		.space	4
  48              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
  49              		.align	2
  52              	pxOverflowDelayedTaskList:
  53 0000 00000000 		.space	4
  54              		.section	.bss.xPendingReadyList,"aw",%nobits
  55              		.align	2
  58              	xPendingReadyList:
  59 0000 00000000 		.space	20
ARM GAS  /tmp/ccQcdK8x.s 			page 2


  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
  61              		.align	2
  64              	xTasksWaitingTermination:
  65 0000 00000000 		.space	20
  65      00000000 
  65      00000000 
  65      00000000 
  65      00000000 
  66              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
  67              		.align	2
  70              	uxDeletedTasksWaitingCleanUp:
  71 0000 00000000 		.space	4
  72              		.section	.bss.xSuspendedTaskList,"aw",%nobits
  73              		.align	2
  76              	xSuspendedTaskList:
  77 0000 00000000 		.space	20
  77      00000000 
  77      00000000 
  77      00000000 
  77      00000000 
  78              		.global	FreeRTOS_errno
  79              		.section	.bss.FreeRTOS_errno,"aw",%nobits
  80              		.align	2
  83              	FreeRTOS_errno:
  84 0000 00000000 		.space	4
  85              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
  86              		.align	2
  89              	uxCurrentNumberOfTasks:
  90 0000 00000000 		.space	4
  91              		.section	.bss.xTickCount,"aw",%nobits
  92              		.align	2
  95              	xTickCount:
  96 0000 00000000 		.space	4
  97              		.section	.bss.uxTopReadyPriority,"aw",%nobits
  98              		.align	2
 101              	uxTopReadyPriority:
 102 0000 00000000 		.space	4
 103              		.section	.bss.xSchedulerRunning,"aw",%nobits
 104              		.align	2
 107              	xSchedulerRunning:
 108 0000 00000000 		.space	4
 109              		.section	.bss.uxPendedTicks,"aw",%nobits
 110              		.align	2
 113              	uxPendedTicks:
 114 0000 00000000 		.space	4
 115              		.section	.bss.xYieldPending,"aw",%nobits
 116              		.align	2
 119              	xYieldPending:
 120 0000 00000000 		.space	4
 121              		.section	.bss.xNumOfOverflows,"aw",%nobits
 122              		.align	2
 125              	xNumOfOverflows:
 126 0000 00000000 		.space	4
ARM GAS  /tmp/ccQcdK8x.s 			page 3


 127              		.section	.bss.uxTaskNumber,"aw",%nobits
 128              		.align	2
 131              	uxTaskNumber:
 132 0000 00000000 		.space	4
 133              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 134              		.align	2
 137              	xNextTaskUnblockTime:
 138 0000 00000000 		.space	4
 139              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 140              		.align	2
 143              	xIdleTaskHandle:
 144 0000 00000000 		.space	4
 145              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 146              		.align	2
 149              	uxSchedulerSuspended:
 150 0000 00000000 		.space	4
 151              		.section	.text.xTaskCreateStatic,"ax",%progbits
 152              		.align	1
 153              		.global	xTaskCreateStatic
 154              		.arch armv7e-m
 155              		.syntax unified
 156              		.thumb
 157              		.thumb_func
 158              		.fpu fpv4-sp-d16
 160              	xTaskCreateStatic:
 161              	.LFB7:
 162              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
ARM GAS  /tmp/ccQcdK8x.s 			page 4


  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e9021, e961 and e750 are suppressed as a MISRA exception justified
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** because the MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** for the header files above, but not in this file, in order to generate the
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** correct privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750 !e9021. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Bits used to recored how a task's stack and TCB were allocated. */
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
ARM GAS  /tmp/ccQcdK8x.s 			page 5


  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
ARM GAS  /tmp/ccQcdK8x.s 			page 6


 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
ARM GAS  /tmp/ccQcdK8x.s 			page 7


 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? pxCurrentTCB : ( pxHandle ) )
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock 			/* The old naming convention is used to prevent breaking kern
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
ARM GAS  /tmp/ccQcdK8x.s 			page 8


 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments in FreeRTOS.h with the definition of
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolida
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
ARM GAS  /tmp/ccQcdK8x.s 			page 9


 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_POSIX_ERRNO == 1 )
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		int iTaskErrno;
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** xDelayedTaskList1 and xDelayedTaskList2 could be move to function scople but
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** doing so breaks some kernel aware debuggers and debuggers that rely on removing
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the static qualifier. */
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = { 0 };/*< Prioritised rea
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = { 0 };						/*< Delayed tasks. */
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = { 0 };						/*< Delayed tasks (two lists are used
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;				/*< Points to the delayed tas
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;		/*< Points to the delay
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = { 0 };						/*< Tasks that have been readied whil
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xTasksWaitingTermination = { 0 };				/*< Tasks that have been deleted
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = { 0 };					/*< Tasks that are currently suspend
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Global POSIX errno. Its value is changed upon context switching to match
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the errno of the currently running task. */
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_POSIX_ERRNO == 1 )
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	int FreeRTOS_errno = 0;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
ARM GAS  /tmp/ccQcdK8x.s 			page 10


 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Do not move these variables to function scope as doing so prevents the
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	code working with debuggers that need to remove the static qualifier. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void ); /*lint !e526 Symbol not defined as it is an application 
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
ARM GAS  /tmp/ccQcdK8x.s 			page 11


 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
ARM GAS  /tmp/ccQcdK8x.s 			page 12


 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGE
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 13


 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 163              		.loc 1 585 2
 164              		.cfi_startproc
 165              		@ args = 12, pretend = 0, frame = 40
 166              		@ frame_needed = 1, uses_anonymous_args = 0
 167 0000 80B5     		push	{r7, lr}
 168              	.LCFI0:
 169              		.cfi_def_cfa_offset 8
 170              		.cfi_offset 7, -8
 171              		.cfi_offset 14, -4
 172 0002 8EB0     		sub	sp, sp, #56
 173              	.LCFI1:
 174              		.cfi_def_cfa_offset 64
 175 0004 04AF     		add	r7, sp, #16
 176              	.LCFI2:
 177              		.cfi_def_cfa 7, 48
ARM GAS  /tmp/ccQcdK8x.s 			page 14


 178 0006 F860     		str	r0, [r7, #12]
 179 0008 B960     		str	r1, [r7, #8]
 180 000a 7A60     		str	r2, [r7, #4]
 181 000c 3B60     		str	r3, [r7]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 182              		.loc 1 589 3
 183 000e 7B6B     		ldr	r3, [r7, #52]
 184 0010 002B     		cmp	r3, #0
 185 0012 09D1     		bne	.L2
 186              	.LBB123:
 187              	.LBB124:
 188              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.2.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2019 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
ARM GAS  /tmp/ccQcdK8x.s 			page 15


  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
ARM GAS  /tmp/ccQcdK8x.s 			page 16


 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
ARM GAS  /tmp/ccQcdK8x.s 			page 17


 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 189              		.loc 2 195 2 discriminator 1
 190              		.syntax unified
 191              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 192 0014 4FF05003 			mov r3, #80												
 193 0018 83F31188 		msr basepri, r3											
 194 001c BFF36F8F 		isb														
 195 0020 BFF34F8F 		dsb														
 196              	
 197              	@ 0 "" 2
 198              		.thumb
 199              		.syntax unified
 200 0024 3B62     		str	r3, [r7, #32]
 201              	.L3:
 202              	.LBE124:
 203              	.LBE123:
 204              		.loc 1 589 3 discriminator 1
 205 0026 FEE7     		b	.L3
 206              	.L2:
ARM GAS  /tmp/ccQcdK8x.s 			page 18


 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 207              		.loc 1 590 3
 208 0028 BB6B     		ldr	r3, [r7, #56]
 209 002a 002B     		cmp	r3, #0
 210 002c 09D1     		bne	.L4
 211              	.LBB125:
 212              	.LBB126:
 213              		.loc 2 195 2 discriminator 1
 214              		.syntax unified
 215              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 216 002e 4FF05003 			mov r3, #80												
 217 0032 83F31188 		msr basepri, r3											
 218 0036 BFF36F8F 		isb														
 219 003a BFF34F8F 		dsb														
 220              	
 221              	@ 0 "" 2
 222              		.thumb
 223              		.syntax unified
 224 003e FB61     		str	r3, [r7, #28]
 225              	.L5:
 226              	.LBE126:
 227              	.LBE125:
 228              		.loc 1 590 3 discriminator 2
 229 0040 FEE7     		b	.L5
 230              	.L4:
 231              	.LBB127:
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 232              		.loc 1 597 20
 233 0042 6423     		movs	r3, #100
 234 0044 3B61     		str	r3, [r7, #16]
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 235              		.loc 1 598 4
 236 0046 3B69     		ldr	r3, [r7, #16]
 237 0048 642B     		cmp	r3, #100
 238 004a 09D0     		beq	.L6
 239              	.LBB128:
 240              	.LBB129:
 241              		.loc 2 195 2 discriminator 1
 242              		.syntax unified
 243              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 244 004c 4FF05003 			mov r3, #80												
 245 0050 83F31188 		msr basepri, r3											
 246 0054 BFF36F8F 		isb														
 247 0058 BFF34F8F 		dsb														
 248              	
 249              	@ 0 "" 2
 250              		.thumb
 251              		.syntax unified
 252 005c BB61     		str	r3, [r7, #24]
 253              	.L7:
 254              	.LBE129:
ARM GAS  /tmp/ccQcdK8x.s 			page 19


 255              	.LBE128:
 256              		.loc 1 598 4 discriminator 3
 257 005e FEE7     		b	.L7
 258              	.L6:
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 259              		.loc 1 599 4
 260 0060 3B69     		ldr	r3, [r7, #16]
 261              	.LBE127:
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 262              		.loc 1 604 5
 263 0062 BB6B     		ldr	r3, [r7, #56]
 264 0064 002B     		cmp	r3, #0
 265 0066 1ED0     		beq	.L8
 266              		.loc 1 604 32 discriminator 1
 267 0068 7B6B     		ldr	r3, [r7, #52]
 268 006a 002B     		cmp	r3, #0
 269 006c 1BD0     		beq	.L8
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures ar
 270              		.loc 1 608 13
 271 006e BB6B     		ldr	r3, [r7, #56]
 272 0070 7B62     		str	r3, [r7, #36]
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 273              		.loc 1 609 22
 274 0072 7B6A     		ldr	r3, [r7, #36]
 275 0074 7A6B     		ldr	r2, [r7, #52]
 276 0076 1A63     		str	r2, [r3, #48]
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consoli
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 277              		.loc 1 615 37
 278 0078 7B6A     		ldr	r3, [r7, #36]
 279 007a 0222     		movs	r2, #2
 280 007c 83F85D20 		strb	r2, [r3, #93]
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 281              		.loc 1 619 4
 282 0080 0023     		movs	r3, #0
 283 0082 0393     		str	r3, [sp, #12]
 284 0084 7B6A     		ldr	r3, [r7, #36]
 285 0086 0293     		str	r3, [sp, #8]
 286 0088 07F11403 		add	r3, r7, #20
 287 008c 0193     		str	r3, [sp, #4]
 288 008e 3B6B     		ldr	r3, [r7, #48]
 289 0090 0093     		str	r3, [sp]
 290 0092 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccQcdK8x.s 			page 20


 291 0094 7A68     		ldr	r2, [r7, #4]
 292 0096 B968     		ldr	r1, [r7, #8]
 293 0098 F868     		ldr	r0, [r7, #12]
 294 009a FFF7FEFF 		bl	prvInitialiseNewTask
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 295              		.loc 1 620 4
 296 009e 786A     		ldr	r0, [r7, #36]
 297 00a0 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 298 00a4 01E0     		b	.L9
 299              	.L8:
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 300              		.loc 1 624 12
 301 00a6 0023     		movs	r3, #0
 302 00a8 7B61     		str	r3, [r7, #20]
 303              	.L9:
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 304              		.loc 1 627 10
 305 00aa 7B69     		ldr	r3, [r7, #20]
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 306              		.loc 1 628 2
 307 00ac 1846     		mov	r0, r3
 308 00ae 2837     		adds	r7, r7, #40
 309              	.LCFI3:
 310              		.cfi_def_cfa_offset 8
 311 00b0 BD46     		mov	sp, r7
 312              	.LCFI4:
 313              		.cfi_def_cfa_register 13
 314              		@ sp needed
 315 00b2 80BD     		pop	{r7, pc}
 316              		.cfi_endproc
 317              	.LFE7:
 319              		.section	.text.xTaskCreate,"ax",%progbits
 320              		.align	1
 321              		.global	xTaskCreate
 322              		.syntax unified
 323              		.thumb
 324              		.thumb_func
 325              		.fpu fpv4-sp-d16
 327              	xTaskCreate:
 328              	.LFB8:
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
ARM GAS  /tmp/ccQcdK8x.s 			page 21


 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
ARM GAS  /tmp/ccQcdK8x.s 			page 22


 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 329              		.loc 1 736 2
 330              		.cfi_startproc
 331              		@ args = 8, pretend = 0, frame = 32
 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333 0000 80B5     		push	{r7, lr}
 334              	.LCFI5:
 335              		.cfi_def_cfa_offset 8
 336              		.cfi_offset 7, -8
 337              		.cfi_offset 14, -4
 338 0002 8CB0     		sub	sp, sp, #48
 339              	.LCFI6:
 340              		.cfi_def_cfa_offset 56
 341 0004 04AF     		add	r7, sp, #16
 342              	.LCFI7:
 343              		.cfi_def_cfa 7, 40
 344 0006 F860     		str	r0, [r7, #12]
 345 0008 B960     		str	r1, [r7, #8]
 346 000a 3B60     		str	r3, [r7]
ARM GAS  /tmp/ccQcdK8x.s 			page 23


 347 000c 1346     		mov	r3, r2	@ movhi
 348 000e FB80     		strh	r3, [r7, #6]	@ movhi
 349              	.LBB130:
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079
 350              		.loc 1 770 32
 351 0010 FB88     		ldrh	r3, [r7, #6]
 352              		.loc 1 770 14
 353 0012 9B00     		lsls	r3, r3, #2
 354 0014 1846     		mov	r0, r3
 355 0016 FFF7FEFF 		bl	pvPortMalloc
 356 001a 7861     		str	r0, [r7, #20]
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 357              		.loc 1 772 6
 358 001c 7B69     		ldr	r3, [r7, #20]
 359 001e 002B     		cmp	r3, #0
 360 0020 0ED0     		beq	.L12
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returne
 361              		.loc 1 775 28
 362 0022 6420     		movs	r0, #100
 363 0024 FFF7FEFF 		bl	pvPortMalloc
 364 0028 F861     		str	r0, [r7, #28]
ARM GAS  /tmp/ccQcdK8x.s 			page 24


 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 365              		.loc 1 777 7
 366 002a FB69     		ldr	r3, [r7, #28]
 367 002c 002B     		cmp	r3, #0
 368 002e 03D0     		beq	.L13
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 369              		.loc 1 780 24
 370 0030 FB69     		ldr	r3, [r7, #28]
 371 0032 7A69     		ldr	r2, [r7, #20]
 372 0034 1A63     		str	r2, [r3, #48]
 373 0036 05E0     		b	.L15
 374              	.L13:
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 375              		.loc 1 786 6
 376 0038 7869     		ldr	r0, [r7, #20]
 377 003a FFF7FEFF 		bl	vPortFree
 378 003e 01E0     		b	.L15
 379              	.L12:
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 380              		.loc 1 791 14
 381 0040 0023     		movs	r3, #0
 382 0042 FB61     		str	r3, [r7, #28]
 383              	.L15:
 384              	.LBE130:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 385              		.loc 1 796 5
 386 0044 FB69     		ldr	r3, [r7, #28]
 387 0046 002B     		cmp	r3, #0
 388 0048 17D0     		beq	.L16
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consoli
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 389              		.loc 1 802 37
 390 004a FB69     		ldr	r3, [r7, #28]
 391 004c 0022     		movs	r2, #0
 392 004e 83F85D20 		strb	r2, [r3, #93]
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */
ARM GAS  /tmp/ccQcdK8x.s 			page 25


 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 393              		.loc 1 806 4
 394 0052 FA88     		ldrh	r2, [r7, #6]
 395 0054 0023     		movs	r3, #0
 396 0056 0393     		str	r3, [sp, #12]
 397 0058 FB69     		ldr	r3, [r7, #28]
 398 005a 0293     		str	r3, [sp, #8]
 399 005c FB6A     		ldr	r3, [r7, #44]
 400 005e 0193     		str	r3, [sp, #4]
 401 0060 BB6A     		ldr	r3, [r7, #40]
 402 0062 0093     		str	r3, [sp]
 403 0064 3B68     		ldr	r3, [r7]
 404 0066 B968     		ldr	r1, [r7, #8]
 405 0068 F868     		ldr	r0, [r7, #12]
 406 006a FFF7FEFF 		bl	prvInitialiseNewTask
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 407              		.loc 1 807 4
 408 006e F869     		ldr	r0, [r7, #28]
 409 0070 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 410              		.loc 1 808 12
 411 0074 0123     		movs	r3, #1
 412 0076 BB61     		str	r3, [r7, #24]
 413 0078 02E0     		b	.L17
 414              	.L16:
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 415              		.loc 1 812 12
 416 007a 4FF0FF33 		mov	r3, #-1
 417 007e BB61     		str	r3, [r7, #24]
 418              	.L17:
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 419              		.loc 1 815 10
 420 0080 BB69     		ldr	r3, [r7, #24]
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 421              		.loc 1 816 2
 422 0082 1846     		mov	r0, r3
 423 0084 2037     		adds	r7, r7, #32
 424              	.LCFI8:
 425              		.cfi_def_cfa_offset 8
 426 0086 BD46     		mov	sp, r7
 427              	.LCFI9:
 428              		.cfi_def_cfa_register 13
 429              		@ sp needed
 430 0088 80BD     		pop	{r7, pc}
 431              		.cfi_endproc
 432              	.LFE8:
 434              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 435              		.align	1
 436              		.syntax unified
 437              		.thumb
 438              		.thumb_func
ARM GAS  /tmp/ccQcdK8x.s 			page 26


 439              		.fpu fpv4-sp-d16
 441              	prvInitialiseNewTask:
 442              	.LFB9:
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 443              		.loc 1 829 1
 444              		.cfi_startproc
 445              		@ args = 16, pretend = 0, frame = 32
 446              		@ frame_needed = 1, uses_anonymous_args = 0
 447 0000 80B5     		push	{r7, lr}
 448              	.LCFI10:
 449              		.cfi_def_cfa_offset 8
 450              		.cfi_offset 7, -8
 451              		.cfi_offset 14, -4
 452 0002 88B0     		sub	sp, sp, #32
 453              	.LCFI11:
 454              		.cfi_def_cfa_offset 40
 455 0004 00AF     		add	r7, sp, #0
 456              	.LCFI12:
 457              		.cfi_def_cfa_register 7
 458 0006 F860     		str	r0, [r7, #12]
 459 0008 B960     		str	r1, [r7, #8]
 460 000a 7A60     		str	r2, [r7, #4]
 461 000c 3B60     		str	r3, [r7]
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
ARM GAS  /tmp/ccQcdK8x.s 			page 27


 462              		.loc 1 851 28
 463 000e 3B6B     		ldr	r3, [r7, #48]
 464 0010 186B     		ldr	r0, [r3, #48]
 465              		.loc 1 851 12
 466 0012 7B68     		ldr	r3, [r7, #4]
 467 0014 9B00     		lsls	r3, r3, #2
 468 0016 1A46     		mov	r2, r3
 469 0018 A521     		movs	r1, #165
 470 001a FFF7FEFF 		bl	memset
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 471              		.loc 1 861 29
 472 001e 3B6B     		ldr	r3, [r7, #48]
 473 0020 1A6B     		ldr	r2, [r3, #48]
 474              		.loc 1 861 18
 475 0022 7B68     		ldr	r3, [r7, #4]
 476 0024 03F18043 		add	r3, r3, #1073741824
 477 0028 013B     		subs	r3, r3, #1
 478 002a 9B00     		lsls	r3, r3, #2
 479              		.loc 1 861 16
 480 002c 1344     		add	r3, r3, r2
 481 002e BB61     		str	r3, [r7, #24]
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 482              		.loc 1 862 40
 483 0030 BB69     		ldr	r3, [r7, #24]
 484              		.loc 1 862 81
 485 0032 23F00703 		bic	r3, r3, #7
 486              		.loc 1 862 16
 487 0036 BB61     		str	r3, [r7, #24]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 488              		.loc 1 865 3
 489 0038 BB69     		ldr	r3, [r7, #24]
 490 003a 03F00703 		and	r3, r3, #7
 491 003e 002B     		cmp	r3, #0
 492 0040 09D0     		beq	.L20
 493              	.LBB131:
 494              	.LBB132:
 495              		.loc 2 195 2 discriminator 1
 496              		.syntax unified
 497              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 498 0042 4FF05003 			mov r3, #80												
 499 0046 83F31188 		msr basepri, r3											
 500 004a BFF36F8F 		isb														
 501 004e BFF34F8F 		dsb														
 502              	
 503              	@ 0 "" 2
 504              		.thumb
ARM GAS  /tmp/ccQcdK8x.s 			page 28


 505              		.syntax unified
 506 0052 7B61     		str	r3, [r7, #20]
 507              	.L21:
 508              	.LBE132:
 509              	.LBE131:
 510              		.loc 1 865 3 discriminator 1
 511 0054 FEE7     		b	.L21
 512              	.L20:
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pcName != NULL )
 513              		.loc 1 889 4
 514 0056 BB68     		ldr	r3, [r7, #8]
 515 0058 002B     		cmp	r3, #0
 516 005a 1FD0     		beq	.L22
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 517              		.loc 1 891 10
 518 005c 0023     		movs	r3, #0
 519 005e FB61     		str	r3, [r7, #28]
 520              		.loc 1 891 3
 521 0060 12E0     		b	.L23
 522              	.L26:
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 523              		.loc 1 893 38
 524 0062 BA68     		ldr	r2, [r7, #8]
 525 0064 FB69     		ldr	r3, [r7, #28]
 526 0066 1344     		add	r3, r3, r2
 527 0068 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 528              		.loc 1 893 30
 529 006a 3A6B     		ldr	r2, [r7, #48]
 530 006c FB69     		ldr	r3, [r7, #28]
 531 006e 1344     		add	r3, r3, r2
 532 0070 3433     		adds	r3, r3, #52
 533 0072 0A46     		mov	r2, r1
ARM GAS  /tmp/ccQcdK8x.s 			page 29


 534 0074 1A70     		strb	r2, [r3]
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			string is not accessible (extremely unlikely). */
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pcName[ x ] == ( char ) 0x00 )
 535              		.loc 1 898 14
 536 0076 BA68     		ldr	r2, [r7, #8]
 537 0078 FB69     		ldr	r3, [r7, #28]
 538 007a 1344     		add	r3, r3, r2
 539 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 540              		.loc 1 898 6
 541 007e 002B     		cmp	r3, #0
 542 0080 06D0     		beq	.L30
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 543              		.loc 1 891 77 discriminator 2
 544 0082 FB69     		ldr	r3, [r7, #28]
 545 0084 0133     		adds	r3, r3, #1
 546 0086 FB61     		str	r3, [r7, #28]
 547              	.L23:
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 548              		.loc 1 891 3 discriminator 1
 549 0088 FB69     		ldr	r3, [r7, #28]
 550 008a 0F2B     		cmp	r3, #15
 551 008c E9D9     		bls	.L26
 552 008e 00E0     		b	.L25
 553              	.L30:
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				break;
 554              		.loc 1 900 5
 555 0090 00BF     		nop
 556              	.L25:
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the name string is terminated in the case that the string length
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was greater or equal to configMAX_TASK_NAME_LEN. */
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 557              		.loc 1 910 55
 558 0092 3B6B     		ldr	r3, [r7, #48]
 559 0094 0022     		movs	r2, #0
 560 0096 83F84320 		strb	r2, [r3, #67]
 561 009a 03E0     		b	.L27
 562              	.L22:
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The task has not been given a name, so just ensure there is a NULL
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		terminator when it is read out. */
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 563              		.loc 1 916 29
 564 009c 3B6B     		ldr	r3, [r7, #48]
 565 009e 0022     		movs	r2, #0
ARM GAS  /tmp/ccQcdK8x.s 			page 30


 566 00a0 83F83420 		strb	r2, [r3, #52]
 567              	.L27:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 568              		.loc 1 921 4
 569 00a4 BB6A     		ldr	r3, [r7, #40]
 570 00a6 372B     		cmp	r3, #55
 571 00a8 01D9     		bls	.L28
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 572              		.loc 1 923 14
 573 00aa 3723     		movs	r3, #55
 574 00ac BB62     		str	r3, [r7, #40]
 575              	.L28:
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 576              		.loc 1 930 23
 577 00ae 3B6B     		ldr	r3, [r7, #48]
 578 00b0 BA6A     		ldr	r2, [r7, #40]
 579 00b2 DA62     		str	r2, [r3, #44]
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 580              		.loc 1 933 28
 581 00b4 3B6B     		ldr	r3, [r7, #48]
 582 00b6 BA6A     		ldr	r2, [r7, #40]
 583 00b8 DA64     		str	r2, [r3, #76]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 584              		.loc 1 934 27
 585 00ba 3B6B     		ldr	r3, [r7, #48]
 586 00bc 0022     		movs	r2, #0
 587 00be 1A65     		str	r2, [r3, #80]
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 588              		.loc 1 938 2
 589 00c0 3B6B     		ldr	r3, [r7, #48]
 590 00c2 0433     		adds	r3, r3, #4
 591 00c4 1846     		mov	r0, r3
 592 00c6 FFF7FEFF 		bl	vListInitialiseItem
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 593              		.loc 1 939 2
 594 00ca 3B6B     		ldr	r3, [r7, #48]
 595 00cc 1833     		adds	r3, r3, #24
 596 00ce 1846     		mov	r0, r3
 597 00d0 FFF7FEFF 		bl	vListInitialiseItem
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
ARM GAS  /tmp/ccQcdK8x.s 			page 31


 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 598              		.loc 1 943 2
 599 00d4 3B6B     		ldr	r3, [r7, #48]
 600 00d6 3A6B     		ldr	r2, [r7, #48]
 601 00d8 1A61     		str	r2, [r3, #16]
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 602              		.loc 1 946 2
 603 00da BB6A     		ldr	r3, [r7, #40]
 604 00dc C3F13802 		rsb	r2, r3, #56
 605 00e0 3B6B     		ldr	r3, [r7, #48]
 606 00e2 9A61     		str	r2, [r3, #24]
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 607              		.loc 1 947 2
 608 00e4 3B6B     		ldr	r3, [r7, #48]
 609 00e6 3A6B     		ldr	r2, [r7, #48]
 610 00e8 5A62     		str	r2, [r3, #36]
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 611              		.loc 1 957 23
 612 00ea 3B6B     		ldr	r3, [r7, #48]
 613 00ec 0022     		movs	r2, #0
 614 00ee 5A65     		str	r2, [r3, #84]
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccQcdK8x.s 			page 32


 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 615              		.loc 1 989 29
 616 00f0 3B6B     		ldr	r3, [r7, #48]
 617 00f2 0022     		movs	r2, #0
 618 00f4 9A65     		str	r2, [r3, #88]
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 619              		.loc 1 990 27
 620 00f6 3B6B     		ldr	r3, [r7, #48]
 621 00f8 0022     		movs	r2, #0
 622 00fa 83F85C20 		strb	r2, [r3, #92]
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPriv
ARM GAS  /tmp/ccQcdK8x.s 			page 33


1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the port has capability to detect stack overflow,
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pass the stack end address to the stack initialization
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function as well. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( portSTACK_GROWTH < 0 )
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pv
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else /* portSTACK_GROWTH */
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxEndOfStack, pxTaskCod
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* portSTACK_GROWTH */
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portHAS_STACK_OVERFLOW_CHECKING */
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 623              		.loc 1 1053 29
 624 00fe 3A68     		ldr	r2, [r7]
 625 0100 F968     		ldr	r1, [r7, #12]
 626 0102 B869     		ldr	r0, [r7, #24]
 627 0104 FFF7FEFF 		bl	pxPortInitialiseStack
 628 0108 0246     		mov	r2, r0
 629              		.loc 1 1053 27
 630 010a 3B6B     		ldr	r3, [r7, #48]
 631 010c 1A60     		str	r2, [r3]
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxCreatedTask != NULL )
 632              		.loc 1 1059 4
 633 010e FB6A     		ldr	r3, [r7, #44]
 634 0110 002B     		cmp	r3, #0
 635 0112 02D0     		beq	.L31
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 636              		.loc 1 1063 18
 637 0114 FB6A     		ldr	r3, [r7, #44]
 638 0116 3A6B     		ldr	r2, [r7, #48]
 639 0118 1A60     		str	r2, [r3]
 640              	.L31:
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccQcdK8x.s 			page 34


 641              		.loc 1 1069 1
 642 011a 00BF     		nop
 643 011c 2037     		adds	r7, r7, #32
 644              	.LCFI13:
 645              		.cfi_def_cfa_offset 8
 646 011e BD46     		mov	sp, r7
 647              	.LCFI14:
 648              		.cfi_def_cfa_register 13
 649              		@ sp needed
 650 0120 80BD     		pop	{r7, pc}
 651              		.cfi_endproc
 652              	.LFE9:
 654              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 655              		.align	1
 656              		.syntax unified
 657              		.thumb
 658              		.thumb_func
 659              		.fpu fpv4-sp-d16
 661              	prvAddNewTaskToReadyList:
 662              	.LFB10:
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 663              		.loc 1 1073 1
 664              		.cfi_startproc
 665              		@ args = 0, pretend = 0, frame = 8
 666              		@ frame_needed = 1, uses_anonymous_args = 0
 667 0000 80B5     		push	{r7, lr}
 668              	.LCFI15:
 669              		.cfi_def_cfa_offset 8
 670              		.cfi_offset 7, -8
 671              		.cfi_offset 14, -4
 672 0002 82B0     		sub	sp, sp, #8
 673              	.LCFI16:
 674              		.cfi_def_cfa_offset 16
 675 0004 00AF     		add	r7, sp, #0
 676              	.LCFI17:
 677              		.cfi_def_cfa_register 7
 678 0006 7860     		str	r0, [r7, #4]
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 679              		.loc 1 1076 2
 680 0008 FFF7FEFF 		bl	vPortEnterCritical
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 681              		.loc 1 1078 25
 682 000c 2D4B     		ldr	r3, .L38
 683 000e 1B68     		ldr	r3, [r3]
 684 0010 0133     		adds	r3, r3, #1
 685 0012 2C4A     		ldr	r2, .L38
 686 0014 1360     		str	r3, [r2]
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 687              		.loc 1 1079 20
 688 0016 2C4B     		ldr	r3, .L38+4
 689 0018 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQcdK8x.s 			page 35


 690              		.loc 1 1079 5
 691 001a 002B     		cmp	r3, #0
 692 001c 09D1     		bne	.L33
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 693              		.loc 1 1083 17
 694 001e 2A4A     		ldr	r2, .L38+4
 695 0020 7B68     		ldr	r3, [r7, #4]
 696 0022 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 697              		.loc 1 1085 31
 698 0024 274B     		ldr	r3, .L38
 699 0026 1B68     		ldr	r3, [r3]
 700              		.loc 1 1085 6
 701 0028 012B     		cmp	r3, #1
 702 002a 10D1     		bne	.L34
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 703              		.loc 1 1090 5
 704 002c FFF7FEFF 		bl	prvInitialiseTaskLists
 705 0030 0DE0     		b	.L34
 706              	.L33:
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 707              		.loc 1 1102 26
 708 0032 264B     		ldr	r3, .L38+8
 709 0034 1B68     		ldr	r3, [r3]
 710              		.loc 1 1102 6
 711 0036 002B     		cmp	r3, #0
 712 0038 09D1     		bne	.L34
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 713              		.loc 1 1104 21
 714 003a 234B     		ldr	r3, .L38+4
 715 003c 1B68     		ldr	r3, [r3]
 716 003e DA6A     		ldr	r2, [r3, #44]
 717              		.loc 1 1104 45
 718 0040 7B68     		ldr	r3, [r7, #4]
 719 0042 DB6A     		ldr	r3, [r3, #44]
 720              		.loc 1 1104 7
 721 0044 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccQcdK8x.s 			page 36


 722 0046 02D8     		bhi	.L34
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 723              		.loc 1 1106 19
 724 0048 1F4A     		ldr	r2, .L38+4
 725 004a 7B68     		ldr	r3, [r7, #4]
 726 004c 1360     		str	r3, [r2]
 727              	.L34:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
 728              		.loc 1 1119 15
 729 004e 204B     		ldr	r3, .L38+12
 730 0050 1B68     		ldr	r3, [r3]
 731 0052 0133     		adds	r3, r3, #1
 732 0054 1E4A     		ldr	r2, .L38+12
 733 0056 1360     		str	r3, [r2]
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
 734              		.loc 1 1124 26
 735 0058 1D4B     		ldr	r3, .L38+12
 736 005a 1A68     		ldr	r2, [r3]
 737 005c 7B68     		ldr	r3, [r7, #4]
 738 005e 5A64     		str	r2, [r3, #68]
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
 739              		.loc 1 1129 3
 740 0060 7B68     		ldr	r3, [r7, #4]
 741 0062 DA6A     		ldr	r2, [r3, #44]
 742 0064 1B4B     		ldr	r3, .L38+16
 743 0066 1B68     		ldr	r3, [r3]
 744 0068 9A42     		cmp	r2, r3
 745 006a 03D9     		bls	.L35
 746              		.loc 1 1129 3 is_stmt 0 discriminator 1
 747 006c 7B68     		ldr	r3, [r7, #4]
 748 006e DB6A     		ldr	r3, [r3, #44]
 749 0070 184A     		ldr	r2, .L38+16
 750 0072 1360     		str	r3, [r2]
 751              	.L35:
 752              		.loc 1 1129 3 discriminator 3
 753 0074 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccQcdK8x.s 			page 37


 754 0076 DA6A     		ldr	r2, [r3, #44]
 755 0078 1346     		mov	r3, r2
 756 007a 9B00     		lsls	r3, r3, #2
 757 007c 1344     		add	r3, r3, r2
 758 007e 9B00     		lsls	r3, r3, #2
 759 0080 154A     		ldr	r2, .L38+20
 760 0082 1A44     		add	r2, r2, r3
 761 0084 7B68     		ldr	r3, [r7, #4]
 762 0086 0433     		adds	r3, r3, #4
 763 0088 1946     		mov	r1, r3
 764 008a 1046     		mov	r0, r2
 765 008c FFF7FEFF 		bl	vListInsertEnd
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 766              		.loc 1 1133 2 is_stmt 1 discriminator 3
 767 0090 FFF7FEFF 		bl	vPortExitCritical
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
 768              		.loc 1 1135 24 discriminator 3
 769 0094 0D4B     		ldr	r3, .L38+8
 770 0096 1B68     		ldr	r3, [r3]
 771              		.loc 1 1135 4 discriminator 3
 772 0098 002B     		cmp	r3, #0
 773 009a 0ED0     		beq	.L37
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 774              		.loc 1 1139 19
 775 009c 0A4B     		ldr	r3, .L38+4
 776 009e 1B68     		ldr	r3, [r3]
 777 00a0 DA6A     		ldr	r2, [r3, #44]
 778              		.loc 1 1139 42
 779 00a2 7B68     		ldr	r3, [r7, #4]
 780 00a4 DB6A     		ldr	r3, [r3, #44]
 781              		.loc 1 1139 5
 782 00a6 9A42     		cmp	r2, r3
 783 00a8 07D2     		bcs	.L37
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
 784              		.loc 1 1141 4
 785 00aa 0C4B     		ldr	r3, .L38+24
 786 00ac 4FF08052 		mov	r2, #268435456
 787 00b0 1A60     		str	r2, [r3]
 788              		.syntax unified
 789              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 790 00b2 BFF34F8F 		dsb
 791              	@ 0 "" 2
 792              	@ 1141 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 793 00b6 BFF36F8F 		isb
 794              	@ 0 "" 2
 795              		.thumb
 796              		.syntax unified
 797              	.L37:
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccQcdK8x.s 			page 38


1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 798              		.loc 1 1152 1
 799 00ba 00BF     		nop
 800 00bc 0837     		adds	r7, r7, #8
 801              	.LCFI18:
 802              		.cfi_def_cfa_offset 8
 803 00be BD46     		mov	sp, r7
 804              	.LCFI19:
 805              		.cfi_def_cfa_register 13
 806              		@ sp needed
 807 00c0 80BD     		pop	{r7, pc}
 808              	.L39:
 809 00c2 00BF     		.align	2
 810              	.L38:
 811 00c4 00000000 		.word	uxCurrentNumberOfTasks
 812 00c8 00000000 		.word	pxCurrentTCB
 813 00cc 00000000 		.word	xSchedulerRunning
 814 00d0 00000000 		.word	uxTaskNumber
 815 00d4 00000000 		.word	uxTopReadyPriority
 816 00d8 00000000 		.word	pxReadyTasksLists
 817 00dc 04ED00E0 		.word	-536810236
 818              		.cfi_endproc
 819              	.LFE10:
 821              		.section	.text.vTaskDelete,"ax",%progbits
 822              		.align	1
 823              		.global	vTaskDelete
 824              		.syntax unified
 825              		.thumb
 826              		.thumb_func
 827              		.fpu fpv4-sp-d16
 829              	vTaskDelete:
 830              	.LFB11:
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 831              		.loc 1 1158 2
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 16
 834              		@ frame_needed = 1, uses_anonymous_args = 0
 835 0000 80B5     		push	{r7, lr}
 836              	.LCFI20:
 837              		.cfi_def_cfa_offset 8
 838              		.cfi_offset 7, -8
 839              		.cfi_offset 14, -4
 840 0002 84B0     		sub	sp, sp, #16
ARM GAS  /tmp/ccQcdK8x.s 			page 39


 841              	.LCFI21:
 842              		.cfi_def_cfa_offset 24
 843 0004 00AF     		add	r7, sp, #0
 844              	.LCFI22:
 845              		.cfi_def_cfa_register 7
 846 0006 7860     		str	r0, [r7, #4]
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 847              		.loc 1 1161 3
 848 0008 FFF7FEFF 		bl	vPortEnterCritical
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 849              		.loc 1 1165 12
 850 000c 7B68     		ldr	r3, [r7, #4]
 851 000e 002B     		cmp	r3, #0
 852 0010 02D1     		bne	.L41
 853              		.loc 1 1165 12 is_stmt 0 discriminator 1
 854 0012 2C4B     		ldr	r3, .L50
 855 0014 1B68     		ldr	r3, [r3]
 856 0016 00E0     		b	.L42
 857              	.L41:
 858              		.loc 1 1165 12 discriminator 2
 859 0018 7B68     		ldr	r3, [r7, #4]
 860              	.L42:
 861              		.loc 1 1165 10 is_stmt 1 discriminator 4
 862 001a FB60     		str	r3, [r7, #12]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 863              		.loc 1 1168 8 discriminator 4
 864 001c FB68     		ldr	r3, [r7, #12]
 865 001e 0433     		adds	r3, r3, #4
 866 0020 1846     		mov	r0, r3
 867 0022 FFF7FEFF 		bl	uxListRemove
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 868              		.loc 1 1178 8 discriminator 4
 869 0026 FB68     		ldr	r3, [r7, #12]
 870 0028 9B6A     		ldr	r3, [r3, #40]
 871              		.loc 1 1178 6 discriminator 4
 872 002a 002B     		cmp	r3, #0
 873 002c 04D0     		beq	.L43
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 874              		.loc 1 1180 14
 875 002e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccQcdK8x.s 			page 40


 876 0030 1833     		adds	r3, r3, #24
 877 0032 1846     		mov	r0, r3
 878 0034 FFF7FEFF 		bl	uxListRemove
 879              	.L43:
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
 880              		.loc 1 1191 16
 881 0038 234B     		ldr	r3, .L50+4
 882 003a 1B68     		ldr	r3, [r3]
 883 003c 0133     		adds	r3, r3, #1
 884 003e 224A     		ldr	r2, .L50+4
 885 0040 1360     		str	r3, [r2]
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 886              		.loc 1 1193 14
 887 0042 204B     		ldr	r3, .L50
 888 0044 1B68     		ldr	r3, [r3]
 889              		.loc 1 1193 6
 890 0046 FA68     		ldr	r2, [r7, #12]
 891 0048 9A42     		cmp	r2, r3
 892 004a 0BD1     		bne	.L44
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 893              		.loc 1 1200 5
 894 004c FB68     		ldr	r3, [r7, #12]
 895 004e 0433     		adds	r3, r3, #4
 896 0050 1946     		mov	r1, r3
 897 0052 1E48     		ldr	r0, .L50+8
 898 0054 FFF7FEFF 		bl	vListInsertEnd
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
 899              		.loc 1 1205 5
 900 0058 1D4B     		ldr	r3, .L50+12
 901 005a 1B68     		ldr	r3, [r3]
 902 005c 0133     		adds	r3, r3, #1
 903 005e 1C4A     		ldr	r2, .L50+12
 904 0060 1360     		str	r3, [r2]
 905 0062 09E0     		b	.L45
 906              	.L44:
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 41


1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 907              		.loc 1 1216 5
 908 0064 1B4B     		ldr	r3, .L50+16
 909 0066 1B68     		ldr	r3, [r3]
 910 0068 013B     		subs	r3, r3, #1
 911 006a 1A4A     		ldr	r2, .L50+16
 912 006c 1360     		str	r3, [r2]
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 913              		.loc 1 1217 5
 914 006e F868     		ldr	r0, [r7, #12]
 915 0070 FFF7FEFF 		bl	prvDeleteTCB
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 916              		.loc 1 1221 5
 917 0074 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 918              	.L45:
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 919              		.loc 1 1226 3
 920 0078 FFF7FEFF 		bl	vPortExitCritical
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 921              		.loc 1 1230 25
 922 007c 164B     		ldr	r3, .L50+20
 923 007e 1B68     		ldr	r3, [r3]
 924              		.loc 1 1230 5
 925 0080 002B     		cmp	r3, #0
 926 0082 1AD0     		beq	.L49
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 927              		.loc 1 1232 14
 928 0084 0F4B     		ldr	r3, .L50
 929 0086 1B68     		ldr	r3, [r3]
 930              		.loc 1 1232 6
 931 0088 FA68     		ldr	r2, [r7, #12]
 932 008a 9A42     		cmp	r2, r3
 933 008c 15D1     		bne	.L49
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 934              		.loc 1 1234 5
 935 008e 134B     		ldr	r3, .L50+24
ARM GAS  /tmp/ccQcdK8x.s 			page 42


 936 0090 1B68     		ldr	r3, [r3]
 937 0092 002B     		cmp	r3, #0
 938 0094 09D0     		beq	.L47
 939              	.LBB133:
 940              	.LBB134:
 941              		.loc 2 195 2 discriminator 1
 942              		.syntax unified
 943              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 944 0096 4FF05003 			mov r3, #80												
 945 009a 83F31188 		msr basepri, r3											
 946 009e BFF36F8F 		isb														
 947 00a2 BFF34F8F 		dsb														
 948              	
 949              	@ 0 "" 2
 950              		.thumb
 951              		.syntax unified
 952 00a6 BB60     		str	r3, [r7, #8]
 953              	.L48:
 954              	.LBE134:
 955              	.LBE133:
 956              		.loc 1 1234 5 discriminator 1
 957 00a8 FEE7     		b	.L48
 958              	.L47:
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 959              		.loc 1 1235 5
 960 00aa 0D4B     		ldr	r3, .L50+28
 961 00ac 4FF08052 		mov	r2, #268435456
 962 00b0 1A60     		str	r2, [r3]
 963              		.syntax unified
 964              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 965 00b2 BFF34F8F 		dsb
 966              	@ 0 "" 2
 967              	@ 1235 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 968 00b6 BFF36F8F 		isb
 969              	@ 0 "" 2
 970              		.thumb
 971              		.syntax unified
 972              	.L49:
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 973              		.loc 1 1242 2
 974 00ba 00BF     		nop
 975 00bc 1037     		adds	r7, r7, #16
 976              	.LCFI23:
 977              		.cfi_def_cfa_offset 8
 978 00be BD46     		mov	sp, r7
 979              	.LCFI24:
 980              		.cfi_def_cfa_register 13
 981              		@ sp needed
 982 00c0 80BD     		pop	{r7, pc}
 983              	.L51:
 984 00c2 00BF     		.align	2
ARM GAS  /tmp/ccQcdK8x.s 			page 43


 985              	.L50:
 986 00c4 00000000 		.word	pxCurrentTCB
 987 00c8 00000000 		.word	uxTaskNumber
 988 00cc 00000000 		.word	xTasksWaitingTermination
 989 00d0 00000000 		.word	uxDeletedTasksWaitingCleanUp
 990 00d4 00000000 		.word	uxCurrentNumberOfTasks
 991 00d8 00000000 		.word	xSchedulerRunning
 992 00dc 00000000 		.word	uxSchedulerSuspended
 993 00e0 04ED00E0 		.word	-536810236
 994              		.cfi_endproc
 995              	.LFE11:
 997              		.section	.text.vTaskDelayUntil,"ax",%progbits
 998              		.align	1
 999              		.global	vTaskDelayUntil
 1000              		.syntax unified
 1001              		.thumb
 1002              		.thumb_func
 1003              		.fpu fpv4-sp-d16
 1005              	vTaskDelayUntil:
 1006              	.LFB12:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1007              		.loc 1 1250 2
 1008              		.cfi_startproc
 1009              		@ args = 0, pretend = 0, frame = 40
 1010              		@ frame_needed = 1, uses_anonymous_args = 0
 1011 0000 80B5     		push	{r7, lr}
 1012              	.LCFI25:
 1013              		.cfi_def_cfa_offset 8
 1014              		.cfi_offset 7, -8
 1015              		.cfi_offset 14, -4
 1016 0002 8AB0     		sub	sp, sp, #40
 1017              	.LCFI26:
 1018              		.cfi_def_cfa_offset 48
 1019 0004 00AF     		add	r7, sp, #0
 1020              	.LCFI27:
 1021              		.cfi_def_cfa_register 7
 1022 0006 7860     		str	r0, [r7, #4]
 1023 0008 3960     		str	r1, [r7]
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 1024              		.loc 1 1252 30
 1025 000a 0023     		movs	r3, #0
 1026 000c 7B62     		str	r3, [r7, #36]
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
 1027              		.loc 1 1254 3
 1028 000e 7B68     		ldr	r3, [r7, #4]
 1029 0010 002B     		cmp	r3, #0
 1030 0012 09D1     		bne	.L53
 1031              	.LBB135:
ARM GAS  /tmp/ccQcdK8x.s 			page 44


 1032              	.LBB136:
 1033              		.loc 2 195 2 discriminator 1
 1034              		.syntax unified
 1035              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1036 0014 4FF05003 			mov r3, #80												
 1037 0018 83F31188 		msr basepri, r3											
 1038 001c BFF36F8F 		isb														
 1039 0020 BFF34F8F 		dsb														
 1040              	
 1041              	@ 0 "" 2
 1042              		.thumb
 1043              		.syntax unified
 1044 0024 7B61     		str	r3, [r7, #20]
 1045              	.L54:
 1046              	.LBE136:
 1047              	.LBE135:
 1048              		.loc 1 1254 3 discriminator 1
 1049 0026 FEE7     		b	.L54
 1050              	.L53:
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 1051              		.loc 1 1255 3
 1052 0028 3B68     		ldr	r3, [r7]
 1053 002a 002B     		cmp	r3, #0
 1054 002c 09D1     		bne	.L55
 1055              	.LBB137:
 1056              	.LBB138:
 1057              		.loc 2 195 2 discriminator 1
 1058              		.syntax unified
 1059              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1060 002e 4FF05003 			mov r3, #80												
 1061 0032 83F31188 		msr basepri, r3											
 1062 0036 BFF36F8F 		isb														
 1063 003a BFF34F8F 		dsb														
 1064              	
 1065              	@ 0 "" 2
 1066              		.thumb
 1067              		.syntax unified
 1068 003e 3B61     		str	r3, [r7, #16]
 1069              	.L56:
 1070              	.LBE138:
 1071              	.LBE137:
 1072              		.loc 1 1255 3 discriminator 2
 1073 0040 FEE7     		b	.L56
 1074              	.L55:
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 1075              		.loc 1 1256 3
 1076 0042 294B     		ldr	r3, .L65
 1077 0044 1B68     		ldr	r3, [r3]
 1078 0046 002B     		cmp	r3, #0
 1079 0048 09D0     		beq	.L57
 1080              	.LBB139:
 1081              	.LBB140:
 1082              		.loc 2 195 2 discriminator 1
 1083              		.syntax unified
 1084              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1085 004a 4FF05003 			mov r3, #80												
 1086 004e 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccQcdK8x.s 			page 45


 1087 0052 BFF36F8F 		isb														
 1088 0056 BFF34F8F 		dsb														
 1089              	
 1090              	@ 0 "" 2
 1091              		.thumb
 1092              		.syntax unified
 1093 005a FB60     		str	r3, [r7, #12]
 1094              	.L58:
 1095              	.LBE140:
 1096              	.LBE139:
 1097              		.loc 1 1256 3 discriminator 3
 1098 005c FEE7     		b	.L58
 1099              	.L57:
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 1100              		.loc 1 1258 3
 1101 005e FFF7FEFF 		bl	vTaskSuspendAll
 1102              	.LBB141:
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
 1103              		.loc 1 1262 21
 1104 0062 224B     		ldr	r3, .L65+4
 1105 0064 1B68     		ldr	r3, [r3]
 1106 0066 3B62     		str	r3, [r7, #32]
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 1107              		.loc 1 1265 18
 1108 0068 7B68     		ldr	r3, [r7, #4]
 1109 006a 1B68     		ldr	r3, [r3]
 1110              		.loc 1 1265 16
 1111 006c 3A68     		ldr	r2, [r7]
 1112 006e 1344     		add	r3, r3, r2
 1113 0070 FB61     		str	r3, [r7, #28]
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
 1114              		.loc 1 1267 26
 1115 0072 7B68     		ldr	r3, [r7, #4]
 1116 0074 1B68     		ldr	r3, [r3]
 1117              		.loc 1 1267 6
 1118 0076 3A6A     		ldr	r2, [r7, #32]
 1119 0078 9A42     		cmp	r2, r3
 1120 007a 0BD2     		bcs	.L59
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 1121              		.loc 1 1274 25
 1122 007c 7B68     		ldr	r3, [r7, #4]
 1123 007e 1B68     		ldr	r3, [r3]
 1124              		.loc 1 1274 7
 1125 0080 FA69     		ldr	r2, [r7, #28]
ARM GAS  /tmp/ccQcdK8x.s 			page 46


 1126 0082 9A42     		cmp	r2, r3
 1127 0084 11D2     		bcs	.L60
 1128              		.loc 1 1274 47 discriminator 1
 1129 0086 FA69     		ldr	r2, [r7, #28]
 1130 0088 3B6A     		ldr	r3, [r7, #32]
 1131 008a 9A42     		cmp	r2, r3
 1132 008c 0DD9     		bls	.L60
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1133              		.loc 1 1276 19
 1134 008e 0123     		movs	r3, #1
 1135 0090 7B62     		str	r3, [r7, #36]
 1136 0092 0AE0     		b	.L60
 1137              	.L59:
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 1138              		.loc 1 1288 25
 1139 0094 7B68     		ldr	r3, [r7, #4]
 1140 0096 1B68     		ldr	r3, [r3]
 1141              		.loc 1 1288 7
 1142 0098 FA69     		ldr	r2, [r7, #28]
 1143 009a 9A42     		cmp	r2, r3
 1144 009c 03D3     		bcc	.L61
 1145              		.loc 1 1288 47 discriminator 1
 1146 009e FA69     		ldr	r2, [r7, #28]
 1147 00a0 3B6A     		ldr	r3, [r7, #32]
 1148 00a2 9A42     		cmp	r2, r3
 1149 00a4 01D9     		bls	.L60
 1150              	.L61:
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
 1151              		.loc 1 1290 19
 1152 00a6 0123     		movs	r3, #1
 1153 00a8 7B62     		str	r3, [r7, #36]
 1154              	.L60:
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
 1155              		.loc 1 1299 24
 1156 00aa 7B68     		ldr	r3, [r7, #4]
 1157 00ac FA69     		ldr	r2, [r7, #28]
ARM GAS  /tmp/ccQcdK8x.s 			page 47


 1158 00ae 1A60     		str	r2, [r3]
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
 1159              		.loc 1 1301 6
 1160 00b0 7B6A     		ldr	r3, [r7, #36]
 1161 00b2 002B     		cmp	r3, #0
 1162 00b4 06D0     		beq	.L62
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 1163              		.loc 1 1307 5
 1164 00b6 FA69     		ldr	r2, [r7, #28]
 1165 00b8 3B6A     		ldr	r3, [r7, #32]
 1166 00ba D31A     		subs	r3, r2, r3
 1167 00bc 0021     		movs	r1, #0
 1168 00be 1846     		mov	r0, r3
 1169 00c0 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 1170              	.L62:
 1171              	.LBE141:
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
 1172              		.loc 1 1314 21
 1173 00c4 FFF7FEFF 		bl	xTaskResumeAll
 1174 00c8 B861     		str	r0, [r7, #24]
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1175              		.loc 1 1318 5
 1176 00ca BB69     		ldr	r3, [r7, #24]
 1177 00cc 002B     		cmp	r3, #0
 1178 00ce 07D1     		bne	.L64
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1179              		.loc 1 1320 4
 1180 00d0 074B     		ldr	r3, .L65+8
 1181 00d2 4FF08052 		mov	r2, #268435456
 1182 00d6 1A60     		str	r2, [r3]
 1183              		.syntax unified
 1184              	@ 1320 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1185 00d8 BFF34F8F 		dsb
 1186              	@ 0 "" 2
 1187              	@ 1320 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1188 00dc BFF36F8F 		isb
 1189              	@ 0 "" 2
 1190              		.thumb
 1191              		.syntax unified
 1192              	.L64:
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccQcdK8x.s 			page 48


1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1193              		.loc 1 1326 2
 1194 00e0 00BF     		nop
 1195 00e2 2837     		adds	r7, r7, #40
 1196              	.LCFI28:
 1197              		.cfi_def_cfa_offset 8
 1198 00e4 BD46     		mov	sp, r7
 1199              	.LCFI29:
 1200              		.cfi_def_cfa_register 13
 1201              		@ sp needed
 1202 00e6 80BD     		pop	{r7, pc}
 1203              	.L66:
 1204              		.align	2
 1205              	.L65:
 1206 00e8 00000000 		.word	uxSchedulerSuspended
 1207 00ec 00000000 		.word	xTickCount
 1208 00f0 04ED00E0 		.word	-536810236
 1209              		.cfi_endproc
 1210              	.LFE12:
 1212              		.section	.text.vTaskDelay,"ax",%progbits
 1213              		.align	1
 1214              		.global	vTaskDelay
 1215              		.syntax unified
 1216              		.thumb
 1217              		.thumb_func
 1218              		.fpu fpv4-sp-d16
 1220              	vTaskDelay:
 1221              	.LFB13:
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1222              		.loc 1 1334 2
 1223              		.cfi_startproc
 1224              		@ args = 0, pretend = 0, frame = 16
 1225              		@ frame_needed = 1, uses_anonymous_args = 0
 1226 0000 80B5     		push	{r7, lr}
 1227              	.LCFI30:
 1228              		.cfi_def_cfa_offset 8
 1229              		.cfi_offset 7, -8
 1230              		.cfi_offset 14, -4
 1231 0002 84B0     		sub	sp, sp, #16
 1232              	.LCFI31:
 1233              		.cfi_def_cfa_offset 24
 1234 0004 00AF     		add	r7, sp, #0
 1235              	.LCFI32:
 1236              		.cfi_def_cfa_register 7
 1237 0006 7860     		str	r0, [r7, #4]
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
ARM GAS  /tmp/ccQcdK8x.s 			page 49


 1238              		.loc 1 1335 13
 1239 0008 0023     		movs	r3, #0
 1240 000a FB60     		str	r3, [r7, #12]
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
 1241              		.loc 1 1338 5
 1242 000c 7B68     		ldr	r3, [r7, #4]
 1243 000e 002B     		cmp	r3, #0
 1244 0010 16D0     		beq	.L68
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
 1245              		.loc 1 1340 4
 1246 0012 134B     		ldr	r3, .L73
 1247 0014 1B68     		ldr	r3, [r3]
 1248 0016 002B     		cmp	r3, #0
 1249 0018 09D0     		beq	.L69
 1250              	.LBB142:
 1251              	.LBB143:
 1252              		.loc 2 195 2 discriminator 1
 1253              		.syntax unified
 1254              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1255 001a 4FF05003 			mov r3, #80												
 1256 001e 83F31188 		msr basepri, r3											
 1257 0022 BFF36F8F 		isb														
 1258 0026 BFF34F8F 		dsb														
 1259              	
 1260              	@ 0 "" 2
 1261              		.thumb
 1262              		.syntax unified
 1263 002a BB60     		str	r3, [r7, #8]
 1264              	.L70:
 1265              	.LBE143:
 1266              	.LBE142:
 1267              		.loc 1 1340 4 discriminator 1
 1268 002c FEE7     		b	.L70
 1269              	.L69:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 1270              		.loc 1 1341 4
 1271 002e FFF7FEFF 		bl	vTaskSuspendAll
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 1272              		.loc 1 1352 5
 1273 0032 0021     		movs	r1, #0
 1274 0034 7868     		ldr	r0, [r7, #4]
 1275 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
ARM GAS  /tmp/ccQcdK8x.s 			page 50


 1276              		.loc 1 1354 22
 1277 003a FFF7FEFF 		bl	xTaskResumeAll
 1278 003e F860     		str	r0, [r7, #12]
 1279              	.L68:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
 1280              		.loc 1 1363 5
 1281 0040 FB68     		ldr	r3, [r7, #12]
 1282 0042 002B     		cmp	r3, #0
 1283 0044 07D1     		bne	.L72
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
 1284              		.loc 1 1365 4
 1285 0046 074B     		ldr	r3, .L73+4
 1286 0048 4FF08052 		mov	r2, #268435456
 1287 004c 1A60     		str	r2, [r3]
 1288              		.syntax unified
 1289              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1290 004e BFF34F8F 		dsb
 1291              	@ 0 "" 2
 1292              	@ 1365 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1293 0052 BFF36F8F 		isb
 1294              	@ 0 "" 2
 1295              		.thumb
 1296              		.syntax unified
 1297              	.L72:
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1298              		.loc 1 1371 2
 1299 0056 00BF     		nop
 1300 0058 1037     		adds	r7, r7, #16
 1301              	.LCFI33:
 1302              		.cfi_def_cfa_offset 8
 1303 005a BD46     		mov	sp, r7
 1304              	.LCFI34:
 1305              		.cfi_def_cfa_register 13
 1306              		@ sp needed
 1307 005c 80BD     		pop	{r7, pc}
 1308              	.L74:
 1309 005e 00BF     		.align	2
 1310              	.L73:
 1311 0060 00000000 		.word	uxSchedulerSuspended
 1312 0064 04ED00E0 		.word	-536810236
 1313              		.cfi_endproc
 1314              	.LFE13:
 1316              		.section	.text.eTaskGetState,"ax",%progbits
ARM GAS  /tmp/ccQcdK8x.s 			page 51


 1317              		.align	1
 1318              		.global	eTaskGetState
 1319              		.syntax unified
 1320              		.thumb
 1321              		.thumb_func
 1322              		.fpu fpv4-sp-d16
 1324              	eTaskGetState:
 1325              	.LFB14:
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDel
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1326              		.loc 1 1379 2
 1327              		.cfi_startproc
 1328              		@ args = 0, pretend = 0, frame = 32
 1329              		@ frame_needed = 1, uses_anonymous_args = 0
 1330 0000 80B5     		push	{r7, lr}
 1331              	.LCFI35:
 1332              		.cfi_def_cfa_offset 8
 1333              		.cfi_offset 7, -8
 1334              		.cfi_offset 14, -4
 1335 0002 88B0     		sub	sp, sp, #32
 1336              	.LCFI36:
 1337              		.cfi_def_cfa_offset 40
 1338 0004 00AF     		add	r7, sp, #0
 1339              	.LCFI37:
 1340              		.cfi_def_cfa_register 7
 1341 0006 7860     		str	r0, [r7, #4]
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 1342              		.loc 1 1382 22
 1343 0008 7B68     		ldr	r3, [r7, #4]
 1344 000a BB61     		str	r3, [r7, #24]
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
 1345              		.loc 1 1384 3
 1346 000c BB69     		ldr	r3, [r7, #24]
 1347 000e 002B     		cmp	r3, #0
 1348 0010 09D1     		bne	.L76
 1349              	.LBB144:
 1350              	.LBB145:
 1351              		.loc 2 195 2 discriminator 1
 1352              		.syntax unified
 1353              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1354 0012 4FF05003 			mov r3, #80												
 1355 0016 83F31188 		msr basepri, r3											
 1356 001a BFF36F8F 		isb														
 1357 001e BFF34F8F 		dsb														
 1358              	
 1359              	@ 0 "" 2
 1360              		.thumb
 1361              		.syntax unified
ARM GAS  /tmp/ccQcdK8x.s 			page 52


 1362 0022 BB60     		str	r3, [r7, #8]
 1363              	.L77:
 1364              	.LBE145:
 1365              	.LBE144:
 1366              		.loc 1 1384 3 discriminator 1
 1367 0024 FEE7     		b	.L77
 1368              	.L76:
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1369              		.loc 1 1386 13
 1370 0026 244B     		ldr	r3, .L90
 1371 0028 1B68     		ldr	r3, [r3]
 1372              		.loc 1 1386 5
 1373 002a BA69     		ldr	r2, [r7, #24]
 1374 002c 9A42     		cmp	r2, r3
 1375 002e 02D1     		bne	.L78
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
 1376              		.loc 1 1389 12
 1377 0030 0023     		movs	r3, #0
 1378 0032 FB77     		strb	r3, [r7, #31]
 1379 0034 3AE0     		b	.L79
 1380              	.L78:
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1381              		.loc 1 1393 4
 1382 0036 FFF7FEFF 		bl	vPortEnterCritical
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 1383              		.loc 1 1395 17
 1384 003a BB69     		ldr	r3, [r7, #24]
 1385 003c 5B69     		ldr	r3, [r3, #20]
 1386 003e 7B61     		str	r3, [r7, #20]
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxDelayedList = pxDelayedTaskList;
 1387              		.loc 1 1396 19
 1388 0040 1E4B     		ldr	r3, .L90+4
 1389 0042 1B68     		ldr	r3, [r3]
 1390 0044 3B61     		str	r3, [r7, #16]
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 1391              		.loc 1 1397 29
 1392 0046 1E4B     		ldr	r3, .L90+8
 1393 0048 1B68     		ldr	r3, [r3]
 1394 004a FB60     		str	r3, [r7, #12]
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1395              		.loc 1 1399 4
 1396 004c FFF7FEFF 		bl	vPortExitCritical
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 1397              		.loc 1 1401 6
 1398 0050 7A69     		ldr	r2, [r7, #20]
 1399 0052 3B69     		ldr	r3, [r7, #16]
 1400 0054 9A42     		cmp	r2, r3
 1401 0056 03D0     		beq	.L80
ARM GAS  /tmp/ccQcdK8x.s 			page 53


 1402              		.loc 1 1401 41 discriminator 1
 1403 0058 7A69     		ldr	r2, [r7, #20]
 1404 005a FB68     		ldr	r3, [r7, #12]
 1405 005c 9A42     		cmp	r2, r3
 1406 005e 02D1     		bne	.L81
 1407              	.L80:
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
 1408              		.loc 1 1405 13
 1409 0060 0223     		movs	r3, #2
 1410 0062 FB77     		strb	r3, [r7, #31]
 1411 0064 22E0     		b	.L79
 1412              	.L81:
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
 1413              		.loc 1 1409 12
 1414 0066 7B69     		ldr	r3, [r7, #20]
 1415 0068 164A     		ldr	r2, .L90+12
 1416 006a 9342     		cmp	r3, r2
 1417 006c 12D1     		bne	.L82
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it blocked
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 1418              		.loc 1 1414 10
 1419 006e BB69     		ldr	r3, [r7, #24]
 1420 0070 9B6A     		ldr	r3, [r3, #40]
 1421              		.loc 1 1414 8
 1422 0072 002B     		cmp	r3, #0
 1423 0074 0BD1     		bne	.L83
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#if( configUSE_TASK_NOTIFICATIONS == 1 )
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* The task does not appear on the event list item of
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							and of the RTOS objects, but could still be in the
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							blocked state if it is waiting on its notification
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							rather than waiting on an object. */
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1424              		.loc 1 1422 17
 1425 0076 BB69     		ldr	r3, [r7, #24]
 1426 0078 93F85C30 		ldrb	r3, [r3, #92]
 1427 007c DBB2     		uxtb	r3, r3
 1428              		.loc 1 1422 10
 1429 007e 012B     		cmp	r3, #1
 1430 0080 02D1     		bne	.L84
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eBlocked;
 1431              		.loc 1 1424 17
 1432 0082 0223     		movs	r3, #2
 1433 0084 FB77     		strb	r3, [r7, #31]
 1434 0086 11E0     		b	.L79
 1435              	.L84:
ARM GAS  /tmp/ccQcdK8x.s 			page 54


1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								eReturn = eSuspended;
 1436              		.loc 1 1428 17
 1437 0088 0323     		movs	r3, #3
 1438 008a FB77     		strb	r3, [r7, #31]
 1439 008c 0EE0     		b	.L79
 1440              	.L83:
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							eReturn = eSuspended;
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
 1441              		.loc 1 1439 15
 1442 008e 0223     		movs	r3, #2
 1443 0090 FB77     		strb	r3, [r7, #31]
 1444 0092 0BE0     		b	.L79
 1445              	.L82:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 1446              		.loc 1 1445 12
 1447 0094 7B69     		ldr	r3, [r7, #20]
 1448 0096 0C4A     		ldr	r2, .L90+16
 1449 0098 9342     		cmp	r3, r2
 1450 009a 02D0     		beq	.L87
 1451              		.loc 1 1445 59 discriminator 1
 1452 009c 7B69     		ldr	r3, [r7, #20]
 1453 009e 002B     		cmp	r3, #0
 1454 00a0 02D1     		bne	.L88
 1455              	.L87:
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
 1456              		.loc 1 1450 14
 1457 00a2 0423     		movs	r3, #4
 1458 00a4 FB77     		strb	r3, [r7, #31]
 1459 00a6 01E0     		b	.L79
 1460              	.L88:
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
ARM GAS  /tmp/ccQcdK8x.s 			page 55


1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
 1461              		.loc 1 1458 13
 1462 00a8 0123     		movs	r3, #1
 1463 00aa FB77     		strb	r3, [r7, #31]
 1464              	.L79:
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
 1465              		.loc 1 1462 10
 1466 00ac FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 1467              		.loc 1 1463 2
 1468 00ae 1846     		mov	r0, r3
 1469 00b0 2037     		adds	r7, r7, #32
 1470              	.LCFI38:
 1471              		.cfi_def_cfa_offset 8
 1472 00b2 BD46     		mov	sp, r7
 1473              	.LCFI39:
 1474              		.cfi_def_cfa_register 13
 1475              		@ sp needed
 1476 00b4 80BD     		pop	{r7, pc}
 1477              	.L91:
 1478 00b6 00BF     		.align	2
 1479              	.L90:
 1480 00b8 00000000 		.word	pxCurrentTCB
 1481 00bc 00000000 		.word	pxDelayedTaskList
 1482 00c0 00000000 		.word	pxOverflowDelayedTaskList
 1483 00c4 00000000 		.word	xSuspendedTaskList
 1484 00c8 00000000 		.word	xTasksWaitingTermination
 1485              		.cfi_endproc
 1486              	.LFE14:
 1488              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1489              		.align	1
 1490              		.global	uxTaskPriorityGet
 1491              		.syntax unified
 1492              		.thumb
 1493              		.thumb_func
 1494              		.fpu fpv4-sp-d16
 1496              	uxTaskPriorityGet:
 1497              	.LFB15:
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1498              		.loc 1 1471 2
 1499              		.cfi_startproc
 1500              		@ args = 0, pretend = 0, frame = 16
 1501              		@ frame_needed = 1, uses_anonymous_args = 0
 1502 0000 80B5     		push	{r7, lr}
 1503              	.LCFI40:
 1504              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccQcdK8x.s 			page 56


 1505              		.cfi_offset 7, -8
 1506              		.cfi_offset 14, -4
 1507 0002 84B0     		sub	sp, sp, #16
 1508              	.LCFI41:
 1509              		.cfi_def_cfa_offset 24
 1510 0004 00AF     		add	r7, sp, #0
 1511              	.LCFI42:
 1512              		.cfi_def_cfa_register 7
 1513 0006 7860     		str	r0, [r7, #4]
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1514              		.loc 1 1475 3
 1515 0008 FFF7FEFF 		bl	vPortEnterCritical
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the task
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			that called uxTaskPriorityGet() that is being queried. */
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1516              		.loc 1 1479 12
 1517 000c 7B68     		ldr	r3, [r7, #4]
 1518 000e 002B     		cmp	r3, #0
 1519 0010 02D1     		bne	.L93
 1520              		.loc 1 1479 12 is_stmt 0 discriminator 1
 1521 0012 074B     		ldr	r3, .L96
 1522 0014 1B68     		ldr	r3, [r3]
 1523 0016 00E0     		b	.L94
 1524              	.L93:
 1525              		.loc 1 1479 12 discriminator 2
 1526 0018 7B68     		ldr	r3, [r7, #4]
 1527              	.L94:
 1528              		.loc 1 1479 10 is_stmt 1 discriminator 4
 1529 001a FB60     		str	r3, [r7, #12]
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1530              		.loc 1 1480 13 discriminator 4
 1531 001c FB68     		ldr	r3, [r7, #12]
 1532 001e DB6A     		ldr	r3, [r3, #44]
 1533 0020 BB60     		str	r3, [r7, #8]
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1534              		.loc 1 1482 3 discriminator 4
 1535 0022 FFF7FEFF 		bl	vPortExitCritical
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1536              		.loc 1 1484 10 discriminator 4
 1537 0026 BB68     		ldr	r3, [r7, #8]
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1538              		.loc 1 1485 2 discriminator 4
 1539 0028 1846     		mov	r0, r3
 1540 002a 1037     		adds	r7, r7, #16
 1541              	.LCFI43:
 1542              		.cfi_def_cfa_offset 8
 1543 002c BD46     		mov	sp, r7
 1544              	.LCFI44:
 1545              		.cfi_def_cfa_register 13
 1546              		@ sp needed
 1547 002e 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccQcdK8x.s 			page 57


 1548              	.L97:
 1549              		.align	2
 1550              	.L96:
 1551 0030 00000000 		.word	pxCurrentTCB
 1552              		.cfi_endproc
 1553              	.LFE15:
 1555              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1556              		.align	1
 1557              		.global	uxTaskPriorityGetFromISR
 1558              		.syntax unified
 1559              		.thumb
 1560              		.thumb_func
 1561              		.fpu fpv4-sp-d16
 1563              	uxTaskPriorityGetFromISR:
 1564              	.LFB16:
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( const TaskHandle_t xTask )
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1565              		.loc 1 1493 2
 1566              		.cfi_startproc
 1567              		@ args = 0, pretend = 0, frame = 32
 1568              		@ frame_needed = 1, uses_anonymous_args = 0
 1569 0000 80B5     		push	{r7, lr}
 1570              	.LCFI45:
 1571              		.cfi_def_cfa_offset 8
 1572              		.cfi_offset 7, -8
 1573              		.cfi_offset 14, -4
 1574 0002 88B0     		sub	sp, sp, #32
 1575              	.LCFI46:
 1576              		.cfi_def_cfa_offset 40
 1577 0004 00AF     		add	r7, sp, #0
 1578              	.LCFI47:
 1579              		.cfi_def_cfa_register 7
 1580 0006 7860     		str	r0, [r7, #4]
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
ARM GAS  /tmp/ccQcdK8x.s 			page 58


1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 1581              		.loc 1 1513 3
 1582 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1583              	.LBB146:
 1584              	.LBB147:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1585              		.loc 2 211 2
 1586              		.syntax unified
 1587              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1588 000c EFF31182 			mrs r2, basepri											
 1589 0010 4FF05003 		mov r3, #80												
 1590 0014 83F31188 		msr basepri, r3											
 1591 0018 BFF36F8F 		isb														
 1592 001c BFF34F8F 		dsb														
 1593              	
 1594              	@ 0 "" 2
 1595              		.thumb
 1596              		.syntax unified
 1597 0020 3A61     		str	r2, [r7, #16]
 1598 0022 FB60     		str	r3, [r7, #12]
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 1599              		.loc 2 223 9
 1600 0024 3B69     		ldr	r3, [r7, #16]
 1601              	.LBE147:
 1602              	.LBE146:
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 1603              		.loc 1 1515 27
 1604 0026 FB61     		str	r3, [r7, #28]
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccQcdK8x.s 			page 59


1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1605              		.loc 1 1519 12
 1606 0028 7B68     		ldr	r3, [r7, #4]
 1607 002a 002B     		cmp	r3, #0
 1608 002c 02D1     		bne	.L100
 1609              		.loc 1 1519 12 is_stmt 0 discriminator 1
 1610 002e 094B     		ldr	r3, .L103
 1611 0030 1B68     		ldr	r3, [r3]
 1612 0032 00E0     		b	.L101
 1613              	.L100:
 1614              		.loc 1 1519 12 discriminator 2
 1615 0034 7B68     		ldr	r3, [r7, #4]
 1616              	.L101:
 1617              		.loc 1 1519 10 is_stmt 1 discriminator 4
 1618 0036 BB61     		str	r3, [r7, #24]
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1619              		.loc 1 1520 13 discriminator 4
 1620 0038 BB69     		ldr	r3, [r7, #24]
 1621 003a DB6A     		ldr	r3, [r3, #44]
 1622 003c 7B61     		str	r3, [r7, #20]
 1623 003e FB69     		ldr	r3, [r7, #28]
 1624 0040 BB60     		str	r3, [r7, #8]
 1625              	.LBB148:
 1626              	.LBB149:
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1627              		.loc 2 229 2 discriminator 4
 1628 0042 BB68     		ldr	r3, [r7, #8]
 1629              		.syntax unified
 1630              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1631 0044 83F31188 			msr basepri, r3	
 1632              	@ 0 "" 2
 1633              		.thumb
 1634              		.syntax unified
 1635              	.LBE149:
 1636              	.LBE148:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 1637              		.loc 1 1524 10 discriminator 4
 1638 0048 7B69     		ldr	r3, [r7, #20]
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1639              		.loc 1 1525 2 discriminator 4
 1640 004a 1846     		mov	r0, r3
 1641 004c 2037     		adds	r7, r7, #32
 1642              	.LCFI48:
 1643              		.cfi_def_cfa_offset 8
 1644 004e BD46     		mov	sp, r7
 1645              	.LCFI49:
 1646              		.cfi_def_cfa_register 13
ARM GAS  /tmp/ccQcdK8x.s 			page 60


 1647              		@ sp needed
 1648 0050 80BD     		pop	{r7, pc}
 1649              	.L104:
 1650 0052 00BF     		.align	2
 1651              	.L103:
 1652 0054 00000000 		.word	pxCurrentTCB
 1653              		.cfi_endproc
 1654              	.LFE16:
 1656              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1657              		.align	1
 1658              		.global	vTaskPrioritySet
 1659              		.syntax unified
 1660              		.thumb
 1661              		.thumb_func
 1662              		.fpu fpv4-sp-d16
 1664              	vTaskPrioritySet:
 1665              	.LFB17:
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1666              		.loc 1 1533 2
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 32
 1669              		@ frame_needed = 1, uses_anonymous_args = 0
 1670 0000 80B5     		push	{r7, lr}
 1671              	.LCFI50:
 1672              		.cfi_def_cfa_offset 8
 1673              		.cfi_offset 7, -8
 1674              		.cfi_offset 14, -4
 1675 0002 88B0     		sub	sp, sp, #32
 1676              	.LCFI51:
 1677              		.cfi_def_cfa_offset 40
 1678 0004 00AF     		add	r7, sp, #0
 1679              	.LCFI52:
 1680              		.cfi_def_cfa_register 7
 1681 0006 7860     		str	r0, [r7, #4]
 1682 0008 3960     		str	r1, [r7]
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1683              		.loc 1 1536 13
 1684 000a 0023     		movs	r3, #0
 1685 000c FB61     		str	r3, [r7, #28]
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 1686              		.loc 1 1538 3
 1687 000e 3B68     		ldr	r3, [r7]
 1688 0010 372B     		cmp	r3, #55
 1689 0012 09D9     		bls	.L106
 1690              	.LBB150:
 1691              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/ccQcdK8x.s 			page 61


 1692              		.loc 2 195 2 discriminator 1
 1693              		.syntax unified
 1694              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1695 0014 4FF05003 			mov r3, #80												
 1696 0018 83F31188 		msr basepri, r3											
 1697 001c BFF36F8F 		isb														
 1698 0020 BFF34F8F 		dsb														
 1699              	
 1700              	@ 0 "" 2
 1701              		.thumb
 1702              		.syntax unified
 1703 0024 FB60     		str	r3, [r7, #12]
 1704              	.L107:
 1705              	.LBE151:
 1706              	.LBE150:
 1707              		.loc 1 1538 3 discriminator 1
 1708 0026 FEE7     		b	.L107
 1709              	.L106:
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 1710              		.loc 1 1541 5
 1711 0028 3B68     		ldr	r3, [r7]
 1712 002a 372B     		cmp	r3, #55
 1713 002c 01D9     		bls	.L108
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 1714              		.loc 1 1543 18
 1715 002e 3723     		movs	r3, #55
 1716 0030 3B60     		str	r3, [r7]
 1717              	.L108:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1718              		.loc 1 1550 3
 1719 0032 FFF7FEFF 		bl	vPortEnterCritical
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
 1720              		.loc 1 1554 12
 1721 0036 7B68     		ldr	r3, [r7, #4]
 1722 0038 002B     		cmp	r3, #0
 1723 003a 02D1     		bne	.L109
 1724              		.loc 1 1554 12 is_stmt 0 discriminator 1
 1725 003c 3A4B     		ldr	r3, .L118
 1726 003e 1B68     		ldr	r3, [r3]
 1727 0040 00E0     		b	.L110
 1728              	.L109:
 1729              		.loc 1 1554 12 discriminator 2
 1730 0042 7B68     		ldr	r3, [r7, #4]
 1731              	.L110:
 1732              		.loc 1 1554 10 is_stmt 1 discriminator 4
ARM GAS  /tmp/ccQcdK8x.s 			page 62


 1733 0044 BB61     		str	r3, [r7, #24]
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
 1734              		.loc 1 1560 27 discriminator 4
 1735 0046 BB69     		ldr	r3, [r7, #24]
 1736 0048 DB6C     		ldr	r3, [r3, #76]
 1737 004a 7B61     		str	r3, [r7, #20]
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
 1738              		.loc 1 1568 6 discriminator 4
 1739 004c 7A69     		ldr	r2, [r7, #20]
 1740 004e 3B68     		ldr	r3, [r7]
 1741 0050 9A42     		cmp	r2, r3
 1742 0052 63D0     		beq	.L111
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
 1743              		.loc 1 1572 7
 1744 0054 3A68     		ldr	r2, [r7]
 1745 0056 7B69     		ldr	r3, [r7, #20]
 1746 0058 9A42     		cmp	r2, r3
 1747 005a 0DD9     		bls	.L112
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
 1748              		.loc 1 1574 16
 1749 005c 324B     		ldr	r3, .L118
 1750 005e 1B68     		ldr	r3, [r3]
 1751              		.loc 1 1574 8
 1752 0060 BA69     		ldr	r2, [r7, #24]
 1753 0062 9A42     		cmp	r2, r3
 1754 0064 0FD0     		beq	.L113
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 1755              		.loc 1 1579 40
 1756 0066 304B     		ldr	r3, .L118
 1757 0068 1B68     		ldr	r3, [r3]
 1758 006a DB6A     		ldr	r3, [r3, #44]
 1759              		.loc 1 1579 9
 1760 006c 3A68     		ldr	r2, [r7]
 1761 006e 9A42     		cmp	r2, r3
 1762 0070 09D3     		bcc	.L113
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
ARM GAS  /tmp/ccQcdK8x.s 			page 63


 1763              		.loc 1 1581 23
 1764 0072 0123     		movs	r3, #1
 1765 0074 FB61     		str	r3, [r7, #28]
 1766 0076 06E0     		b	.L113
 1767              	.L112:
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
 1768              		.loc 1 1595 20
 1769 0078 2B4B     		ldr	r3, .L118
 1770 007a 1B68     		ldr	r3, [r3]
 1771              		.loc 1 1595 12
 1772 007c BA69     		ldr	r2, [r7, #24]
 1773 007e 9A42     		cmp	r2, r3
 1774 0080 01D1     		bne	.L113
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
 1775              		.loc 1 1600 21
 1776 0082 0123     		movs	r3, #1
 1777 0084 FB61     		str	r3, [r7, #28]
 1778              	.L113:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 1779              		.loc 1 1612 27
 1780 0086 BB69     		ldr	r3, [r7, #24]
 1781 0088 DB6A     		ldr	r3, [r3, #44]
 1782 008a 3B61     		str	r3, [r7, #16]
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
ARM GAS  /tmp/ccQcdK8x.s 			page 64


 1783              		.loc 1 1618 15
 1784 008c BB69     		ldr	r3, [r7, #24]
 1785 008e DA6C     		ldr	r2, [r3, #76]
 1786              		.loc 1 1618 40
 1787 0090 BB69     		ldr	r3, [r7, #24]
 1788 0092 DB6A     		ldr	r3, [r3, #44]
 1789              		.loc 1 1618 8
 1790 0094 9A42     		cmp	r2, r3
 1791 0096 02D1     		bne	.L114
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
 1792              		.loc 1 1620 25
 1793 0098 BB69     		ldr	r3, [r7, #24]
 1794 009a 3A68     		ldr	r2, [r7]
 1795 009c DA62     		str	r2, [r3, #44]
 1796              	.L114:
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
 1797              		.loc 1 1628 28
 1798 009e BB69     		ldr	r3, [r7, #24]
 1799 00a0 3A68     		ldr	r2, [r7]
 1800 00a2 DA64     		str	r2, [r3, #76]
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
 1801              		.loc 1 1638 11
 1802 00a4 BB69     		ldr	r3, [r7, #24]
 1803 00a6 9B69     		ldr	r3, [r3, #24]
 1804              		.loc 1 1638 7
 1805 00a8 002B     		cmp	r3, #0
 1806 00aa 04DB     		blt	.L115
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
 1807              		.loc 1 1640 6
 1808 00ac 3B68     		ldr	r3, [r7]
 1809 00ae C3F13802 		rsb	r2, r3, #56
 1810 00b2 BB69     		ldr	r3, [r7, #24]
 1811 00b4 9A61     		str	r2, [r3, #24]
 1812              	.L115:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccQcdK8x.s 			page 65


1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
 1813              		.loc 1 1651 9
 1814 00b6 BB69     		ldr	r3, [r7, #24]
 1815 00b8 5969     		ldr	r1, [r3, #20]
 1816 00ba 3A69     		ldr	r2, [r7, #16]
 1817 00bc 1346     		mov	r3, r2
 1818 00be 9B00     		lsls	r3, r3, #2
 1819 00c0 1344     		add	r3, r3, r2
 1820 00c2 9B00     		lsls	r3, r3, #2
 1821 00c4 194A     		ldr	r2, .L118+4
 1822 00c6 1344     		add	r3, r3, r2
 1823              		.loc 1 1651 7
 1824 00c8 9942     		cmp	r1, r3
 1825 00ca 1CD1     		bne	.L116
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1826              		.loc 1 1656 10
 1827 00cc BB69     		ldr	r3, [r7, #24]
 1828 00ce 0433     		adds	r3, r3, #4
 1829 00d0 1846     		mov	r0, r3
 1830 00d2 FFF7FEFF 		bl	uxListRemove
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1831              		.loc 1 1667 6
 1832 00d6 BB69     		ldr	r3, [r7, #24]
 1833 00d8 DA6A     		ldr	r2, [r3, #44]
 1834 00da 154B     		ldr	r3, .L118+8
 1835 00dc 1B68     		ldr	r3, [r3]
 1836 00de 9A42     		cmp	r2, r3
 1837 00e0 03D9     		bls	.L117
 1838              		.loc 1 1667 6 is_stmt 0 discriminator 1
 1839 00e2 BB69     		ldr	r3, [r7, #24]
 1840 00e4 DB6A     		ldr	r3, [r3, #44]
 1841 00e6 124A     		ldr	r2, .L118+8
 1842 00e8 1360     		str	r3, [r2]
 1843              	.L117:
 1844              		.loc 1 1667 6 discriminator 3
 1845 00ea BB69     		ldr	r3, [r7, #24]
 1846 00ec DA6A     		ldr	r2, [r3, #44]
 1847 00ee 1346     		mov	r3, r2
ARM GAS  /tmp/ccQcdK8x.s 			page 66


 1848 00f0 9B00     		lsls	r3, r3, #2
 1849 00f2 1344     		add	r3, r3, r2
 1850 00f4 9B00     		lsls	r3, r3, #2
 1851 00f6 0D4A     		ldr	r2, .L118+4
 1852 00f8 1A44     		add	r2, r2, r3
 1853 00fa BB69     		ldr	r3, [r7, #24]
 1854 00fc 0433     		adds	r3, r3, #4
 1855 00fe 1946     		mov	r1, r3
 1856 0100 1046     		mov	r0, r2
 1857 0102 FFF7FEFF 		bl	vListInsertEnd
 1858              	.L116:
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
 1859              		.loc 1 1674 7 is_stmt 1
 1860 0106 FB69     		ldr	r3, [r7, #28]
 1861 0108 002B     		cmp	r3, #0
 1862 010a 07D0     		beq	.L111
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 1863              		.loc 1 1676 6
 1864 010c 094B     		ldr	r3, .L118+12
 1865 010e 4FF08052 		mov	r2, #268435456
 1866 0112 1A60     		str	r2, [r3]
 1867              		.syntax unified
 1868              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1869 0114 BFF34F8F 		dsb
 1870              	@ 0 "" 2
 1871              	@ 1676 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1872 0118 BFF36F8F 		isb
 1873              	@ 0 "" 2
 1874              		.thumb
 1875              		.syntax unified
 1876              	.L111:
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1877              		.loc 1 1688 3
 1878 011c FFF7FEFF 		bl	vPortExitCritical
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1879              		.loc 1 1689 2
 1880 0120 00BF     		nop
 1881 0122 2037     		adds	r7, r7, #32
 1882              	.LCFI53:
ARM GAS  /tmp/ccQcdK8x.s 			page 67


 1883              		.cfi_def_cfa_offset 8
 1884 0124 BD46     		mov	sp, r7
 1885              	.LCFI54:
 1886              		.cfi_def_cfa_register 13
 1887              		@ sp needed
 1888 0126 80BD     		pop	{r7, pc}
 1889              	.L119:
 1890              		.align	2
 1891              	.L118:
 1892 0128 00000000 		.word	pxCurrentTCB
 1893 012c 00000000 		.word	pxReadyTasksLists
 1894 0130 00000000 		.word	uxTopReadyPriority
 1895 0134 04ED00E0 		.word	-536810236
 1896              		.cfi_endproc
 1897              	.LFE17:
 1899              		.section	.text.vTaskSuspend,"ax",%progbits
 1900              		.align	1
 1901              		.global	vTaskSuspend
 1902              		.syntax unified
 1903              		.thumb
 1904              		.thumb_func
 1905              		.fpu fpv4-sp-d16
 1907              	vTaskSuspend:
 1908              	.LFB18:
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1909              		.loc 1 1697 2
 1910              		.cfi_startproc
 1911              		@ args = 0, pretend = 0, frame = 16
 1912              		@ frame_needed = 1, uses_anonymous_args = 0
 1913 0000 80B5     		push	{r7, lr}
 1914              	.LCFI55:
 1915              		.cfi_def_cfa_offset 8
 1916              		.cfi_offset 7, -8
 1917              		.cfi_offset 14, -4
 1918 0002 84B0     		sub	sp, sp, #16
 1919              	.LCFI56:
 1920              		.cfi_def_cfa_offset 24
 1921 0004 00AF     		add	r7, sp, #0
 1922              	.LCFI57:
 1923              		.cfi_def_cfa_register 7
 1924 0006 7860     		str	r0, [r7, #4]
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 1925              		.loc 1 1700 3
 1926 0008 FFF7FEFF 		bl	vPortEnterCritical
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
ARM GAS  /tmp/ccQcdK8x.s 			page 68


 1927              		.loc 1 1704 12
 1928 000c 7B68     		ldr	r3, [r7, #4]
 1929 000e 002B     		cmp	r3, #0
 1930 0010 02D1     		bne	.L121
 1931              		.loc 1 1704 12 is_stmt 0 discriminator 1
 1932 0012 2F4B     		ldr	r3, .L133
 1933 0014 1B68     		ldr	r3, [r3]
 1934 0016 00E0     		b	.L122
 1935              	.L121:
 1936              		.loc 1 1704 12 discriminator 2
 1937 0018 7B68     		ldr	r3, [r7, #4]
 1938              	.L122:
 1939              		.loc 1 1704 10 is_stmt 1 discriminator 4
 1940 001a FB60     		str	r3, [r7, #12]
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 1941              		.loc 1 1710 8 discriminator 4
 1942 001c FB68     		ldr	r3, [r7, #12]
 1943 001e 0433     		adds	r3, r3, #4
 1944 0020 1846     		mov	r0, r3
 1945 0022 FFF7FEFF 		bl	uxListRemove
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 1946              		.loc 1 1720 8 discriminator 4
 1947 0026 FB68     		ldr	r3, [r7, #12]
 1948 0028 9B6A     		ldr	r3, [r3, #40]
 1949              		.loc 1 1720 6 discriminator 4
 1950 002a 002B     		cmp	r3, #0
 1951 002c 04D0     		beq	.L123
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 1952              		.loc 1 1722 14
 1953 002e FB68     		ldr	r3, [r7, #12]
 1954 0030 1833     		adds	r3, r3, #24
 1955 0032 1846     		mov	r0, r3
 1956 0034 FFF7FEFF 		bl	uxListRemove
 1957              	.L123:
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 1958              		.loc 1 1729 4
ARM GAS  /tmp/ccQcdK8x.s 			page 69


 1959 0038 FB68     		ldr	r3, [r7, #12]
 1960 003a 0433     		adds	r3, r3, #4
 1961 003c 1946     		mov	r1, r3
 1962 003e 2548     		ldr	r0, .L133+4
 1963 0040 FFF7FEFF 		bl	vListInsertEnd
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 1964              		.loc 1 1733 14
 1965 0044 FB68     		ldr	r3, [r7, #12]
 1966 0046 93F85C30 		ldrb	r3, [r3, #92]
 1967 004a DBB2     		uxtb	r3, r3
 1968              		.loc 1 1733 7
 1969 004c 012B     		cmp	r3, #1
 1970 004e 03D1     		bne	.L124
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 1971              		.loc 1 1737 27
 1972 0050 FB68     		ldr	r3, [r7, #12]
 1973 0052 0022     		movs	r2, #0
 1974 0054 83F85C20 		strb	r2, [r3, #92]
 1975              	.L124:
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 1976              		.loc 1 1742 3
 1977 0058 FFF7FEFF 		bl	vPortExitCritical
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
 1978              		.loc 1 1744 25
 1979 005c 1E4B     		ldr	r3, .L133+8
 1980 005e 1B68     		ldr	r3, [r3]
 1981              		.loc 1 1744 5
 1982 0060 002B     		cmp	r3, #0
 1983 0062 05D0     		beq	.L125
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 1984              		.loc 1 1748 4
 1985 0064 FFF7FEFF 		bl	vPortEnterCritical
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
 1986              		.loc 1 1750 5
 1987 0068 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 1988              		.loc 1 1752 4
 1989 006c FFF7FEFF 		bl	vPortExitCritical
 1990              	.L125:
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/ccQcdK8x.s 			page 70


1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
 1991              		.loc 1 1759 13
 1992 0070 174B     		ldr	r3, .L133
 1993 0072 1B68     		ldr	r3, [r3]
 1994              		.loc 1 1759 5
 1995 0074 FA68     		ldr	r2, [r7, #12]
 1996 0076 9A42     		cmp	r2, r3
 1997 0078 26D1     		bne	.L132
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
 1998              		.loc 1 1761 26
 1999 007a 174B     		ldr	r3, .L133+8
 2000 007c 1B68     		ldr	r3, [r3]
 2001              		.loc 1 1761 6
 2002 007e 002B     		cmp	r3, #0
 2003 0080 16D0     		beq	.L127
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
 2004              		.loc 1 1764 5
 2005 0082 164B     		ldr	r3, .L133+12
 2006 0084 1B68     		ldr	r3, [r3]
 2007 0086 002B     		cmp	r3, #0
 2008 0088 09D0     		beq	.L128
 2009              	.LBB152:
 2010              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2011              		.loc 2 195 2 discriminator 1
 2012              		.syntax unified
 2013              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2014 008a 4FF05003 			mov r3, #80												
 2015 008e 83F31188 		msr basepri, r3											
 2016 0092 BFF36F8F 		isb														
 2017 0096 BFF34F8F 		dsb														
 2018              	
 2019              	@ 0 "" 2
 2020              		.thumb
 2021              		.syntax unified
 2022 009a BB60     		str	r3, [r7, #8]
 2023              	.L129:
 2024              	.LBE153:
 2025              	.LBE152:
 2026              		.loc 1 1764 5 discriminator 1
 2027 009c FEE7     		b	.L129
 2028              	.L128:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2029              		.loc 1 1765 5
 2030 009e 104B     		ldr	r3, .L133+16
 2031 00a0 4FF08052 		mov	r2, #268435456
 2032 00a4 1A60     		str	r2, [r3]
 2033              		.syntax unified
 2034              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2035 00a6 BFF34F8F 		dsb
ARM GAS  /tmp/ccQcdK8x.s 			page 71


 2036              	@ 0 "" 2
 2037              	@ 1765 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2038 00aa BFF36F8F 		isb
 2039              	@ 0 "" 2
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Rig
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2040              		.loc 1 1790 2
 2041              		.thumb
 2042              		.syntax unified
 2043 00ae 0BE0     		b	.L132
 2044              	.L127:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2045              		.loc 1 1772 9
 2046 00b0 084B     		ldr	r3, .L133+4
 2047 00b2 1A68     		ldr	r2, [r3]
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2048              		.loc 1 1772 56
 2049 00b4 0B4B     		ldr	r3, .L133+20
 2050 00b6 1B68     		ldr	r3, [r3]
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2051              		.loc 1 1772 7
 2052 00b8 9A42     		cmp	r2, r3
 2053 00ba 03D1     		bne	.L131
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2054              		.loc 1 1778 19
 2055 00bc 044B     		ldr	r3, .L133
 2056 00be 0022     		movs	r2, #0
 2057 00c0 1A60     		str	r2, [r3]
 2058              		.loc 1 1790 2
 2059 00c2 01E0     		b	.L132
 2060              	.L131:
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2061              		.loc 1 1782 6
 2062 00c4 FFF7FEFF 		bl	vTaskSwitchContext
ARM GAS  /tmp/ccQcdK8x.s 			page 72


 2063              	.L132:
 2064              		.loc 1 1790 2
 2065 00c8 00BF     		nop
 2066 00ca 1037     		adds	r7, r7, #16
 2067              	.LCFI58:
 2068              		.cfi_def_cfa_offset 8
 2069 00cc BD46     		mov	sp, r7
 2070              	.LCFI59:
 2071              		.cfi_def_cfa_register 13
 2072              		@ sp needed
 2073 00ce 80BD     		pop	{r7, pc}
 2074              	.L134:
 2075              		.align	2
 2076              	.L133:
 2077 00d0 00000000 		.word	pxCurrentTCB
 2078 00d4 00000000 		.word	xSuspendedTaskList
 2079 00d8 00000000 		.word	xSchedulerRunning
 2080 00dc 00000000 		.word	uxSchedulerSuspended
 2081 00e0 04ED00E0 		.word	-536810236
 2082 00e4 00000000 		.word	uxCurrentNumberOfTasks
 2083              		.cfi_endproc
 2084              	.LFE18:
 2086              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
 2087              		.align	1
 2088              		.syntax unified
 2089              		.thumb
 2090              		.thumb_func
 2091              		.fpu fpv4-sp-d16
 2093              	prvTaskIsTaskSuspended:
 2094              	.LFB19:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2095              		.loc 1 1798 2
 2096              		.cfi_startproc
 2097              		@ args = 0, pretend = 0, frame = 24
 2098              		@ frame_needed = 1, uses_anonymous_args = 0
 2099              		@ link register save eliminated.
 2100 0000 80B4     		push	{r7}
 2101              	.LCFI60:
 2102              		.cfi_def_cfa_offset 4
 2103              		.cfi_offset 7, -4
 2104 0002 87B0     		sub	sp, sp, #28
 2105              	.LCFI61:
 2106              		.cfi_def_cfa_offset 32
 2107 0004 00AF     		add	r7, sp, #0
 2108              	.LCFI62:
 2109              		.cfi_def_cfa_register 7
 2110 0006 7860     		str	r0, [r7, #4]
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 2111              		.loc 1 1799 13
 2112 0008 0023     		movs	r3, #0
ARM GAS  /tmp/ccQcdK8x.s 			page 73


 2113 000a 7B61     		str	r3, [r7, #20]
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = xTask;
 2114              		.loc 1 1800 22
 2115 000c 7B68     		ldr	r3, [r7, #4]
 2116 000e 3B61     		str	r3, [r7, #16]
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
 2117              		.loc 1 1806 3
 2118 0010 7B68     		ldr	r3, [r7, #4]
 2119 0012 002B     		cmp	r3, #0
 2120 0014 09D1     		bne	.L136
 2121              	.LBB154:
 2122              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2123              		.loc 2 195 2 discriminator 1
 2124              		.syntax unified
 2125              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2126 0016 4FF05003 			mov r3, #80												
 2127 001a 83F31188 		msr basepri, r3											
 2128 001e BFF36F8F 		isb														
 2129 0022 BFF34F8F 		dsb														
 2130              	
 2131              	@ 0 "" 2
 2132              		.thumb
 2133              		.syntax unified
 2134 0026 FB60     		str	r3, [r7, #12]
 2135              	.L137:
 2136              	.LBE155:
 2137              	.LBE154:
 2138              		.loc 1 1806 3 discriminator 1
 2139 0028 FEE7     		b	.L137
 2140              	.L136:
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 2141              		.loc 1 1809 7
 2142 002a 3B69     		ldr	r3, [r7, #16]
 2143 002c 5B69     		ldr	r3, [r3, #20]
 2144              		.loc 1 1809 5
 2145 002e 0A4A     		ldr	r2, .L140
 2146 0030 9342     		cmp	r3, r2
 2147 0032 0AD1     		bne	.L138
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 2148              		.loc 1 1812 8
 2149 0034 3B69     		ldr	r3, [r7, #16]
 2150 0036 9B6A     		ldr	r3, [r3, #40]
 2151              		.loc 1 1812 6
 2152 0038 084A     		ldr	r2, .L140+4
 2153 003a 9342     		cmp	r3, r2
 2154 003c 05D0     		beq	.L138
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccQcdK8x.s 			page 74


1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
 2155              		.loc 1 1816 9
 2156 003e 3B69     		ldr	r3, [r7, #16]
 2157 0040 9B6A     		ldr	r3, [r3, #40]
 2158              		.loc 1 1816 7
 2159 0042 002B     		cmp	r3, #0
 2160 0044 01D1     		bne	.L138
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 2161              		.loc 1 1818 14
 2162 0046 0123     		movs	r3, #1
 2163 0048 7B61     		str	r3, [r7, #20]
 2164              	.L138:
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 2165              		.loc 1 1835 10
 2166 004a 7B69     		ldr	r3, [r7, #20]
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 2167              		.loc 1 1836 2
 2168 004c 1846     		mov	r0, r3
 2169 004e 1C37     		adds	r7, r7, #28
 2170              	.LCFI63:
 2171              		.cfi_def_cfa_offset 4
 2172 0050 BD46     		mov	sp, r7
 2173              	.LCFI64:
 2174              		.cfi_def_cfa_register 13
 2175              		@ sp needed
 2176 0052 5DF8047B 		ldr	r7, [sp], #4
 2177              	.LCFI65:
 2178              		.cfi_restore 7
 2179              		.cfi_def_cfa_offset 0
 2180 0056 7047     		bx	lr
 2181              	.L141:
 2182              		.align	2
 2183              	.L140:
 2184 0058 00000000 		.word	xSuspendedTaskList
 2185 005c 00000000 		.word	xPendingReadyList
 2186              		.cfi_endproc
 2187              	.LFE19:
 2189              		.section	.text.vTaskResume,"ax",%progbits
ARM GAS  /tmp/ccQcdK8x.s 			page 75


 2190              		.align	1
 2191              		.global	vTaskResume
 2192              		.syntax unified
 2193              		.thumb
 2194              		.thumb_func
 2195              		.fpu fpv4-sp-d16
 2197              	vTaskResume:
 2198              	.LFB20:
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2199              		.loc 1 1844 2
 2200              		.cfi_startproc
 2201              		@ args = 0, pretend = 0, frame = 16
 2202              		@ frame_needed = 1, uses_anonymous_args = 0
 2203 0000 80B5     		push	{r7, lr}
 2204              	.LCFI66:
 2205              		.cfi_def_cfa_offset 8
 2206              		.cfi_offset 7, -8
 2207              		.cfi_offset 14, -4
 2208 0002 84B0     		sub	sp, sp, #16
 2209              	.LCFI67:
 2210              		.cfi_def_cfa_offset 24
 2211 0004 00AF     		add	r7, sp, #0
 2212              	.LCFI68:
 2213              		.cfi_def_cfa_register 7
 2214 0006 7860     		str	r0, [r7, #4]
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2215              		.loc 1 1845 16
 2216 0008 7B68     		ldr	r3, [r7, #4]
 2217 000a FB60     		str	r3, [r7, #12]
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2218              		.loc 1 1848 3
 2219 000c 7B68     		ldr	r3, [r7, #4]
 2220 000e 002B     		cmp	r3, #0
 2221 0010 09D1     		bne	.L143
 2222              	.LBB156:
 2223              	.LBB157:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2224              		.loc 2 195 2 discriminator 1
 2225              		.syntax unified
 2226              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2227 0012 4FF05003 			mov r3, #80												
 2228 0016 83F31188 		msr basepri, r3											
 2229 001a BFF36F8F 		isb														
 2230 001e BFF34F8F 		dsb														
 2231              	
 2232              	@ 0 "" 2
 2233              		.thumb
 2234              		.syntax unified
ARM GAS  /tmp/ccQcdK8x.s 			page 76


 2235 0022 BB60     		str	r3, [r7, #8]
 2236              	.L144:
 2237              	.LBE157:
 2238              	.LBE156:
 2239              		.loc 1 1848 3 discriminator 1
 2240 0024 FEE7     		b	.L144
 2241              	.L143:
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 2242              		.loc 1 1852 15
 2243 0026 214B     		ldr	r3, .L149
 2244 0028 1B68     		ldr	r3, [r3]
 2245              		.loc 1 1852 5
 2246 002a FA68     		ldr	r2, [r7, #12]
 2247 002c 9A42     		cmp	r2, r3
 2248 002e 38D0     		beq	.L148
 2249              		.loc 1 1852 33 discriminator 1
 2250 0030 FB68     		ldr	r3, [r7, #12]
 2251 0032 002B     		cmp	r3, #0
 2252 0034 35D0     		beq	.L148
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 2253              		.loc 1 1854 4
 2254 0036 FFF7FEFF 		bl	vPortEnterCritical
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2255              		.loc 1 1856 9
 2256 003a F868     		ldr	r0, [r7, #12]
 2257 003c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2258 0040 0346     		mov	r3, r0
 2259              		.loc 1 1856 7
 2260 0042 002B     		cmp	r3, #0
 2261 0044 2BD0     		beq	.L146
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 2262              		.loc 1 1862 15
 2263 0046 FB68     		ldr	r3, [r7, #12]
 2264 0048 0433     		adds	r3, r3, #4
 2265 004a 1846     		mov	r0, r3
 2266 004c FFF7FEFF 		bl	uxListRemove
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2267              		.loc 1 1863 6
 2268 0050 FB68     		ldr	r3, [r7, #12]
 2269 0052 DA6A     		ldr	r2, [r3, #44]
 2270 0054 164B     		ldr	r3, .L149+4
 2271 0056 1B68     		ldr	r3, [r3]
 2272 0058 9A42     		cmp	r2, r3
 2273 005a 03D9     		bls	.L147
 2274              		.loc 1 1863 6 is_stmt 0 discriminator 1
 2275 005c FB68     		ldr	r3, [r7, #12]
 2276 005e DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/ccQcdK8x.s 			page 77


 2277 0060 134A     		ldr	r2, .L149+4
 2278 0062 1360     		str	r3, [r2]
 2279              	.L147:
 2280              		.loc 1 1863 6 discriminator 3
 2281 0064 FB68     		ldr	r3, [r7, #12]
 2282 0066 DA6A     		ldr	r2, [r3, #44]
 2283 0068 1346     		mov	r3, r2
 2284 006a 9B00     		lsls	r3, r3, #2
 2285 006c 1344     		add	r3, r3, r2
 2286 006e 9B00     		lsls	r3, r3, #2
 2287 0070 104A     		ldr	r2, .L149+8
 2288 0072 1A44     		add	r2, r2, r3
 2289 0074 FB68     		ldr	r3, [r7, #12]
 2290 0076 0433     		adds	r3, r3, #4
 2291 0078 1946     		mov	r1, r3
 2292 007a 1046     		mov	r0, r2
 2293 007c FFF7FEFF 		bl	vListInsertEnd
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2294              		.loc 1 1866 15 is_stmt 1 discriminator 3
 2295 0080 FB68     		ldr	r3, [r7, #12]
 2296 0082 DA6A     		ldr	r2, [r3, #44]
 2297              		.loc 1 1866 43 discriminator 3
 2298 0084 094B     		ldr	r3, .L149
 2299 0086 1B68     		ldr	r3, [r3]
 2300 0088 DB6A     		ldr	r3, [r3, #44]
 2301              		.loc 1 1866 8 discriminator 3
 2302 008a 9A42     		cmp	r2, r3
 2303 008c 07D3     		bcc	.L146
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
 2304              		.loc 1 1871 7
 2305 008e 0A4B     		ldr	r3, .L149+12
 2306 0090 4FF08052 		mov	r2, #268435456
 2307 0094 1A60     		str	r2, [r3]
 2308              		.syntax unified
 2309              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2310 0096 BFF34F8F 		dsb
 2311              	@ 0 "" 2
 2312              	@ 1871 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2313 009a BFF36F8F 		isb
 2314              	@ 0 "" 2
 2315              		.thumb
 2316              		.syntax unified
 2317              	.L146:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccQcdK8x.s 			page 78


1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 2318              		.loc 1 1883 4
 2319 009e FFF7FEFF 		bl	vPortExitCritical
 2320              	.L148:
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2321              		.loc 1 1889 2
 2322 00a2 00BF     		nop
 2323 00a4 1037     		adds	r7, r7, #16
 2324              	.LCFI69:
 2325              		.cfi_def_cfa_offset 8
 2326 00a6 BD46     		mov	sp, r7
 2327              	.LCFI70:
 2328              		.cfi_def_cfa_register 13
 2329              		@ sp needed
 2330 00a8 80BD     		pop	{r7, pc}
 2331              	.L150:
 2332 00aa 00BF     		.align	2
 2333              	.L149:
 2334 00ac 00000000 		.word	pxCurrentTCB
 2335 00b0 00000000 		.word	uxTopReadyPriority
 2336 00b4 00000000 		.word	pxReadyTasksLists
 2337 00b8 04ED00E0 		.word	-536810236
 2338              		.cfi_endproc
 2339              	.LFE20:
 2341              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 2342              		.align	1
 2343              		.global	xTaskResumeFromISR
 2344              		.syntax unified
 2345              		.thumb
 2346              		.thumb_func
 2347              		.fpu fpv4-sp-d16
 2349              	xTaskResumeFromISR:
 2350              	.LFB21:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2351              		.loc 1 1898 2
 2352              		.cfi_startproc
 2353              		@ args = 0, pretend = 0, frame = 40
 2354              		@ frame_needed = 1, uses_anonymous_args = 0
 2355 0000 80B5     		push	{r7, lr}
 2356              	.LCFI71:
 2357              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccQcdK8x.s 			page 79


 2358              		.cfi_offset 7, -8
 2359              		.cfi_offset 14, -4
 2360 0002 8AB0     		sub	sp, sp, #40
 2361              	.LCFI72:
 2362              		.cfi_def_cfa_offset 48
 2363 0004 00AF     		add	r7, sp, #0
 2364              	.LCFI73:
 2365              		.cfi_def_cfa_register 7
 2366 0006 7860     		str	r0, [r7, #4]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 2367              		.loc 1 1899 13
 2368 0008 0023     		movs	r3, #0
 2369 000a 7B62     		str	r3, [r7, #36]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = xTaskToResume;
 2370              		.loc 1 1900 16
 2371 000c 7B68     		ldr	r3, [r7, #4]
 2372 000e 3B62     		str	r3, [r7, #32]
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
 2373              		.loc 1 1903 3
 2374 0010 7B68     		ldr	r3, [r7, #4]
 2375 0012 002B     		cmp	r3, #0
 2376 0014 09D1     		bne	.L152
 2377              	.LBB158:
 2378              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2379              		.loc 2 195 2 discriminator 1
 2380              		.syntax unified
 2381              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2382 0016 4FF05003 			mov r3, #80												
 2383 001a 83F31188 		msr basepri, r3											
 2384 001e BFF36F8F 		isb														
 2385 0022 BFF34F8F 		dsb														
 2386              	
 2387              	@ 0 "" 2
 2388              		.thumb
 2389              		.syntax unified
 2390 0026 BB61     		str	r3, [r7, #24]
 2391              	.L153:
 2392              	.LBE159:
 2393              	.LBE158:
 2394              		.loc 1 1903 3 discriminator 1
 2395 0028 FEE7     		b	.L153
 2396              	.L152:
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
ARM GAS  /tmp/ccQcdK8x.s 			page 80


1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 2397              		.loc 1 1921 3
 2398 002a FFF7FEFF 		bl	vPortValidateInterruptPriority
 2399              	.LBB160:
 2400              	.LBB161:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2401              		.loc 2 211 2
 2402              		.syntax unified
 2403              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2404 002e EFF31182 			mrs r2, basepri											
 2405 0032 4FF05003 		mov r3, #80												
 2406 0036 83F31188 		msr basepri, r3											
 2407 003a BFF36F8F 		isb														
 2408 003e BFF34F8F 		dsb														
 2409              	
 2410              	@ 0 "" 2
 2411              		.thumb
 2412              		.syntax unified
 2413 0042 7A61     		str	r2, [r7, #20]
 2414 0044 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 2415              		.loc 2 223 9
 2416 0046 7B69     		ldr	r3, [r7, #20]
 2417              	.LBE161:
 2418              	.LBE160:
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 2419              		.loc 1 1923 28
 2420 0048 FB61     		str	r3, [r7, #28]
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 2421              		.loc 1 1925 8
 2422 004a 386A     		ldr	r0, [r7, #32]
 2423 004c FFF7FEFF 		bl	prvTaskIsTaskSuspended
 2424 0050 0346     		mov	r3, r0
 2425              		.loc 1 1925 6
 2426 0052 002B     		cmp	r3, #0
 2427 0054 30D0     		beq	.L155
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2428              		.loc 1 1930 30
 2429 0056 1D4B     		ldr	r3, .L161
 2430 0058 1B68     		ldr	r3, [r3]
 2431              		.loc 1 1930 7
 2432 005a 002B     		cmp	r3, #0
 2433 005c 26D1     		bne	.L156
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
ARM GAS  /tmp/ccQcdK8x.s 			page 81


1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2434              		.loc 1 1934 15
 2435 005e 3B6A     		ldr	r3, [r7, #32]
 2436 0060 DA6A     		ldr	r2, [r3, #44]
 2437              		.loc 1 1934 43
 2438 0062 1B4B     		ldr	r3, .L161+4
 2439 0064 1B68     		ldr	r3, [r3]
 2440 0066 DB6A     		ldr	r3, [r3, #44]
 2441              		.loc 1 1934 8
 2442 0068 9A42     		cmp	r2, r3
 2443 006a 01D3     		bcc	.L157
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
 2444              		.loc 1 1936 22
 2445 006c 0123     		movs	r3, #1
 2446 006e 7B62     		str	r3, [r7, #36]
 2447              	.L157:
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2448              		.loc 1 1943 15
 2449 0070 3B6A     		ldr	r3, [r7, #32]
 2450 0072 0433     		adds	r3, r3, #4
 2451 0074 1846     		mov	r0, r3
 2452 0076 FFF7FEFF 		bl	uxListRemove
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2453              		.loc 1 1944 6
 2454 007a 3B6A     		ldr	r3, [r7, #32]
 2455 007c DA6A     		ldr	r2, [r3, #44]
 2456 007e 154B     		ldr	r3, .L161+8
 2457 0080 1B68     		ldr	r3, [r3]
 2458 0082 9A42     		cmp	r2, r3
 2459 0084 03D9     		bls	.L158
 2460              		.loc 1 1944 6 is_stmt 0 discriminator 1
 2461 0086 3B6A     		ldr	r3, [r7, #32]
 2462 0088 DB6A     		ldr	r3, [r3, #44]
 2463 008a 124A     		ldr	r2, .L161+8
 2464 008c 1360     		str	r3, [r2]
 2465              	.L158:
 2466              		.loc 1 1944 6 discriminator 3
 2467 008e 3B6A     		ldr	r3, [r7, #32]
 2468 0090 DA6A     		ldr	r2, [r3, #44]
 2469 0092 1346     		mov	r3, r2
 2470 0094 9B00     		lsls	r3, r3, #2
 2471 0096 1344     		add	r3, r3, r2
 2472 0098 9B00     		lsls	r3, r3, #2
 2473 009a 0F4A     		ldr	r2, .L161+12
 2474 009c 1A44     		add	r2, r2, r3
 2475 009e 3B6A     		ldr	r3, [r7, #32]
 2476 00a0 0433     		adds	r3, r3, #4
 2477 00a2 1946     		mov	r1, r3
 2478 00a4 1046     		mov	r0, r2
 2479 00a6 FFF7FEFF 		bl	vListInsertEnd
ARM GAS  /tmp/ccQcdK8x.s 			page 82


 2480 00aa 05E0     		b	.L155
 2481              	.L156:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 2482              		.loc 1 1951 6 is_stmt 1
 2483 00ac 3B6A     		ldr	r3, [r7, #32]
 2484 00ae 1833     		adds	r3, r3, #24
 2485 00b0 1946     		mov	r1, r3
 2486 00b2 0A48     		ldr	r0, .L161+16
 2487 00b4 FFF7FEFF 		bl	vListInsertEnd
 2488              	.L155:
 2489 00b8 FB69     		ldr	r3, [r7, #28]
 2490 00ba FB60     		str	r3, [r7, #12]
 2491              	.LBB162:
 2492              	.LBB163:
 2493              		.loc 2 229 2
 2494 00bc FB68     		ldr	r3, [r7, #12]
 2495              		.syntax unified
 2496              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2497 00be 83F31188 			msr basepri, r3	
 2498              	@ 0 "" 2
 2499              		.thumb
 2500              		.syntax unified
 2501              	.LBE163:
 2502              	.LBE162:
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
 2503              		.loc 1 1961 10
 2504 00c2 7B6A     		ldr	r3, [r7, #36]
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2505              		.loc 1 1962 2
 2506 00c4 1846     		mov	r0, r3
 2507 00c6 2837     		adds	r7, r7, #40
 2508              	.LCFI74:
 2509              		.cfi_def_cfa_offset 8
 2510 00c8 BD46     		mov	sp, r7
 2511              	.LCFI75:
 2512              		.cfi_def_cfa_register 13
 2513              		@ sp needed
 2514 00ca 80BD     		pop	{r7, pc}
 2515              	.L162:
 2516              		.align	2
 2517              	.L161:
 2518 00cc 00000000 		.word	uxSchedulerSuspended
ARM GAS  /tmp/ccQcdK8x.s 			page 83


 2519 00d0 00000000 		.word	pxCurrentTCB
 2520 00d4 00000000 		.word	uxTopReadyPriority
 2521 00d8 00000000 		.word	pxReadyTasksLists
 2522 00dc 00000000 		.word	xPendingReadyList
 2523              		.cfi_endproc
 2524              	.LFE21:
 2526              		.section	.rodata
 2527              		.align	2
 2528              	.LC0:
 2529 0000 49444C45 		.ascii	"IDLE\000"
 2529      00
 2530              		.section	.text.vTaskStartScheduler,"ax",%progbits
 2531              		.align	1
 2532              		.global	vTaskStartScheduler
 2533              		.syntax unified
 2534              		.thumb
 2535              		.thumb_func
 2536              		.fpu fpv4-sp-d16
 2538              	vTaskStartScheduler:
 2539              	.LFB22:
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2540              		.loc 1 1968 1
 2541              		.cfi_startproc
 2542              		@ args = 0, pretend = 0, frame = 24
 2543              		@ frame_needed = 1, uses_anonymous_args = 0
 2544 0000 80B5     		push	{r7, lr}
 2545              	.LCFI76:
 2546              		.cfi_def_cfa_offset 8
 2547              		.cfi_offset 7, -8
 2548              		.cfi_offset 14, -4
 2549 0002 8AB0     		sub	sp, sp, #40
 2550              	.LCFI77:
 2551              		.cfi_def_cfa_offset 48
 2552 0004 04AF     		add	r7, sp, #16
 2553              	.LCFI78:
 2554              		.cfi_def_cfa 7, 32
 2555              	.LBB164:
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 2556              		.loc 1 1974 17
 2557 0006 0023     		movs	r3, #0
 2558 0008 BB60     		str	r3, [r7, #8]
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 2559              		.loc 1 1975 16
 2560 000a 0023     		movs	r3, #0
 2561 000c 7B60     		str	r3, [r7, #4]
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 84


1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
 2562              		.loc 1 1980 3
 2563 000e 3A46     		mov	r2, r7
 2564 0010 391D     		adds	r1, r7, #4
 2565 0012 07F10803 		add	r3, r7, #8
 2566 0016 1846     		mov	r0, r3
 2567 0018 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2568              		.loc 1 1981 21
 2569 001c 3968     		ldr	r1, [r7]
 2570 001e 7B68     		ldr	r3, [r7, #4]
 2571 0020 BA68     		ldr	r2, [r7, #8]
 2572 0022 0292     		str	r2, [sp, #8]
 2573 0024 0193     		str	r3, [sp, #4]
 2574 0026 0023     		movs	r3, #0
 2575 0028 0093     		str	r3, [sp]
 2576 002a 0023     		movs	r3, #0
 2577 002c 0A46     		mov	r2, r1
 2578 002e 2049     		ldr	r1, .L171
 2579 0030 2048     		ldr	r0, .L171+4
 2580 0032 FFF7FEFF 		bl	xTaskCreateStatic
 2581 0036 0246     		mov	r2, r0
 2582              		.loc 1 1981 19
 2583 0038 1F4B     		ldr	r3, .L171+8
 2584 003a 1A60     		str	r2, [r3]
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_P
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
 2585              		.loc 1 1989 23
 2586 003c 1E4B     		ldr	r3, .L171+8
 2587 003e 1B68     		ldr	r3, [r3]
 2588              		.loc 1 1989 5
 2589 0040 002B     		cmp	r3, #0
 2590 0042 02D0     		beq	.L164
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 2591              		.loc 1 1991 12
 2592 0044 0123     		movs	r3, #1
 2593 0046 7B61     		str	r3, [r7, #20]
 2594 0048 01E0     		b	.L165
 2595              	.L164:
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 2596              		.loc 1 1995 12
 2597 004a 0023     		movs	r3, #0
 2598 004c 7B61     		str	r3, [r7, #20]
 2599              	.L165:
 2600              	.LBE164:
ARM GAS  /tmp/ccQcdK8x.s 			page 85


1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIOR
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
 2601              		.loc 1 2012 5
 2602 004e 7B69     		ldr	r3, [r7, #20]
 2603 0050 012B     		cmp	r3, #1
 2604 0052 02D1     		bne	.L166
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
 2605              		.loc 1 2014 14
 2606 0054 FFF7FEFF 		bl	xTimerCreateTimerTask
 2607 0058 7861     		str	r0, [r7, #20]
 2608              	.L166:
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
 2609              		.loc 1 2023 4
 2610 005a 7B69     		ldr	r3, [r7, #20]
 2611 005c 012B     		cmp	r3, #1
 2612 005e 15D1     		bne	.L167
 2613              	.LBB165:
 2614              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2615              		.loc 2 195 2
 2616              		.syntax unified
 2617              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2618 0060 4FF05003 			mov r3, #80												
 2619 0064 83F31188 		msr basepri, r3											
 2620 0068 BFF36F8F 		isb														
 2621 006c BFF34F8F 		dsb														
 2622              	
 2623              	@ 0 "" 2
 2624              		.thumb
 2625              		.syntax unified
 2626 0070 3B61     		str	r3, [r7, #16]
 2627              	.LBE166:
 2628              	.LBE165:
ARM GAS  /tmp/ccQcdK8x.s 			page 86


2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 2629              		.loc 1 2049 24
 2630 0072 124B     		ldr	r3, .L171+12
 2631 0074 4FF0FF32 		mov	r2, #-1
 2632 0078 1A60     		str	r2, [r3]
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2633              		.loc 1 2050 21
 2634 007a 114B     		ldr	r3, .L171+16
 2635 007c 0122     		movs	r2, #1
 2636 007e 1A60     		str	r2, [r3]
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 2637              		.loc 1 2051 14
 2638 0080 104B     		ldr	r3, .L171+20
 2639 0082 0022     		movs	r2, #0
 2640 0084 1A60     		str	r2, [r3]
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
 2641              		.loc 1 2065 7
 2642 0086 FFF7FEFF 		bl	xPortStartScheduler
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccQcdK8x.s 			page 87


2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2643              		.loc 1 2086 1
 2644 008a 0DE0     		b	.L170
 2645              	.L167:
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2646              		.loc 1 2080 3
 2647 008c 7B69     		ldr	r3, [r7, #20]
 2648 008e B3F1FF3F 		cmp	r3, #-1
 2649 0092 09D1     		bne	.L170
 2650              	.LBB167:
 2651              	.LBB168:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2652              		.loc 2 195 2 discriminator 1
 2653              		.syntax unified
 2654              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2655 0094 4FF05003 			mov r3, #80												
 2656 0098 83F31188 		msr basepri, r3											
 2657 009c BFF36F8F 		isb														
 2658 00a0 BFF34F8F 		dsb														
 2659              	
 2660              	@ 0 "" 2
 2661              		.thumb
 2662              		.syntax unified
 2663 00a4 FB60     		str	r3, [r7, #12]
 2664              	.L169:
 2665              	.LBE168:
 2666              	.LBE167:
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2667              		.loc 1 2080 3 discriminator 2
 2668 00a6 FEE7     		b	.L169
 2669              	.L170:
 2670              		.loc 1 2086 1
 2671 00a8 00BF     		nop
 2672 00aa 1837     		adds	r7, r7, #24
 2673              	.LCFI79:
 2674              		.cfi_def_cfa_offset 8
 2675 00ac BD46     		mov	sp, r7
 2676              	.LCFI80:
ARM GAS  /tmp/ccQcdK8x.s 			page 88


 2677              		.cfi_def_cfa_register 13
 2678              		@ sp needed
 2679 00ae 80BD     		pop	{r7, pc}
 2680              	.L172:
 2681              		.align	2
 2682              	.L171:
 2683 00b0 00000000 		.word	.LC0
 2684 00b4 00000000 		.word	prvIdleTask
 2685 00b8 00000000 		.word	xIdleTaskHandle
 2686 00bc 00000000 		.word	xNextTaskUnblockTime
 2687 00c0 00000000 		.word	xSchedulerRunning
 2688 00c4 00000000 		.word	xTickCount
 2689              		.cfi_endproc
 2690              	.LFE22:
 2692              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2693              		.align	1
 2694              		.global	vTaskEndScheduler
 2695              		.syntax unified
 2696              		.thumb
 2697              		.thumb_func
 2698              		.fpu fpv4-sp-d16
 2700              	vTaskEndScheduler:
 2701              	.LFB23:
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2702              		.loc 1 2090 1
 2703              		.cfi_startproc
 2704              		@ args = 0, pretend = 0, frame = 8
 2705              		@ frame_needed = 1, uses_anonymous_args = 0
 2706 0000 80B5     		push	{r7, lr}
 2707              	.LCFI81:
 2708              		.cfi_def_cfa_offset 8
 2709              		.cfi_offset 7, -8
 2710              		.cfi_offset 14, -4
 2711 0002 82B0     		sub	sp, sp, #8
 2712              	.LCFI82:
 2713              		.cfi_def_cfa_offset 16
 2714 0004 00AF     		add	r7, sp, #0
 2715              	.LCFI83:
 2716              		.cfi_def_cfa_register 7
 2717              	.LBB169:
 2718              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2719              		.loc 2 195 2
 2720              		.syntax unified
 2721              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2722 0006 4FF05003 			mov r3, #80												
 2723 000a 83F31188 		msr basepri, r3											
 2724 000e BFF36F8F 		isb														
 2725 0012 BFF34F8F 		dsb														
 2726              	
 2727              	@ 0 "" 2
 2728              		.thumb
 2729              		.syntax unified
 2730 0016 7B60     		str	r3, [r7, #4]
ARM GAS  /tmp/ccQcdK8x.s 			page 89


 2731              	.LBE170:
 2732              	.LBE169:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
 2733              		.loc 1 2095 20
 2734 0018 044B     		ldr	r3, .L174
 2735 001a 0022     		movs	r2, #0
 2736 001c 1A60     		str	r2, [r3]
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2737              		.loc 1 2096 2
 2738 001e FFF7FEFF 		bl	vPortEndScheduler
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2739              		.loc 1 2097 1
 2740 0022 00BF     		nop
 2741 0024 0837     		adds	r7, r7, #8
 2742              	.LCFI84:
 2743              		.cfi_def_cfa_offset 8
 2744 0026 BD46     		mov	sp, r7
 2745              	.LCFI85:
 2746              		.cfi_def_cfa_register 13
 2747              		@ sp needed
 2748 0028 80BD     		pop	{r7, pc}
 2749              	.L175:
 2750 002a 00BF     		.align	2
 2751              	.L174:
 2752 002c 00000000 		.word	xSchedulerRunning
 2753              		.cfi_endproc
 2754              	.LFE23:
 2756              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2757              		.align	1
 2758              		.global	vTaskSuspendAll
 2759              		.syntax unified
 2760              		.thumb
 2761              		.thumb_func
 2762              		.fpu fpv4-sp-d16
 2764              	vTaskSuspendAll:
 2765              	.LFB24:
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2766              		.loc 1 2101 1
 2767              		.cfi_startproc
 2768              		@ args = 0, pretend = 0, frame = 0
 2769              		@ frame_needed = 1, uses_anonymous_args = 0
 2770              		@ link register save eliminated.
 2771 0000 80B4     		push	{r7}
 2772              	.LCFI86:
 2773              		.cfi_def_cfa_offset 4
 2774              		.cfi_offset 7, -4
 2775 0002 00AF     		add	r7, sp, #0
 2776              	.LCFI87:
 2777              		.cfi_def_cfa_register 7
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
ARM GAS  /tmp/ccQcdK8x.s 			page 90


2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
 2778              		.loc 1 2106 2
 2779 0004 044B     		ldr	r3, .L177
 2780 0006 1B68     		ldr	r3, [r3]
 2781 0008 0133     		adds	r3, r3, #1
 2782 000a 034A     		ldr	r2, .L177
 2783 000c 1360     		str	r3, [r2]
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portMEMORY_BARRIER();
 2784              		.loc 1 2107 2
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2785              		.loc 1 2108 1
 2786 000e 00BF     		nop
 2787 0010 BD46     		mov	sp, r7
 2788              	.LCFI88:
 2789              		.cfi_def_cfa_register 13
 2790              		@ sp needed
 2791 0012 5DF8047B 		ldr	r7, [sp], #4
 2792              	.LCFI89:
 2793              		.cfi_restore 7
 2794              		.cfi_def_cfa_offset 0
 2795 0016 7047     		bx	lr
 2796              	.L178:
 2797              		.align	2
 2798              	.L177:
 2799 0018 00000000 		.word	uxSchedulerSuspended
 2800              		.cfi_endproc
 2801              	.LFE24:
 2803              		.section	.text.xTaskResumeAll,"ax",%progbits
 2804              		.align	1
 2805              		.global	xTaskResumeAll
 2806              		.syntax unified
 2807              		.thumb
 2808              		.thumb_func
 2809              		.fpu fpv4-sp-d16
 2811              	xTaskResumeAll:
 2812              	.LFB25:
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
ARM GAS  /tmp/ccQcdK8x.s 			page 91


2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 2813              		.loc 1 2175 1
 2814              		.cfi_startproc
 2815              		@ args = 0, pretend = 0, frame = 16
 2816              		@ frame_needed = 1, uses_anonymous_args = 0
 2817 0000 80B5     		push	{r7, lr}
 2818              	.LCFI90:
 2819              		.cfi_def_cfa_offset 8
 2820              		.cfi_offset 7, -8
ARM GAS  /tmp/ccQcdK8x.s 			page 92


 2821              		.cfi_offset 14, -4
 2822 0002 84B0     		sub	sp, sp, #16
 2823              	.LCFI91:
 2824              		.cfi_def_cfa_offset 24
 2825 0004 00AF     		add	r7, sp, #0
 2826              	.LCFI92:
 2827              		.cfi_def_cfa_register 7
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2828              		.loc 1 2176 8
 2829 0006 0023     		movs	r3, #0
 2830 0008 FB60     		str	r3, [r7, #12]
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2831              		.loc 1 2177 12
 2832 000a 0023     		movs	r3, #0
 2833 000c BB60     		str	r3, [r7, #8]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
 2834              		.loc 1 2181 2
 2835 000e 414B     		ldr	r3, .L191
 2836 0010 1B68     		ldr	r3, [r3]
 2837 0012 002B     		cmp	r3, #0
 2838 0014 09D1     		bne	.L180
 2839              	.LBB171:
 2840              	.LBB172:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2841              		.loc 2 195 2 discriminator 1
 2842              		.syntax unified
 2843              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2844 0016 4FF05003 			mov r3, #80												
 2845 001a 83F31188 		msr basepri, r3											
 2846 001e BFF36F8F 		isb														
 2847 0022 BFF34F8F 		dsb														
 2848              	
 2849              	@ 0 "" 2
 2850              		.thumb
 2851              		.syntax unified
 2852 0026 3B60     		str	r3, [r7]
 2853              	.L181:
 2854              	.LBE172:
 2855              	.LBE171:
 2856              		.loc 1 2181 2 discriminator 1
 2857 0028 FEE7     		b	.L181
 2858              	.L180:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 2859              		.loc 1 2188 2
 2860 002a FFF7FEFF 		bl	vPortEnterCritical
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
 2861              		.loc 1 2190 3
ARM GAS  /tmp/ccQcdK8x.s 			page 93


 2862 002e 394B     		ldr	r3, .L191
 2863 0030 1B68     		ldr	r3, [r3]
 2864 0032 013B     		subs	r3, r3, #1
 2865 0034 374A     		ldr	r2, .L191
 2866 0036 1360     		str	r3, [r2]
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 2867              		.loc 1 2192 28
 2868 0038 364B     		ldr	r3, .L191
 2869 003a 1B68     		ldr	r3, [r3]
 2870              		.loc 1 2192 5
 2871 003c 002B     		cmp	r3, #0
 2872 003e 62D1     		bne	.L182
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 2873              		.loc 1 2194 31
 2874 0040 354B     		ldr	r3, .L191+4
 2875 0042 1B68     		ldr	r3, [r3]
 2876              		.loc 1 2194 6
 2877 0044 002B     		cmp	r3, #0
 2878 0046 5ED0     		beq	.L182
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 2879              		.loc 1 2198 10
 2880 0048 2FE0     		b	.L183
 2881              	.L185:
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as
 2882              		.loc 1 2200 14
 2883 004a 344B     		ldr	r3, .L191+8
 2884 004c DB68     		ldr	r3, [r3, #12]
 2885              		.loc 1 2200 12
 2886 004e DB68     		ldr	r3, [r3, #12]
 2887 0050 FB60     		str	r3, [r7, #12]
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2888              		.loc 1 2201 15
 2889 0052 FB68     		ldr	r3, [r7, #12]
 2890 0054 1833     		adds	r3, r3, #24
 2891 0056 1846     		mov	r0, r3
 2892 0058 FFF7FEFF 		bl	uxListRemove
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2893              		.loc 1 2202 15
 2894 005c FB68     		ldr	r3, [r7, #12]
 2895 005e 0433     		adds	r3, r3, #4
 2896 0060 1846     		mov	r0, r3
 2897 0062 FFF7FEFF 		bl	uxListRemove
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2898              		.loc 1 2203 6
 2899 0066 FB68     		ldr	r3, [r7, #12]
 2900 0068 DA6A     		ldr	r2, [r3, #44]
 2901 006a 2D4B     		ldr	r3, .L191+12
 2902 006c 1B68     		ldr	r3, [r3]
 2903 006e 9A42     		cmp	r2, r3
 2904 0070 03D9     		bls	.L184
 2905              		.loc 1 2203 6 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccQcdK8x.s 			page 94


 2906 0072 FB68     		ldr	r3, [r7, #12]
 2907 0074 DB6A     		ldr	r3, [r3, #44]
 2908 0076 2A4A     		ldr	r2, .L191+12
 2909 0078 1360     		str	r3, [r2]
 2910              	.L184:
 2911              		.loc 1 2203 6 discriminator 3
 2912 007a FB68     		ldr	r3, [r7, #12]
 2913 007c DA6A     		ldr	r2, [r3, #44]
 2914 007e 1346     		mov	r3, r2
 2915 0080 9B00     		lsls	r3, r3, #2
 2916 0082 1344     		add	r3, r3, r2
 2917 0084 9B00     		lsls	r3, r3, #2
 2918 0086 274A     		ldr	r2, .L191+16
 2919 0088 1A44     		add	r2, r2, r3
 2920 008a FB68     		ldr	r3, [r7, #12]
 2921 008c 0433     		adds	r3, r3, #4
 2922 008e 1946     		mov	r1, r3
 2923 0090 1046     		mov	r0, r2
 2924 0092 FFF7FEFF 		bl	vListInsertEnd
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 2925              		.loc 1 2207 15 is_stmt 1 discriminator 3
 2926 0096 FB68     		ldr	r3, [r7, #12]
 2927 0098 DA6A     		ldr	r2, [r3, #44]
 2928              		.loc 1 2207 43 discriminator 3
 2929 009a 234B     		ldr	r3, .L191+20
 2930 009c 1B68     		ldr	r3, [r3]
 2931 009e DB6A     		ldr	r3, [r3, #44]
 2932              		.loc 1 2207 8 discriminator 3
 2933 00a0 9A42     		cmp	r2, r3
 2934 00a2 02D3     		bcc	.L183
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
 2935              		.loc 1 2209 21
 2936 00a4 214B     		ldr	r3, .L191+24
 2937 00a6 0122     		movs	r2, #1
 2938 00a8 1A60     		str	r2, [r3]
 2939              	.L183:
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2940              		.loc 1 2198 12
 2941 00aa 1C4B     		ldr	r3, .L191+8
 2942 00ac 1B68     		ldr	r3, [r3]
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2943              		.loc 1 2198 10
 2944 00ae 002B     		cmp	r3, #0
 2945 00b0 CBD1     		bne	.L185
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 2946              		.loc 1 2217 7
ARM GAS  /tmp/ccQcdK8x.s 			page 95


 2947 00b2 FB68     		ldr	r3, [r7, #12]
 2948 00b4 002B     		cmp	r3, #0
 2949 00b6 01D0     		beq	.L186
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
 2950              		.loc 1 2225 6
 2951 00b8 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2952              	.L186:
 2953              	.LBB173:
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 2954              		.loc 1 2233 18
 2955 00bc 1C4B     		ldr	r3, .L191+28
 2956 00be 1B68     		ldr	r3, [r3]
 2957 00c0 7B60     		str	r3, [r7, #4]
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
 2958              		.loc 1 2235 8
 2959 00c2 7B68     		ldr	r3, [r7, #4]
 2960 00c4 002B     		cmp	r3, #0
 2961 00c6 10D0     		beq	.L187
 2962              	.L189:
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
 2963              		.loc 1 2239 12
 2964 00c8 FFF7FEFF 		bl	xTaskIncrementTick
 2965 00cc 0346     		mov	r3, r0
 2966              		.loc 1 2239 10
 2967 00ce 002B     		cmp	r3, #0
 2968 00d0 02D0     		beq	.L188
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
 2969              		.loc 1 2241 23
 2970 00d2 164B     		ldr	r3, .L191+24
 2971 00d4 0122     		movs	r2, #1
 2972 00d6 1A60     		str	r2, [r3]
 2973              	.L188:
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
ARM GAS  /tmp/ccQcdK8x.s 			page 96


 2974              		.loc 1 2247 8
 2975 00d8 7B68     		ldr	r3, [r7, #4]
 2976 00da 013B     		subs	r3, r3, #1
 2977 00dc 7B60     		str	r3, [r7, #4]
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 2978              		.loc 1 2248 7
 2979 00de 7B68     		ldr	r3, [r7, #4]
 2980 00e0 002B     		cmp	r3, #0
 2981 00e2 F1D1     		bne	.L189
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
 2982              		.loc 1 2250 21
 2983 00e4 124B     		ldr	r3, .L191+28
 2984 00e6 0022     		movs	r2, #0
 2985 00e8 1A60     		str	r2, [r3]
 2986              	.L187:
 2987              	.LBE173:
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
 2988              		.loc 1 2258 23
 2989 00ea 104B     		ldr	r3, .L191+24
 2990 00ec 1B68     		ldr	r3, [r3]
 2991              		.loc 1 2258 7
 2992 00ee 002B     		cmp	r3, #0
 2993 00f0 09D0     		beq	.L182
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
 2994              		.loc 1 2262 23
 2995 00f2 0123     		movs	r3, #1
 2996 00f4 BB60     		str	r3, [r7, #8]
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 2997              		.loc 1 2265 6
 2998 00f6 0F4B     		ldr	r3, .L191+32
 2999 00f8 4FF08052 		mov	r2, #268435456
 3000 00fc 1A60     		str	r2, [r3]
 3001              		.syntax unified
 3002              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3003 00fe BFF34F8F 		dsb
 3004              	@ 0 "" 2
 3005              	@ 2265 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3006 0102 BFF36F8F 		isb
 3007              	@ 0 "" 2
 3008              		.thumb
 3009              		.syntax unified
 3010              	.L182:
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  /tmp/ccQcdK8x.s 			page 97


2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 3011              		.loc 1 2278 2
 3012 0106 FFF7FEFF 		bl	vPortExitCritical
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
 3013              		.loc 1 2280 9
 3014 010a BB68     		ldr	r3, [r7, #8]
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3015              		.loc 1 2281 1
 3016 010c 1846     		mov	r0, r3
 3017 010e 1037     		adds	r7, r7, #16
 3018              	.LCFI93:
 3019              		.cfi_def_cfa_offset 8
 3020 0110 BD46     		mov	sp, r7
 3021              	.LCFI94:
 3022              		.cfi_def_cfa_register 13
 3023              		@ sp needed
 3024 0112 80BD     		pop	{r7, pc}
 3025              	.L192:
 3026              		.align	2
 3027              	.L191:
 3028 0114 00000000 		.word	uxSchedulerSuspended
 3029 0118 00000000 		.word	uxCurrentNumberOfTasks
 3030 011c 00000000 		.word	xPendingReadyList
 3031 0120 00000000 		.word	uxTopReadyPriority
 3032 0124 00000000 		.word	pxReadyTasksLists
 3033 0128 00000000 		.word	pxCurrentTCB
 3034 012c 00000000 		.word	xYieldPending
 3035 0130 00000000 		.word	uxPendedTicks
 3036 0134 04ED00E0 		.word	-536810236
 3037              		.cfi_endproc
 3038              	.LFE25:
 3040              		.section	.text.xTaskGetTickCount,"ax",%progbits
 3041              		.align	1
 3042              		.global	xTaskGetTickCount
 3043              		.syntax unified
 3044              		.thumb
 3045              		.thumb_func
 3046              		.fpu fpv4-sp-d16
 3048              	xTaskGetTickCount:
 3049              	.LFB26:
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3050              		.loc 1 2285 1
 3051              		.cfi_startproc
ARM GAS  /tmp/ccQcdK8x.s 			page 98


 3052              		@ args = 0, pretend = 0, frame = 8
 3053              		@ frame_needed = 1, uses_anonymous_args = 0
 3054              		@ link register save eliminated.
 3055 0000 80B4     		push	{r7}
 3056              	.LCFI95:
 3057              		.cfi_def_cfa_offset 4
 3058              		.cfi_offset 7, -4
 3059 0002 83B0     		sub	sp, sp, #12
 3060              	.LCFI96:
 3061              		.cfi_def_cfa_offset 16
 3062 0004 00AF     		add	r7, sp, #0
 3063              	.LCFI97:
 3064              		.cfi_def_cfa_register 7
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
 3065              		.loc 1 2291 10
 3066 0006 054B     		ldr	r3, .L195
 3067 0008 1B68     		ldr	r3, [r3]
 3068 000a 7B60     		str	r3, [r7, #4]
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
 3069              		.loc 1 2295 9
 3070 000c 7B68     		ldr	r3, [r7, #4]
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3071              		.loc 1 2296 1
 3072 000e 1846     		mov	r0, r3
 3073 0010 0C37     		adds	r7, r7, #12
 3074              	.LCFI98:
 3075              		.cfi_def_cfa_offset 4
 3076 0012 BD46     		mov	sp, r7
 3077              	.LCFI99:
 3078              		.cfi_def_cfa_register 13
 3079              		@ sp needed
 3080 0014 5DF8047B 		ldr	r7, [sp], #4
 3081              	.LCFI100:
 3082              		.cfi_restore 7
 3083              		.cfi_def_cfa_offset 0
 3084 0018 7047     		bx	lr
 3085              	.L196:
 3086 001a 00BF     		.align	2
 3087              	.L195:
 3088 001c 00000000 		.word	xTickCount
 3089              		.cfi_endproc
 3090              	.LFE26:
 3092              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 3093              		.align	1
 3094              		.global	xTaskGetTickCountFromISR
 3095              		.syntax unified
 3096              		.thumb
 3097              		.thumb_func
 3098              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQcdK8x.s 			page 99


 3100              	xTaskGetTickCountFromISR:
 3101              	.LFB27:
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3102              		.loc 1 2300 1
 3103              		.cfi_startproc
 3104              		@ args = 0, pretend = 0, frame = 8
 3105              		@ frame_needed = 1, uses_anonymous_args = 0
 3106 0000 80B5     		push	{r7, lr}
 3107              	.LCFI101:
 3108              		.cfi_def_cfa_offset 8
 3109              		.cfi_offset 7, -8
 3110              		.cfi_offset 14, -4
 3111 0002 82B0     		sub	sp, sp, #8
 3112              	.LCFI102:
 3113              		.cfi_def_cfa_offset 16
 3114 0004 00AF     		add	r7, sp, #0
 3115              	.LCFI103:
 3116              		.cfi_def_cfa_register 7
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 3117              		.loc 1 2318 2
 3118 0006 FFF7FEFF 		bl	vPortValidateInterruptPriority
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 3119              		.loc 1 2320 25
 3120 000a 0023     		movs	r3, #0
 3121 000c 7B60     		str	r3, [r7, #4]
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
 3122              		.loc 1 2322 11
 3123 000e 044B     		ldr	r3, .L199
 3124 0010 1B68     		ldr	r3, [r3]
 3125 0012 3B60     		str	r3, [r7]
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 3126              		.loc 1 2326 9
ARM GAS  /tmp/ccQcdK8x.s 			page 100


 3127 0014 3B68     		ldr	r3, [r7]
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3128              		.loc 1 2327 1
 3129 0016 1846     		mov	r0, r3
 3130 0018 0837     		adds	r7, r7, #8
 3131              	.LCFI104:
 3132              		.cfi_def_cfa_offset 8
 3133 001a BD46     		mov	sp, r7
 3134              	.LCFI105:
 3135              		.cfi_def_cfa_register 13
 3136              		@ sp needed
 3137 001c 80BD     		pop	{r7, pc}
 3138              	.L200:
 3139 001e 00BF     		.align	2
 3140              	.L199:
 3141 0020 00000000 		.word	xTickCount
 3142              		.cfi_endproc
 3143              	.LFE27:
 3145              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 3146              		.align	1
 3147              		.global	uxTaskGetNumberOfTasks
 3148              		.syntax unified
 3149              		.thumb
 3150              		.thumb_func
 3151              		.fpu fpv4-sp-d16
 3153              	uxTaskGetNumberOfTasks:
 3154              	.LFB28:
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3155              		.loc 1 2331 1
 3156              		.cfi_startproc
 3157              		@ args = 0, pretend = 0, frame = 0
 3158              		@ frame_needed = 1, uses_anonymous_args = 0
 3159              		@ link register save eliminated.
 3160 0000 80B4     		push	{r7}
 3161              	.LCFI106:
 3162              		.cfi_def_cfa_offset 4
 3163              		.cfi_offset 7, -4
 3164 0002 00AF     		add	r7, sp, #0
 3165              	.LCFI107:
 3166              		.cfi_def_cfa_register 7
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
 3167              		.loc 1 2334 9
 3168 0004 034B     		ldr	r3, .L203
 3169 0006 1B68     		ldr	r3, [r3]
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3170              		.loc 1 2335 1
 3171 0008 1846     		mov	r0, r3
 3172 000a BD46     		mov	sp, r7
 3173              	.LCFI108:
 3174              		.cfi_def_cfa_register 13
 3175              		@ sp needed
 3176 000c 5DF8047B 		ldr	r7, [sp], #4
ARM GAS  /tmp/ccQcdK8x.s 			page 101


 3177              	.LCFI109:
 3178              		.cfi_restore 7
 3179              		.cfi_def_cfa_offset 0
 3180 0010 7047     		bx	lr
 3181              	.L204:
 3182 0012 00BF     		.align	2
 3183              	.L203:
 3184 0014 00000000 		.word	uxCurrentNumberOfTasks
 3185              		.cfi_endproc
 3186              	.LFE28:
 3188              		.section	.text.pcTaskGetName,"ax",%progbits
 3189              		.align	1
 3190              		.global	pcTaskGetName
 3191              		.syntax unified
 3192              		.thumb
 3193              		.thumb_func
 3194              		.fpu fpv4-sp-d16
 3196              	pcTaskGetName:
 3197              	.LFB29:
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3198              		.loc 1 2339 1
 3199              		.cfi_startproc
 3200              		@ args = 0, pretend = 0, frame = 16
 3201              		@ frame_needed = 1, uses_anonymous_args = 0
 3202              		@ link register save eliminated.
 3203 0000 80B4     		push	{r7}
 3204              	.LCFI110:
 3205              		.cfi_def_cfa_offset 4
 3206              		.cfi_offset 7, -4
 3207 0002 85B0     		sub	sp, sp, #20
 3208              	.LCFI111:
 3209              		.cfi_def_cfa_offset 24
 3210 0004 00AF     		add	r7, sp, #0
 3211              	.LCFI112:
 3212              		.cfi_def_cfa_register 7
 3213 0006 7860     		str	r0, [r7, #4]
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 3214              		.loc 1 2344 10
 3215 0008 7B68     		ldr	r3, [r7, #4]
 3216 000a 002B     		cmp	r3, #0
 3217 000c 02D1     		bne	.L206
 3218              		.loc 1 2344 10 is_stmt 0 discriminator 1
 3219 000e 0D4B     		ldr	r3, .L211
 3220 0010 1B68     		ldr	r3, [r3]
 3221 0012 00E0     		b	.L207
 3222              	.L206:
 3223              		.loc 1 2344 10 discriminator 2
 3224 0014 7B68     		ldr	r3, [r7, #4]
 3225              	.L207:
 3226              		.loc 1 2344 8 is_stmt 1 discriminator 4
ARM GAS  /tmp/ccQcdK8x.s 			page 102


 3227 0016 FB60     		str	r3, [r7, #12]
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 3228              		.loc 1 2345 2 discriminator 4
 3229 0018 FB68     		ldr	r3, [r7, #12]
 3230 001a 002B     		cmp	r3, #0
 3231 001c 09D1     		bne	.L208
 3232              	.LBB174:
 3233              	.LBB175:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3234              		.loc 2 195 2 discriminator 1
 3235              		.syntax unified
 3236              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3237 001e 4FF05003 			mov r3, #80												
 3238 0022 83F31188 		msr basepri, r3											
 3239 0026 BFF36F8F 		isb														
 3240 002a BFF34F8F 		dsb														
 3241              	
 3242              	@ 0 "" 2
 3243              		.thumb
 3244              		.syntax unified
 3245 002e BB60     		str	r3, [r7, #8]
 3246              	.L209:
 3247              	.LBE175:
 3248              	.LBE174:
 3249              		.loc 1 2345 2 discriminator 1
 3250 0030 FEE7     		b	.L209
 3251              	.L208:
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 3252              		.loc 1 2346 9
 3253 0032 FB68     		ldr	r3, [r7, #12]
 3254 0034 3433     		adds	r3, r3, #52
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3255              		.loc 1 2347 1
 3256 0036 1846     		mov	r0, r3
 3257 0038 1437     		adds	r7, r7, #20
 3258              	.LCFI113:
 3259              		.cfi_def_cfa_offset 4
 3260 003a BD46     		mov	sp, r7
 3261              	.LCFI114:
 3262              		.cfi_def_cfa_register 13
 3263              		@ sp needed
 3264 003c 5DF8047B 		ldr	r7, [sp], #4
 3265              	.LCFI115:
 3266              		.cfi_restore 7
 3267              		.cfi_def_cfa_offset 0
 3268 0040 7047     		bx	lr
 3269              	.L212:
 3270 0042 00BF     		.align	2
 3271              	.L211:
 3272 0044 00000000 		.word	pxCurrentTCB
 3273              		.cfi_endproc
 3274              	.LFE29:
 3276              		.section	.text.prvSearchForNameWithinSingleList,"ax",%progbits
 3277              		.align	1
 3278              		.syntax unified
 3279              		.thumb
 3280              		.thumb_func
ARM GAS  /tmp/ccQcdK8x.s 			page 103


 3281              		.fpu fpv4-sp-d16
 3283              	prvSearchForNameWithinSingleList:
 3284              	.LFB30:
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3285              		.loc 1 2353 2
 3286              		.cfi_startproc
 3287              		@ args = 0, pretend = 0, frame = 40
 3288              		@ frame_needed = 1, uses_anonymous_args = 0
 3289              		@ link register save eliminated.
 3290 0000 80B4     		push	{r7}
 3291              	.LCFI116:
 3292              		.cfi_def_cfa_offset 4
 3293              		.cfi_offset 7, -4
 3294 0002 8BB0     		sub	sp, sp, #44
 3295              	.LCFI117:
 3296              		.cfi_def_cfa_offset 48
 3297 0004 00AF     		add	r7, sp, #0
 3298              	.LCFI118:
 3299              		.cfi_def_cfa_register 7
 3300 0006 7860     		str	r0, [r7, #4]
 3301 0008 3960     		str	r1, [r7]
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 3302              		.loc 1 2354 34
 3303 000a 0023     		movs	r3, #0
 3304 000c 7B62     		str	r3, [r7, #36]
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xBreakLoop;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 3305              		.loc 1 2361 7
 3306 000e 7B68     		ldr	r3, [r7, #4]
 3307 0010 1B68     		ldr	r3, [r3]
 3308              		.loc 1 2361 5
 3309 0012 002B     		cmp	r3, #0
 3310 0014 5BD0     		beq	.L214
 3311              	.LBB176:
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro i
 3312              		.loc 1 2363 4
 3313 0016 7B68     		ldr	r3, [r7, #4]
 3314 0018 BB61     		str	r3, [r7, #24]
 3315 001a BB69     		ldr	r3, [r7, #24]
 3316 001c 5B68     		ldr	r3, [r3, #4]
 3317 001e 5A68     		ldr	r2, [r3, #4]
 3318 0020 BB69     		ldr	r3, [r7, #24]
 3319 0022 5A60     		str	r2, [r3, #4]
 3320 0024 BB69     		ldr	r3, [r7, #24]
 3321 0026 5A68     		ldr	r2, [r3, #4]
 3322 0028 BB69     		ldr	r3, [r7, #24]
ARM GAS  /tmp/ccQcdK8x.s 			page 104


 3323 002a 0833     		adds	r3, r3, #8
 3324 002c 9A42     		cmp	r2, r3
 3325 002e 04D1     		bne	.L215
 3326              		.loc 1 2363 4 is_stmt 0 discriminator 1
 3327 0030 BB69     		ldr	r3, [r7, #24]
 3328 0032 5B68     		ldr	r3, [r3, #4]
 3329 0034 5A68     		ldr	r2, [r3, #4]
 3330 0036 BB69     		ldr	r3, [r7, #24]
 3331 0038 5A60     		str	r2, [r3, #4]
 3332              	.L215:
 3333              		.loc 1 2363 4 discriminator 3
 3334 003a BB69     		ldr	r3, [r7, #24]
 3335 003c 5B68     		ldr	r3, [r3, #4]
 3336 003e DB68     		ldr	r3, [r3, #12]
 3337 0040 7B61     		str	r3, [r7, #20]
 3338              	.L225:
 3339              	.LBE176:
 3340              	.LBB177:
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 3341              		.loc 1 2367 5 is_stmt 1
 3342 0042 7B68     		ldr	r3, [r7, #4]
 3343 0044 3B61     		str	r3, [r7, #16]
 3344 0046 3B69     		ldr	r3, [r7, #16]
 3345 0048 5B68     		ldr	r3, [r3, #4]
 3346 004a 5A68     		ldr	r2, [r3, #4]
 3347 004c 3B69     		ldr	r3, [r7, #16]
 3348 004e 5A60     		str	r2, [r3, #4]
 3349 0050 3B69     		ldr	r3, [r7, #16]
 3350 0052 5A68     		ldr	r2, [r3, #4]
 3351 0054 3B69     		ldr	r3, [r7, #16]
 3352 0056 0833     		adds	r3, r3, #8
 3353 0058 9A42     		cmp	r2, r3
 3354 005a 04D1     		bne	.L216
 3355              		.loc 1 2367 5 is_stmt 0 discriminator 1
 3356 005c 3B69     		ldr	r3, [r7, #16]
 3357 005e 5B68     		ldr	r3, [r3, #4]
 3358 0060 5A68     		ldr	r2, [r3, #4]
 3359 0062 3B69     		ldr	r3, [r7, #16]
 3360 0064 5A60     		str	r2, [r3, #4]
 3361              	.L216:
 3362              		.loc 1 2367 5 discriminator 3
 3363 0066 3B69     		ldr	r3, [r7, #16]
 3364 0068 5B68     		ldr	r3, [r3, #4]
 3365 006a DB68     		ldr	r3, [r3, #12]
 3366 006c FB60     		str	r3, [r7, #12]
 3367              	.LBE177:
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xBreakLoop = pdFALSE;
 3368              		.loc 1 2371 16 is_stmt 1 discriminator 3
 3369 006e 0023     		movs	r3, #0
 3370 0070 FB61     		str	r3, [r7, #28]
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
ARM GAS  /tmp/ccQcdK8x.s 			page 105


 3371              		.loc 1 2372 12 discriminator 3
 3372 0072 0023     		movs	r3, #0
 3373 0074 3B62     		str	r3, [r7, #32]
 3374              		.loc 1 2372 5 discriminator 3
 3375 0076 1CE0     		b	.L217
 3376              	.L222:
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
 3377              		.loc 1 2374 16
 3378 0078 FA68     		ldr	r2, [r7, #12]
 3379 007a 3B6A     		ldr	r3, [r7, #32]
 3380 007c 1344     		add	r3, r3, r2
 3381 007e 3433     		adds	r3, r3, #52
 3382 0080 1B78     		ldrb	r3, [r3]
 3383 0082 FB72     		strb	r3, [r7, #11]
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
 3384              		.loc 1 2376 36
 3385 0084 3A68     		ldr	r2, [r7]
 3386 0086 3B6A     		ldr	r3, [r7, #32]
 3387 0088 1344     		add	r3, r3, r2
 3388 008a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3389              		.loc 1 2376 8
 3390 008c FA7A     		ldrb	r2, [r7, #11]	@ zero_extendqisi2
 3391 008e 9A42     		cmp	r2, r3
 3392 0090 02D0     		beq	.L218
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
 3393              		.loc 1 2379 18
 3394 0092 0123     		movs	r3, #1
 3395 0094 FB61     		str	r3, [r7, #28]
 3396 0096 06E0     		b	.L219
 3397              	.L218:
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == ( char ) 0x00 )
 3398              		.loc 1 2381 13
 3399 0098 FB7A     		ldrb	r3, [r7, #11]	@ zero_extendqisi2
 3400 009a 002B     		cmp	r3, #0
 3401 009c 03D1     		bne	.L219
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
 3402              		.loc 1 2385 16
 3403 009e FB68     		ldr	r3, [r7, #12]
 3404 00a0 7B62     		str	r3, [r7, #36]
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xBreakLoop = pdTRUE;
 3405              		.loc 1 2386 18
 3406 00a2 0123     		movs	r3, #1
 3407 00a4 FB61     		str	r3, [r7, #28]
 3408              	.L219:
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccQcdK8x.s 			page 106


2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xBreakLoop != pdFALSE )
 3409              		.loc 1 2393 8
 3410 00a6 FB69     		ldr	r3, [r7, #28]
 3411 00a8 002B     		cmp	r3, #0
 3412 00aa 06D1     		bne	.L227
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3413              		.loc 1 2372 79 discriminator 2
 3414 00ac 3B6A     		ldr	r3, [r7, #32]
 3415 00ae 0133     		adds	r3, r3, #1
 3416 00b0 3B62     		str	r3, [r7, #32]
 3417              	.L217:
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3418              		.loc 1 2372 5 discriminator 1
 3419 00b2 3B6A     		ldr	r3, [r7, #32]
 3420 00b4 0F2B     		cmp	r3, #15
 3421 00b6 DFD9     		bls	.L222
 3422 00b8 00E0     		b	.L221
 3423              	.L227:
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 3424              		.loc 1 2395 7
 3425 00ba 00BF     		nop
 3426              	.L221:
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
 3427              		.loc 1 2399 7
 3428 00bc 7B6A     		ldr	r3, [r7, #36]
 3429 00be 002B     		cmp	r3, #0
 3430 00c0 04D1     		bne	.L228
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 3431              		.loc 1 2405 4
 3432 00c2 FA68     		ldr	r2, [r7, #12]
 3433 00c4 7B69     		ldr	r3, [r7, #20]
 3434 00c6 9A42     		cmp	r2, r3
 3435 00c8 BBD1     		bne	.L225
 3436 00ca 00E0     		b	.L214
 3437              	.L228:
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3438              		.loc 1 2402 6
 3439 00cc 00BF     		nop
 3440              	.L214:
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
 3441              		.loc 1 2412 10
ARM GAS  /tmp/ccQcdK8x.s 			page 107


 3442 00ce 7B6A     		ldr	r3, [r7, #36]
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3443              		.loc 1 2413 2
 3444 00d0 1846     		mov	r0, r3
 3445 00d2 2C37     		adds	r7, r7, #44
 3446              	.LCFI119:
 3447              		.cfi_def_cfa_offset 4
 3448 00d4 BD46     		mov	sp, r7
 3449              	.LCFI120:
 3450              		.cfi_def_cfa_register 13
 3451              		@ sp needed
 3452 00d6 5DF8047B 		ldr	r7, [sp], #4
 3453              	.LCFI121:
 3454              		.cfi_restore 7
 3455              		.cfi_def_cfa_offset 0
 3456 00da 7047     		bx	lr
 3457              		.cfi_endproc
 3458              	.LFE30:
 3460              		.section	.text.xTaskGetHandle,"ax",%progbits
 3461              		.align	1
 3462              		.global	xTaskGetHandle
 3463              		.syntax unified
 3464              		.thumb
 3465              		.thumb_func
 3466              		.fpu fpv4-sp-d16
 3468              	xTaskGetHandle:
 3469              	.LFB31:
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3470              		.loc 1 2421 2
 3471              		.cfi_startproc
 3472              		@ args = 0, pretend = 0, frame = 24
 3473              		@ frame_needed = 1, uses_anonymous_args = 0
 3474 0000 80B5     		push	{r7, lr}
 3475              	.LCFI122:
 3476              		.cfi_def_cfa_offset 8
 3477              		.cfi_offset 7, -8
 3478              		.cfi_offset 14, -4
 3479 0002 86B0     		sub	sp, sp, #24
 3480              	.LCFI123:
 3481              		.cfi_def_cfa_offset 32
 3482 0004 00AF     		add	r7, sp, #0
 3483              	.LCFI124:
 3484              		.cfi_def_cfa_register 7
 3485 0006 7860     		str	r0, [r7, #4]
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
 3486              		.loc 1 2422 14
 3487 0008 3823     		movs	r3, #56
 3488 000a 7B61     		str	r3, [r7, #20]
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 108


2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 3489              		.loc 1 2426 3
 3490 000c 7868     		ldr	r0, [r7, #4]
 3491 000e FFF7FEFF 		bl	strlen
 3492 0012 0346     		mov	r3, r0
 3493 0014 0F2B     		cmp	r3, #15
 3494 0016 09D9     		bls	.L230
 3495              	.LBB178:
 3496              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3497              		.loc 2 195 2 discriminator 1
 3498              		.syntax unified
 3499              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3500 0018 4FF05003 			mov r3, #80												
 3501 001c 83F31188 		msr basepri, r3											
 3502 0020 BFF36F8F 		isb														
 3503 0024 BFF34F8F 		dsb														
 3504              	
 3505              	@ 0 "" 2
 3506              		.thumb
 3507              		.syntax unified
 3508 0028 FB60     		str	r3, [r7, #12]
 3509              	.L231:
 3510              	.LBE179:
 3511              	.LBE178:
 3512              		.loc 1 2426 3 discriminator 1
 3513 002a FEE7     		b	.L231
 3514              	.L230:
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3515              		.loc 1 2428 3
 3516 002c FFF7FEFF 		bl	vTaskSuspendAll
 3517              	.L234:
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
 3518              		.loc 1 2433 12
 3519 0030 7B69     		ldr	r3, [r7, #20]
 3520 0032 013B     		subs	r3, r3, #1
 3521 0034 7B61     		str	r3, [r7, #20]
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
 3522              		.loc 1 2434 13
 3523 0036 7A69     		ldr	r2, [r7, #20]
 3524 0038 1346     		mov	r3, r2
 3525 003a 9B00     		lsls	r3, r3, #2
 3526 003c 1344     		add	r3, r3, r2
 3527 003e 9B00     		lsls	r3, r3, #2
 3528 0040 1C4A     		ldr	r2, .L241
 3529 0042 1344     		add	r3, r3, r2
 3530 0044 7968     		ldr	r1, [r7, #4]
 3531 0046 1846     		mov	r0, r3
 3532 0048 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3533 004c 3861     		str	r0, [r7, #16]
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 109


2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
 3534              		.loc 1 2436 7
 3535 004e 3B69     		ldr	r3, [r7, #16]
 3536 0050 002B     		cmp	r3, #0
 3537 0052 03D1     		bne	.L240
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
 3538              		.loc 1 2442 4
 3539 0054 7B69     		ldr	r3, [r7, #20]
 3540 0056 002B     		cmp	r3, #0
 3541 0058 EAD1     		bne	.L234
 3542 005a 00E0     		b	.L233
 3543              	.L240:
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3544              		.loc 1 2439 6
 3545 005c 00BF     		nop
 3546              	.L233:
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
 3547              		.loc 1 2445 6
 3548 005e 3B69     		ldr	r3, [r7, #16]
 3549 0060 002B     		cmp	r3, #0
 3550 0062 06D1     		bne	.L235
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 3551              		.loc 1 2447 13
 3552 0064 144B     		ldr	r3, .L241+4
 3553 0066 1B68     		ldr	r3, [r3]
 3554 0068 7968     		ldr	r1, [r7, #4]
 3555 006a 1846     		mov	r0, r3
 3556 006c FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3557 0070 3861     		str	r0, [r7, #16]
 3558              	.L235:
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
 3559              		.loc 1 2450 6
 3560 0072 3B69     		ldr	r3, [r7, #16]
 3561 0074 002B     		cmp	r3, #0
 3562 0076 06D1     		bne	.L236
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
 3563              		.loc 1 2452 13
 3564 0078 104B     		ldr	r3, .L241+8
 3565 007a 1B68     		ldr	r3, [r3]
 3566 007c 7968     		ldr	r1, [r7, #4]
 3567 007e 1846     		mov	r0, r3
 3568 0080 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3569 0084 3861     		str	r0, [r7, #16]
 3570              	.L236:
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 110


2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
 3571              		.loc 1 2457 7
 3572 0086 3B69     		ldr	r3, [r7, #16]
 3573 0088 002B     		cmp	r3, #0
 3574 008a 04D1     		bne	.L237
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 3575              		.loc 1 2460 14
 3576 008c 7968     		ldr	r1, [r7, #4]
 3577 008e 0C48     		ldr	r0, .L241+12
 3578 0090 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3579 0094 3861     		str	r0, [r7, #16]
 3580              	.L237:
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
 3581              		.loc 1 2467 7
 3582 0096 3B69     		ldr	r3, [r7, #16]
 3583 0098 002B     		cmp	r3, #0
 3584 009a 04D1     		bne	.L238
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 3585              		.loc 1 2470 14
 3586 009c 7968     		ldr	r1, [r7, #4]
 3587 009e 0948     		ldr	r0, .L241+16
 3588 00a0 FFF7FEFF 		bl	prvSearchForNameWithinSingleList
 3589 00a4 3861     		str	r0, [r7, #16]
 3590              	.L238:
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3591              		.loc 1 2475 12
 3592 00a6 FFF7FEFF 		bl	xTaskResumeAll
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxTCB;
 3593              		.loc 1 2477 10
 3594 00aa 3B69     		ldr	r3, [r7, #16]
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3595              		.loc 1 2478 2
 3596 00ac 1846     		mov	r0, r3
 3597 00ae 1837     		adds	r7, r7, #24
 3598              	.LCFI125:
 3599              		.cfi_def_cfa_offset 8
 3600 00b0 BD46     		mov	sp, r7
 3601              	.LCFI126:
 3602              		.cfi_def_cfa_register 13
 3603              		@ sp needed
ARM GAS  /tmp/ccQcdK8x.s 			page 111


 3604 00b2 80BD     		pop	{r7, pc}
 3605              	.L242:
 3606              		.align	2
 3607              	.L241:
 3608 00b4 00000000 		.word	pxReadyTasksLists
 3609 00b8 00000000 		.word	pxDelayedTaskList
 3610 00bc 00000000 		.word	pxOverflowDelayedTaskList
 3611 00c0 00000000 		.word	xSuspendedTaskList
 3612 00c4 00000000 		.word	xTasksWaitingTermination
 3613              		.cfi_endproc
 3614              	.LFE31:
 3616              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 3617              		.align	1
 3618              		.global	uxTaskGetSystemState
 3619              		.syntax unified
 3620              		.thumb
 3621              		.thumb_func
 3622              		.fpu fpv4-sp-d16
 3624              	uxTaskGetSystemState:
 3625              	.LFB32:
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3626              		.loc 1 2486 2
 3627              		.cfi_startproc
 3628              		@ args = 0, pretend = 0, frame = 24
 3629              		@ frame_needed = 1, uses_anonymous_args = 0
 3630 0000 80B5     		push	{r7, lr}
 3631              	.LCFI127:
 3632              		.cfi_def_cfa_offset 8
 3633              		.cfi_offset 7, -8
 3634              		.cfi_offset 14, -4
 3635 0002 86B0     		sub	sp, sp, #24
 3636              	.LCFI128:
 3637              		.cfi_def_cfa_offset 32
 3638 0004 00AF     		add	r7, sp, #0
 3639              	.LCFI129:
 3640              		.cfi_def_cfa_register 7
 3641 0006 F860     		str	r0, [r7, #12]
 3642 0008 B960     		str	r1, [r7, #8]
 3643 000a 7A60     		str	r2, [r7, #4]
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 3644              		.loc 1 2487 14
 3645 000c 0023     		movs	r3, #0
 3646 000e 7B61     		str	r3, [r7, #20]
 3647              		.loc 1 2487 26
 3648 0010 3823     		movs	r3, #56
 3649 0012 3B61     		str	r3, [r7, #16]
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
 3650              		.loc 1 2489 3
 3651 0014 FFF7FEFF 		bl	vTaskSuspendAll
ARM GAS  /tmp/ccQcdK8x.s 			page 112


2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
 3652              		.loc 1 2492 20
 3653 0018 3A4B     		ldr	r3, .L248
 3654 001a 1B68     		ldr	r3, [r3]
 3655              		.loc 1 2492 6
 3656 001c BA68     		ldr	r2, [r7, #8]
 3657 001e 9A42     		cmp	r2, r3
 3658 0020 68D3     		bcc	.L244
 3659              	.L245:
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
 3660              		.loc 1 2498 13 discriminator 1
 3661 0022 3B69     		ldr	r3, [r7, #16]
 3662 0024 013B     		subs	r3, r3, #1
 3663 0026 3B61     		str	r3, [r7, #16]
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 3664              		.loc 1 2499 66 discriminator 1
 3665 0028 7A69     		ldr	r2, [r7, #20]
 3666 002a 1346     		mov	r3, r2
 3667 002c DB00     		lsls	r3, r3, #3
 3668 002e 1344     		add	r3, r3, r2
 3669 0030 9B00     		lsls	r3, r3, #2
 3670 0032 1A46     		mov	r2, r3
 3671              		.loc 1 2499 16 discriminator 1
 3672 0034 FB68     		ldr	r3, [r7, #12]
 3673 0036 9818     		adds	r0, r3, r2
 3674 0038 3A69     		ldr	r2, [r7, #16]
 3675 003a 1346     		mov	r3, r2
 3676 003c 9B00     		lsls	r3, r3, #2
 3677 003e 1344     		add	r3, r3, r2
 3678 0040 9B00     		lsls	r3, r3, #2
 3679 0042 314A     		ldr	r2, .L248+4
 3680 0044 1344     		add	r3, r3, r2
 3681 0046 0122     		movs	r2, #1
 3682 0048 1946     		mov	r1, r3
 3683 004a FFF7FEFF 		bl	prvListTasksWithinSingleList
 3684 004e 0246     		mov	r2, r0
 3685              		.loc 1 2499 13 discriminator 1
 3686 0050 7B69     		ldr	r3, [r7, #20]
 3687 0052 1344     		add	r3, r3, r2
 3688 0054 7B61     		str	r3, [r7, #20]
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
 3689              		.loc 1 2501 5 discriminator 1
 3690 0056 3B69     		ldr	r3, [r7, #16]
 3691 0058 002B     		cmp	r3, #0
 3692 005a E2D1     		bne	.L245
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
ARM GAS  /tmp/ccQcdK8x.s 			page 113


 3693              		.loc 1 2505 65
 3694 005c 7A69     		ldr	r2, [r7, #20]
 3695 005e 1346     		mov	r3, r2
 3696 0060 DB00     		lsls	r3, r3, #3
 3697 0062 1344     		add	r3, r3, r2
 3698 0064 9B00     		lsls	r3, r3, #2
 3699 0066 1A46     		mov	r2, r3
 3700              		.loc 1 2505 15
 3701 0068 FB68     		ldr	r3, [r7, #12]
 3702 006a 9818     		adds	r0, r3, r2
 3703 006c 274B     		ldr	r3, .L248+8
 3704 006e 1B68     		ldr	r3, [r3]
 3705 0070 0222     		movs	r2, #2
 3706 0072 1946     		mov	r1, r3
 3707 0074 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3708 0078 0246     		mov	r2, r0
 3709              		.loc 1 2505 12
 3710 007a 7B69     		ldr	r3, [r7, #20]
 3711 007c 1344     		add	r3, r3, r2
 3712 007e 7B61     		str	r3, [r7, #20]
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 3713              		.loc 1 2506 65
 3714 0080 7A69     		ldr	r2, [r7, #20]
 3715 0082 1346     		mov	r3, r2
 3716 0084 DB00     		lsls	r3, r3, #3
 3717 0086 1344     		add	r3, r3, r2
 3718 0088 9B00     		lsls	r3, r3, #2
 3719 008a 1A46     		mov	r2, r3
 3720              		.loc 1 2506 15
 3721 008c FB68     		ldr	r3, [r7, #12]
 3722 008e 9818     		adds	r0, r3, r2
 3723 0090 1F4B     		ldr	r3, .L248+12
 3724 0092 1B68     		ldr	r3, [r3]
 3725 0094 0222     		movs	r2, #2
 3726 0096 1946     		mov	r1, r3
 3727 0098 FFF7FEFF 		bl	prvListTasksWithinSingleList
 3728 009c 0246     		mov	r2, r0
 3729              		.loc 1 2506 12
 3730 009e 7B69     		ldr	r3, [r7, #20]
 3731 00a0 1344     		add	r3, r3, r2
 3732 00a2 7B61     		str	r3, [r7, #20]
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
 3733              		.loc 1 2512 66
 3734 00a4 7A69     		ldr	r2, [r7, #20]
 3735 00a6 1346     		mov	r3, r2
 3736 00a8 DB00     		lsls	r3, r3, #3
 3737 00aa 1344     		add	r3, r3, r2
 3738 00ac 9B00     		lsls	r3, r3, #2
 3739 00ae 1A46     		mov	r2, r3
 3740              		.loc 1 2512 16
 3741 00b0 FB68     		ldr	r3, [r7, #12]
 3742 00b2 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccQcdK8x.s 			page 114


 3743 00b4 0422     		movs	r2, #4
 3744 00b6 1749     		ldr	r1, .L248+16
 3745 00b8 1846     		mov	r0, r3
 3746 00ba FFF7FEFF 		bl	prvListTasksWithinSingleList
 3747 00be 0246     		mov	r2, r0
 3748              		.loc 1 2512 13
 3749 00c0 7B69     		ldr	r3, [r7, #20]
 3750 00c2 1344     		add	r3, r3, r2
 3751 00c4 7B61     		str	r3, [r7, #20]
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
 3752              		.loc 1 2520 66
 3753 00c6 7A69     		ldr	r2, [r7, #20]
 3754 00c8 1346     		mov	r3, r2
 3755 00ca DB00     		lsls	r3, r3, #3
 3756 00cc 1344     		add	r3, r3, r2
 3757 00ce 9B00     		lsls	r3, r3, #2
 3758 00d0 1A46     		mov	r2, r3
 3759              		.loc 1 2520 16
 3760 00d2 FB68     		ldr	r3, [r7, #12]
 3761 00d4 1344     		add	r3, r3, r2
 3762 00d6 0322     		movs	r2, #3
 3763 00d8 0F49     		ldr	r1, .L248+20
 3764 00da 1846     		mov	r0, r3
 3765 00dc FFF7FEFF 		bl	prvListTasksWithinSingleList
 3766 00e0 0246     		mov	r2, r0
 3767              		.loc 1 2520 13
 3768 00e2 7B69     		ldr	r3, [r7, #20]
 3769 00e4 1344     		add	r3, r3, r2
 3770 00e6 7B61     		str	r3, [r7, #20]
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
 3771              		.loc 1 2537 8
 3772 00e8 7B68     		ldr	r3, [r7, #4]
 3773 00ea 002B     		cmp	r3, #0
 3774 00ec 02D0     		beq	.L244
ARM GAS  /tmp/ccQcdK8x.s 			page 115


2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
 3775              		.loc 1 2539 24
 3776 00ee 7B68     		ldr	r3, [r7, #4]
 3777 00f0 0022     		movs	r2, #0
 3778 00f2 1A60     		str	r2, [r3]
 3779              	.L244:
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
 3780              		.loc 1 2549 12
 3781 00f4 FFF7FEFF 		bl	xTaskResumeAll
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 3782              		.loc 1 2551 10
 3783 00f8 7B69     		ldr	r3, [r7, #20]
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3784              		.loc 1 2552 2
 3785 00fa 1846     		mov	r0, r3
 3786 00fc 1837     		adds	r7, r7, #24
 3787              	.LCFI130:
 3788              		.cfi_def_cfa_offset 8
 3789 00fe BD46     		mov	sp, r7
 3790              	.LCFI131:
 3791              		.cfi_def_cfa_register 13
 3792              		@ sp needed
 3793 0100 80BD     		pop	{r7, pc}
 3794              	.L249:
 3795 0102 00BF     		.align	2
 3796              	.L248:
 3797 0104 00000000 		.word	uxCurrentNumberOfTasks
 3798 0108 00000000 		.word	pxReadyTasksLists
 3799 010c 00000000 		.word	pxDelayedTaskList
 3800 0110 00000000 		.word	pxOverflowDelayedTaskList
 3801 0114 00000000 		.word	xTasksWaitingTermination
 3802 0118 00000000 		.word	xSuspendedTaskList
 3803              		.cfi_endproc
 3804              	.LFE32:
 3806              		.section	.text.xTaskIncrementTick,"ax",%progbits
 3807              		.align	1
 3808              		.global	xTaskIncrementTick
 3809              		.syntax unified
 3810              		.thumb
 3811              		.thumb_func
 3812              		.fpu fpv4-sp-d16
 3814              	xTaskIncrementTick:
 3815              	.LFB33:
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
ARM GAS  /tmp/ccQcdK8x.s 			page 116


2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = xTask;
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
ARM GAS  /tmp/ccQcdK8x.s 			page 117


2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 3816              		.loc 1 2666 1
 3817              		.cfi_startproc
 3818              		@ args = 0, pretend = 0, frame = 24
ARM GAS  /tmp/ccQcdK8x.s 			page 118


 3819              		@ frame_needed = 1, uses_anonymous_args = 0
 3820 0000 80B5     		push	{r7, lr}
 3821              	.LCFI132:
 3822              		.cfi_def_cfa_offset 8
 3823              		.cfi_offset 7, -8
 3824              		.cfi_offset 14, -4
 3825 0002 86B0     		sub	sp, sp, #24
 3826              	.LCFI133:
 3827              		.cfi_def_cfa_offset 32
 3828 0004 00AF     		add	r7, sp, #0
 3829              	.LCFI134:
 3830              		.cfi_def_cfa_register 7
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
 3831              		.loc 1 2669 12
 3832 0006 0023     		movs	r3, #0
 3833 0008 7B61     		str	r3, [r7, #20]
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 3834              		.loc 1 2675 27
 3835 000a 4E4B     		ldr	r3, .L266
 3836 000c 1B68     		ldr	r3, [r3]
 3837              		.loc 1 2675 4
 3838 000e 002B     		cmp	r3, #0
 3839 0010 40F08880 		bne	.L251
 3840              	.LBB180:
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 3841              		.loc 1 2679 49
 3842 0014 4C4B     		ldr	r3, .L266+4
 3843 0016 1B68     		ldr	r3, [r3]
 3844              		.loc 1 2679 20
 3845 0018 0133     		adds	r3, r3, #1
 3846 001a 3B61     		str	r3, [r7, #16]
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
 3847              		.loc 1 2683 14
 3848 001c 4A4A     		ldr	r2, .L266+4
 3849 001e 3B69     		ldr	r3, [r7, #16]
 3850 0020 1360     		str	r3, [r2]
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
 3851              		.loc 1 2685 5
 3852 0022 3B69     		ldr	r3, [r7, #16]
 3853 0024 002B     		cmp	r3, #0
 3854 0026 1FD1     		bne	.L252
 3855              	.LBB181:
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccQcdK8x.s 			page 119


2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
 3856              		.loc 1 2687 4
 3857 0028 484B     		ldr	r3, .L266+8
 3858 002a 1B68     		ldr	r3, [r3]
 3859 002c 1B68     		ldr	r3, [r3]
 3860 002e 002B     		cmp	r3, #0
 3861 0030 09D0     		beq	.L253
 3862              	.LBB182:
 3863              	.LBB183:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3864              		.loc 2 195 2 discriminator 1
 3865              		.syntax unified
 3866              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3867 0032 4FF05003 			mov r3, #80												
 3868 0036 83F31188 		msr basepri, r3											
 3869 003a BFF36F8F 		isb														
 3870 003e BFF34F8F 		dsb														
 3871              	
 3872              	@ 0 "" 2
 3873              		.thumb
 3874              		.syntax unified
 3875 0042 3B60     		str	r3, [r7]
 3876              	.L254:
 3877              	.LBE183:
 3878              	.LBE182:
 3879              		.loc 1 2687 4 discriminator 1
 3880 0044 FEE7     		b	.L254
 3881              	.L253:
 3882              		.loc 1 2687 4 is_stmt 0 discriminator 2
 3883 0046 414B     		ldr	r3, .L266+8
 3884 0048 1B68     		ldr	r3, [r3]
 3885 004a FB60     		str	r3, [r7, #12]
 3886 004c 404B     		ldr	r3, .L266+12
 3887 004e 1B68     		ldr	r3, [r3]
 3888 0050 3E4A     		ldr	r2, .L266+8
 3889 0052 1360     		str	r3, [r2]
 3890 0054 3E4A     		ldr	r2, .L266+12
 3891 0056 FB68     		ldr	r3, [r7, #12]
 3892 0058 1360     		str	r3, [r2]
 3893 005a 3E4B     		ldr	r3, .L266+16
 3894 005c 1B68     		ldr	r3, [r3]
 3895 005e 0133     		adds	r3, r3, #1
 3896 0060 3C4A     		ldr	r2, .L266+16
 3897 0062 1360     		str	r3, [r2]
 3898 0064 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3899              	.L252:
 3900              	.LBE181:
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
ARM GAS  /tmp/ccQcdK8x.s 			page 120


2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
 3901              		.loc 1 2698 23 is_stmt 1
 3902 0068 3B4B     		ldr	r3, .L266+20
 3903 006a 1B68     		ldr	r3, [r3]
 3904              		.loc 1 2698 5
 3905 006c 3A69     		ldr	r2, [r7, #16]
 3906 006e 9A42     		cmp	r2, r3
 3907 0070 49D3     		bcc	.L255
 3908              	.L261:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 3909              		.loc 1 2702 9
 3910 0072 364B     		ldr	r3, .L266+8
 3911 0074 1B68     		ldr	r3, [r3]
 3912 0076 1B68     		ldr	r3, [r3]
 3913              		.loc 1 2702 7
 3914 0078 002B     		cmp	r3, #0
 3915 007a 04D1     		bne	.L256
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
 3916              		.loc 1 2709 27
 3917 007c 364B     		ldr	r3, .L266+20
 3918 007e 4FF0FF32 		mov	r2, #-1
 3919 0082 1A60     		str	r2, [r3]
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 3920              		.loc 1 2710 6
 3921 0084 3FE0     		b	.L255
 3922              	.L256:
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this
 3923              		.loc 1 2718 14
 3924 0086 314B     		ldr	r3, .L266+8
 3925 0088 1B68     		ldr	r3, [r3]
 3926 008a DB68     		ldr	r3, [r3, #12]
 3927              		.loc 1 2718 12
 3928 008c DB68     		ldr	r3, [r3, #12]
 3929 008e BB60     		str	r3, [r7, #8]
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 3930              		.loc 1 2719 17
 3931 0090 BB68     		ldr	r3, [r7, #8]
 3932 0092 5B68     		ldr	r3, [r3, #4]
 3933 0094 7B60     		str	r3, [r7, #4]
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
ARM GAS  /tmp/ccQcdK8x.s 			page 121


 3934              		.loc 1 2721 8
 3935 0096 3A69     		ldr	r2, [r7, #16]
 3936 0098 7B68     		ldr	r3, [r7, #4]
 3937 009a 9A42     		cmp	r2, r3
 3938 009c 03D2     		bcs	.L257
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
 3939              		.loc 1 2728 28
 3940 009e 2E4A     		ldr	r2, .L266+20
 3941 00a0 7B68     		ldr	r3, [r7, #4]
 3942 00a2 1360     		str	r3, [r2]
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks
 3943              		.loc 1 2729 7
 3944 00a4 2FE0     		b	.L255
 3945              	.L257:
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 3946              		.loc 1 2737 15
 3947 00a6 BB68     		ldr	r3, [r7, #8]
 3948 00a8 0433     		adds	r3, r3, #4
 3949 00aa 1846     		mov	r0, r3
 3950 00ac FFF7FEFF 		bl	uxListRemove
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 3951              		.loc 1 2741 10
 3952 00b0 BB68     		ldr	r3, [r7, #8]
 3953 00b2 9B6A     		ldr	r3, [r3, #40]
 3954              		.loc 1 2741 8
 3955 00b4 002B     		cmp	r3, #0
 3956 00b6 04D0     		beq	.L258
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 3957              		.loc 1 2743 16
 3958 00b8 BB68     		ldr	r3, [r7, #8]
 3959 00ba 1833     		adds	r3, r3, #24
 3960 00bc 1846     		mov	r0, r3
 3961 00be FFF7FEFF 		bl	uxListRemove
 3962              	.L258:
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 122


2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3963              		.loc 1 2752 6
 3964 00c2 BB68     		ldr	r3, [r7, #8]
 3965 00c4 DA6A     		ldr	r2, [r3, #44]
 3966 00c6 254B     		ldr	r3, .L266+24
 3967 00c8 1B68     		ldr	r3, [r3]
 3968 00ca 9A42     		cmp	r2, r3
 3969 00cc 03D9     		bls	.L259
 3970              		.loc 1 2752 6 is_stmt 0 discriminator 1
 3971 00ce BB68     		ldr	r3, [r7, #8]
 3972 00d0 DB6A     		ldr	r3, [r3, #44]
 3973 00d2 224A     		ldr	r2, .L266+24
 3974 00d4 1360     		str	r3, [r2]
 3975              	.L259:
 3976              		.loc 1 2752 6 discriminator 3
 3977 00d6 BB68     		ldr	r3, [r7, #8]
 3978 00d8 DA6A     		ldr	r2, [r3, #44]
 3979 00da 1346     		mov	r3, r2
 3980 00dc 9B00     		lsls	r3, r3, #2
 3981 00de 1344     		add	r3, r3, r2
 3982 00e0 9B00     		lsls	r3, r3, #2
 3983 00e2 1F4A     		ldr	r2, .L266+28
 3984 00e4 1A44     		add	r2, r2, r3
 3985 00e6 BB68     		ldr	r3, [r7, #8]
 3986 00e8 0433     		adds	r3, r3, #4
 3987 00ea 1946     		mov	r1, r3
 3988 00ec 1046     		mov	r0, r2
 3989 00ee FFF7FEFF 		bl	vListInsertEnd
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 3990              		.loc 1 2762 16 is_stmt 1 discriminator 3
 3991 00f2 BB68     		ldr	r3, [r7, #8]
 3992 00f4 DA6A     		ldr	r2, [r3, #44]
 3993              		.loc 1 2762 44 discriminator 3
 3994 00f6 1B4B     		ldr	r3, .L266+32
 3995 00f8 1B68     		ldr	r3, [r3]
 3996 00fa DB6A     		ldr	r3, [r3, #44]
 3997              		.loc 1 2762 9 discriminator 3
 3998 00fc 9A42     		cmp	r2, r3
 3999 00fe B8D3     		bcc	.L261
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
 4000              		.loc 1 2764 24
 4001 0100 0123     		movs	r3, #1
 4002 0102 7B61     		str	r3, [r7, #20]
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4003              		.loc 1 2702 7
ARM GAS  /tmp/ccQcdK8x.s 			page 123


 4004 0104 B5E7     		b	.L261
 4005              	.L255:
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
 4006              		.loc 1 2781 8
 4007 0106 174B     		ldr	r3, .L266+32
 4008 0108 1B68     		ldr	r3, [r3]
 4009 010a DA6A     		ldr	r2, [r3, #44]
 4010 010c 1449     		ldr	r1, .L266+28
 4011 010e 1346     		mov	r3, r2
 4012 0110 9B00     		lsls	r3, r3, #2
 4013 0112 1344     		add	r3, r3, r2
 4014 0114 9B00     		lsls	r3, r3, #2
 4015 0116 0B44     		add	r3, r3, r1
 4016 0118 1B68     		ldr	r3, [r3]
 4017              		.loc 1 2781 6
 4018 011a 012B     		cmp	r3, #1
 4019 011c 07D9     		bls	.L263
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
 4020              		.loc 1 2783 21
 4021 011e 0123     		movs	r3, #1
 4022 0120 7B61     		str	r3, [r7, #20]
 4023 0122 04E0     		b	.L263
 4024              	.L251:
 4025              	.LBE180:
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccQcdK8x.s 			page 124


2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
 4026              		.loc 1 2809 3
 4027 0124 104B     		ldr	r3, .L266+36
 4028 0126 1B68     		ldr	r3, [r3]
 4029 0128 0133     		adds	r3, r3, #1
 4030 012a 0F4A     		ldr	r2, .L266+36
 4031 012c 1360     		str	r3, [r2]
 4032              	.L263:
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
 4033              		.loc 1 2822 21
 4034 012e 0F4B     		ldr	r3, .L266+40
 4035 0130 1B68     		ldr	r3, [r3]
 4036              		.loc 1 2822 5
 4037 0132 002B     		cmp	r3, #0
 4038 0134 01D0     		beq	.L264
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
 4039              		.loc 1 2824 20
 4040 0136 0123     		movs	r3, #1
 4041 0138 7B61     		str	r3, [r7, #20]
 4042              	.L264:
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
 4043              		.loc 1 2833 9
 4044 013a 7B69     		ldr	r3, [r7, #20]
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4045              		.loc 1 2834 1
 4046 013c 1846     		mov	r0, r3
 4047 013e 1837     		adds	r7, r7, #24
ARM GAS  /tmp/ccQcdK8x.s 			page 125


 4048              	.LCFI135:
 4049              		.cfi_def_cfa_offset 8
 4050 0140 BD46     		mov	sp, r7
 4051              	.LCFI136:
 4052              		.cfi_def_cfa_register 13
 4053              		@ sp needed
 4054 0142 80BD     		pop	{r7, pc}
 4055              	.L267:
 4056              		.align	2
 4057              	.L266:
 4058 0144 00000000 		.word	uxSchedulerSuspended
 4059 0148 00000000 		.word	xTickCount
 4060 014c 00000000 		.word	pxDelayedTaskList
 4061 0150 00000000 		.word	pxOverflowDelayedTaskList
 4062 0154 00000000 		.word	xNumOfOverflows
 4063 0158 00000000 		.word	xNextTaskUnblockTime
 4064 015c 00000000 		.word	uxTopReadyPriority
 4065 0160 00000000 		.word	pxReadyTasksLists
 4066 0164 00000000 		.word	pxCurrentTCB
 4067 0168 00000000 		.word	uxPendedTicks
 4068 016c 00000000 		.word	xYieldPending
 4069              		.cfi_endproc
 4070              	.LFE33:
 4072              		.section	.text.vTaskSetApplicationTaskTag,"ax",%progbits
 4073              		.align	1
 4074              		.global	vTaskSetApplicationTaskTag
 4075              		.syntax unified
 4076              		.thumb
 4077              		.thumb_func
 4078              		.fpu fpv4-sp-d16
 4080              	vTaskSetApplicationTaskTag:
 4081              	.LFB34:
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4082              		.loc 1 2840 2
 4083              		.cfi_startproc
 4084              		@ args = 0, pretend = 0, frame = 16
 4085              		@ frame_needed = 1, uses_anonymous_args = 0
 4086 0000 80B5     		push	{r7, lr}
 4087              	.LCFI137:
 4088              		.cfi_def_cfa_offset 8
 4089              		.cfi_offset 7, -8
 4090              		.cfi_offset 14, -4
 4091 0002 84B0     		sub	sp, sp, #16
 4092              	.LCFI138:
 4093              		.cfi_def_cfa_offset 24
 4094 0004 00AF     		add	r7, sp, #0
 4095              	.LCFI139:
 4096              		.cfi_def_cfa_register 7
 4097 0006 7860     		str	r0, [r7, #4]
 4098 0008 3960     		str	r1, [r7]
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 126


2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 4099              		.loc 1 2845 5
 4100 000a 7B68     		ldr	r3, [r7, #4]
 4101 000c 002B     		cmp	r3, #0
 4102 000e 03D1     		bne	.L269
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
 4103              		.loc 1 2847 9
 4104 0010 084B     		ldr	r3, .L271
 4105 0012 1B68     		ldr	r3, [r3]
 4106 0014 FB60     		str	r3, [r7, #12]
 4107 0016 01E0     		b	.L270
 4108              	.L269:
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
 4109              		.loc 1 2851 9
 4110 0018 7B68     		ldr	r3, [r7, #4]
 4111 001a FB60     		str	r3, [r7, #12]
 4112              	.L270:
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 4113              		.loc 1 2856 3
 4114 001c FFF7FEFF 		bl	vPortEnterCritical
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
 4115              		.loc 1 2858 20
 4116 0020 FB68     		ldr	r3, [r7, #12]
 4117 0022 3A68     		ldr	r2, [r7]
 4118 0024 5A65     		str	r2, [r3, #84]
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 4119              		.loc 1 2860 3
 4120 0026 FFF7FEFF 		bl	vPortExitCritical
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4121              		.loc 1 2861 2
 4122 002a 00BF     		nop
 4123 002c 1037     		adds	r7, r7, #16
 4124              	.LCFI140:
 4125              		.cfi_def_cfa_offset 8
 4126 002e BD46     		mov	sp, r7
 4127              	.LCFI141:
 4128              		.cfi_def_cfa_register 13
 4129              		@ sp needed
 4130 0030 80BD     		pop	{r7, pc}
 4131              	.L272:
 4132 0032 00BF     		.align	2
 4133              	.L271:
 4134 0034 00000000 		.word	pxCurrentTCB
 4135              		.cfi_endproc
 4136              	.LFE34:
ARM GAS  /tmp/ccQcdK8x.s 			page 127


 4138              		.section	.text.xTaskGetApplicationTaskTag,"ax",%progbits
 4139              		.align	1
 4140              		.global	xTaskGetApplicationTaskTag
 4141              		.syntax unified
 4142              		.thumb
 4143              		.thumb_func
 4144              		.fpu fpv4-sp-d16
 4146              	xTaskGetApplicationTaskTag:
 4147              	.LFB35:
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4148              		.loc 1 2869 2
 4149              		.cfi_startproc
 4150              		@ args = 0, pretend = 0, frame = 16
 4151              		@ frame_needed = 1, uses_anonymous_args = 0
 4152 0000 80B5     		push	{r7, lr}
 4153              	.LCFI142:
 4154              		.cfi_def_cfa_offset 8
 4155              		.cfi_offset 7, -8
 4156              		.cfi_offset 14, -4
 4157 0002 84B0     		sub	sp, sp, #16
 4158              	.LCFI143:
 4159              		.cfi_def_cfa_offset 24
 4160 0004 00AF     		add	r7, sp, #0
 4161              	.LCFI144:
 4162              		.cfi_def_cfa_register 7
 4163 0006 7860     		str	r0, [r7, #4]
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4164              		.loc 1 2874 11
 4165 0008 7B68     		ldr	r3, [r7, #4]
 4166 000a 002B     		cmp	r3, #0
 4167 000c 02D1     		bne	.L274
 4168              		.loc 1 2874 11 is_stmt 0 discriminator 1
 4169 000e 084B     		ldr	r3, .L277
 4170 0010 1B68     		ldr	r3, [r3]
 4171 0012 00E0     		b	.L275
 4172              	.L274:
 4173              		.loc 1 2874 11 discriminator 2
 4174 0014 7B68     		ldr	r3, [r7, #4]
 4175              	.L275:
 4176              		.loc 1 2874 9 is_stmt 1 discriminator 4
 4177 0016 FB60     		str	r3, [r7, #12]
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 4178              		.loc 1 2878 3 discriminator 4
ARM GAS  /tmp/ccQcdK8x.s 			page 128


 4179 0018 FFF7FEFF 		bl	vPortEnterCritical
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
 4180              		.loc 1 2880 12 discriminator 4
 4181 001c FB68     		ldr	r3, [r7, #12]
 4182 001e 5B6D     		ldr	r3, [r3, #84]
 4183 0020 BB60     		str	r3, [r7, #8]
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 4184              		.loc 1 2882 3 discriminator 4
 4185 0022 FFF7FEFF 		bl	vPortExitCritical
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4186              		.loc 1 2884 10 discriminator 4
 4187 0026 BB68     		ldr	r3, [r7, #8]
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4188              		.loc 1 2885 2 discriminator 4
 4189 0028 1846     		mov	r0, r3
 4190 002a 1037     		adds	r7, r7, #16
 4191              	.LCFI145:
 4192              		.cfi_def_cfa_offset 8
 4193 002c BD46     		mov	sp, r7
 4194              	.LCFI146:
 4195              		.cfi_def_cfa_register 13
 4196              		@ sp needed
 4197 002e 80BD     		pop	{r7, pc}
 4198              	.L278:
 4199              		.align	2
 4200              	.L277:
 4201 0030 00000000 		.word	pxCurrentTCB
 4202              		.cfi_endproc
 4203              	.LFE35:
 4205              		.section	.text.xTaskGetApplicationTaskTagFromISR,"ax",%progbits
 4206              		.align	1
 4207              		.global	xTaskGetApplicationTaskTagFromISR
 4208              		.syntax unified
 4209              		.thumb
 4210              		.thumb_func
 4211              		.fpu fpv4-sp-d16
 4213              	xTaskGetApplicationTaskTagFromISR:
 4214              	.LFB36:
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTagFromISR( TaskHandle_t xTask )
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4215              		.loc 1 2893 2
 4216              		.cfi_startproc
 4217              		@ args = 0, pretend = 0, frame = 32
 4218              		@ frame_needed = 1, uses_anonymous_args = 0
 4219              		@ link register save eliminated.
 4220 0000 80B4     		push	{r7}
 4221              	.LCFI147:
 4222              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccQcdK8x.s 			page 129


 4223              		.cfi_offset 7, -4
 4224 0002 89B0     		sub	sp, sp, #36
 4225              	.LCFI148:
 4226              		.cfi_def_cfa_offset 40
 4227 0004 00AF     		add	r7, sp, #0
 4228              	.LCFI149:
 4229              		.cfi_def_cfa_register 7
 4230 0006 7860     		str	r0, [r7, #4]
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then set the calling task's hook. */
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 4231              		.loc 1 2899 11
 4232 0008 7B68     		ldr	r3, [r7, #4]
 4233 000a 002B     		cmp	r3, #0
 4234 000c 02D1     		bne	.L280
 4235              		.loc 1 2899 11 is_stmt 0 discriminator 1
 4236 000e 114B     		ldr	r3, .L284
 4237 0010 1B68     		ldr	r3, [r3]
 4238 0012 00E0     		b	.L281
 4239              	.L280:
 4240              		.loc 1 2899 11 discriminator 2
 4241 0014 7B68     		ldr	r3, [r7, #4]
 4242              	.L281:
 4243              		.loc 1 2899 9 is_stmt 1 discriminator 4
 4244 0016 FB61     		str	r3, [r7, #28]
 4245              	.LBB184:
 4246              	.LBB185:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4247              		.loc 2 211 2 discriminator 4
 4248              		.syntax unified
 4249              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4250 0018 EFF31182 			mrs r2, basepri											
 4251 001c 4FF05003 		mov r3, #80												
 4252 0020 83F31188 		msr basepri, r3											
 4253 0024 BFF36F8F 		isb														
 4254 0028 BFF34F8F 		dsb														
 4255              	
 4256              	@ 0 "" 2
 4257              		.thumb
 4258              		.syntax unified
 4259 002c FA60     		str	r2, [r7, #12]
 4260 002e BB60     		str	r3, [r7, #8]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 4261              		.loc 2 223 9 discriminator 4
 4262 0030 FB68     		ldr	r3, [r7, #12]
 4263              	.LBE185:
 4264              	.LBE184:
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 4265              		.loc 1 2903 28 discriminator 4
 4266 0032 BB61     		str	r3, [r7, #24]
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccQcdK8x.s 			page 130


2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pxTCB->pxTaskTag;
 4267              		.loc 1 2905 12 discriminator 4
 4268 0034 FB69     		ldr	r3, [r7, #28]
 4269 0036 5B6D     		ldr	r3, [r3, #84]
 4270 0038 7B61     		str	r3, [r7, #20]
 4271 003a BB69     		ldr	r3, [r7, #24]
 4272 003c 3B61     		str	r3, [r7, #16]
 4273              	.LBB186:
 4274              	.LBB187:
 4275              		.loc 2 229 2 discriminator 4
 4276 003e 3B69     		ldr	r3, [r7, #16]
 4277              		.syntax unified
 4278              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4279 0040 83F31188 			msr basepri, r3	
 4280              	@ 0 "" 2
 4281              		.thumb
 4282              		.syntax unified
 4283              	.LBE187:
 4284              	.LBE186:
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4285              		.loc 1 2909 10 discriminator 4
 4286 0044 7B69     		ldr	r3, [r7, #20]
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4287              		.loc 1 2910 2 discriminator 4
 4288 0046 1846     		mov	r0, r3
 4289 0048 2437     		adds	r7, r7, #36
 4290              	.LCFI150:
 4291              		.cfi_def_cfa_offset 4
 4292 004a BD46     		mov	sp, r7
 4293              	.LCFI151:
 4294              		.cfi_def_cfa_register 13
 4295              		@ sp needed
 4296 004c 5DF8047B 		ldr	r7, [sp], #4
 4297              	.LCFI152:
 4298              		.cfi_restore 7
 4299              		.cfi_def_cfa_offset 0
 4300 0050 7047     		bx	lr
 4301              	.L285:
 4302 0052 00BF     		.align	2
 4303              	.L284:
 4304 0054 00000000 		.word	pxCurrentTCB
 4305              		.cfi_endproc
 4306              	.LFE36:
 4308              		.section	.text.xTaskCallApplicationTaskHook,"ax",%progbits
 4309              		.align	1
 4310              		.global	xTaskCallApplicationTaskHook
 4311              		.syntax unified
 4312              		.thumb
 4313              		.thumb_func
 4314              		.fpu fpv4-sp-d16
 4316              	xTaskCallApplicationTaskHook:
 4317              	.LFB37:
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
ARM GAS  /tmp/ccQcdK8x.s 			page 131


2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4318              		.loc 1 2918 2
 4319              		.cfi_startproc
 4320              		@ args = 0, pretend = 0, frame = 16
 4321              		@ frame_needed = 1, uses_anonymous_args = 0
 4322 0000 80B5     		push	{r7, lr}
 4323              	.LCFI153:
 4324              		.cfi_def_cfa_offset 8
 4325              		.cfi_offset 7, -8
 4326              		.cfi_offset 14, -4
 4327 0002 84B0     		sub	sp, sp, #16
 4328              	.LCFI154:
 4329              		.cfi_def_cfa_offset 24
 4330 0004 00AF     		add	r7, sp, #0
 4331              	.LCFI155:
 4332              		.cfi_def_cfa_register 7
 4333 0006 7860     		str	r0, [r7, #4]
 4334 0008 3960     		str	r1, [r7]
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
 4335              		.loc 1 2923 5
 4336 000a 7B68     		ldr	r3, [r7, #4]
 4337 000c 002B     		cmp	r3, #0
 4338 000e 03D1     		bne	.L287
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = pxCurrentTCB;
 4339              		.loc 1 2925 9
 4340 0010 0B4B     		ldr	r3, .L292
 4341 0012 1B68     		ldr	r3, [r3]
 4342 0014 FB60     		str	r3, [r7, #12]
 4343 0016 01E0     		b	.L288
 4344              	.L287:
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = xTask;
 4345              		.loc 1 2929 9
 4346 0018 7B68     		ldr	r3, [r7, #4]
 4347 001a FB60     		str	r3, [r7, #12]
 4348              	.L288:
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
 4349              		.loc 1 2932 11
 4350 001c FB68     		ldr	r3, [r7, #12]
 4351 001e 5B6D     		ldr	r3, [r3, #84]
 4352              		.loc 1 2932 5
 4353 0020 002B     		cmp	r3, #0
 4354 0022 05D0     		beq	.L289
ARM GAS  /tmp/ccQcdK8x.s 			page 132


2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
 4355              		.loc 1 2934 18
 4356 0024 FB68     		ldr	r3, [r7, #12]
 4357 0026 5B6D     		ldr	r3, [r3, #84]
 4358              		.loc 1 2934 14
 4359 0028 3868     		ldr	r0, [r7]
 4360 002a 9847     		blx	r3
 4361              	.LVL0:
 4362 002c B860     		str	r0, [r7, #8]
 4363 002e 01E0     		b	.L290
 4364              	.L289:
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
 4365              		.loc 1 2938 12
 4366 0030 0023     		movs	r3, #0
 4367 0032 BB60     		str	r3, [r7, #8]
 4368              	.L290:
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 4369              		.loc 1 2941 10
 4370 0034 BB68     		ldr	r3, [r7, #8]
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4371              		.loc 1 2942 2
 4372 0036 1846     		mov	r0, r3
 4373 0038 1037     		adds	r7, r7, #16
 4374              	.LCFI156:
 4375              		.cfi_def_cfa_offset 8
 4376 003a BD46     		mov	sp, r7
 4377              	.LCFI157:
 4378              		.cfi_def_cfa_register 13
 4379              		@ sp needed
 4380 003c 80BD     		pop	{r7, pc}
 4381              	.L293:
 4382 003e 00BF     		.align	2
 4383              	.L292:
 4384 0040 00000000 		.word	pxCurrentTCB
 4385              		.cfi_endproc
 4386              	.LFE37:
 4388              		.section	.text.vTaskSwitchContext,"ax",%progbits
 4389              		.align	1
 4390              		.global	vTaskSwitchContext
 4391              		.syntax unified
 4392              		.thumb
 4393              		.thumb_func
 4394              		.fpu fpv4-sp-d16
 4396              	vTaskSwitchContext:
 4397              	.LFB38:
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
ARM GAS  /tmp/ccQcdK8x.s 			page 133


 4398              		.loc 1 2948 1
 4399              		.cfi_startproc
 4400              		@ args = 0, pretend = 0, frame = 16
 4401              		@ frame_needed = 1, uses_anonymous_args = 0
 4402              		@ link register save eliminated.
 4403 0000 80B4     		push	{r7}
 4404              	.LCFI158:
 4405              		.cfi_def_cfa_offset 4
 4406              		.cfi_offset 7, -4
 4407 0002 85B0     		sub	sp, sp, #20
 4408              	.LCFI159:
 4409              		.cfi_def_cfa_offset 24
 4410 0004 00AF     		add	r7, sp, #0
 4411              	.LCFI160:
 4412              		.cfi_def_cfa_register 7
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 4413              		.loc 1 2949 27
 4414 0006 2C4B     		ldr	r3, .L303
 4415 0008 1B68     		ldr	r3, [r3]
 4416              		.loc 1 2949 4
 4417 000a 002B     		cmp	r3, #0
 4418 000c 03D0     		beq	.L295
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4419              		.loc 1 2953 17
 4420 000e 2B4B     		ldr	r3, .L303+4
 4421 0010 0122     		movs	r2, #1
 4422 0012 1A60     		str	r2, [r3]
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the amount of time the task has been running to the
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			accumulated time so far.  The time the task started running was
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			stored in ulTaskSwitchedInTime.  Note that there is no overflow
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protection here so count values are only valid until the timer
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			overflows.  The guard against negative values is to protect
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			against suspect run time stat counter implementations - which
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			are provided by the application, not the kernel. */
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalRunTime > ulTaskSwitchedInTime )
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccQcdK8x.s 			page 134


2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTaskSwitchedInTime = ulTotalRunTime;
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Before the currently running task is switched out, save its errno. */
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->iTaskErrno = FreeRTOS_errno;
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timer
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* After the new task is switched in, update the global errno. */
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_POSIX_ERRNO == 1 )
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			FreeRTOS_errno = pxCurrentTCB->iTaskErrno;
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4423              		.loc 1 3017 1
 4424 0014 4AE0     		b	.L302
 4425              	.L295:
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 4426              		.loc 1 2957 17
 4427 0016 294B     		ldr	r3, .L303+4
 4428 0018 0022     		movs	r2, #0
 4429 001a 1A60     		str	r2, [r3]
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4430              		.loc 1 2993 16
 4431 001c 284B     		ldr	r3, .L303+8
 4432 001e 1B68     		ldr	r3, [r3]
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4433              		.loc 1 2993 29
 4434 0020 284A     		ldr	r2, .L303+12
 4435 0022 1268     		ldr	r2, [r2]
 4436 0024 1A66     		str	r2, [r3, #96]
 4437              	.LBB188:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4438              		.loc 1 2999 3
ARM GAS  /tmp/ccQcdK8x.s 			page 135


 4439 0026 284B     		ldr	r3, .L303+16
 4440 0028 1B68     		ldr	r3, [r3]
 4441 002a FB60     		str	r3, [r7, #12]
 4442 002c 0FE0     		b	.L297
 4443              	.L300:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4444              		.loc 1 2999 3 is_stmt 0 discriminator 5
 4445 002e FB68     		ldr	r3, [r7, #12]
 4446 0030 002B     		cmp	r3, #0
 4447 0032 09D1     		bne	.L298
 4448              	.LBB189:
 4449              	.LBB190:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4450              		.loc 2 195 2 is_stmt 1 discriminator 2
 4451              		.syntax unified
 4452              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4453 0034 4FF05003 			mov r3, #80												
 4454 0038 83F31188 		msr basepri, r3											
 4455 003c BFF36F8F 		isb														
 4456 0040 BFF34F8F 		dsb														
 4457              	
 4458              	@ 0 "" 2
 4459              		.thumb
 4460              		.syntax unified
 4461 0044 7B60     		str	r3, [r7, #4]
 4462              	.L299:
 4463              	.LBE190:
 4464              	.LBE189:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4465              		.loc 1 2999 3 discriminator 1
 4466 0046 FEE7     		b	.L299
 4467              	.L298:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4468              		.loc 1 2999 3 is_stmt 0 discriminator 3
 4469 0048 FB68     		ldr	r3, [r7, #12]
 4470 004a 013B     		subs	r3, r3, #1
 4471 004c FB60     		str	r3, [r7, #12]
 4472              	.L297:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4473              		.loc 1 2999 3 discriminator 4
 4474 004e 1F49     		ldr	r1, .L303+20
 4475 0050 FA68     		ldr	r2, [r7, #12]
 4476 0052 1346     		mov	r3, r2
 4477 0054 9B00     		lsls	r3, r3, #2
 4478 0056 1344     		add	r3, r3, r2
 4479 0058 9B00     		lsls	r3, r3, #2
 4480 005a 0B44     		add	r3, r3, r1
 4481 005c 1B68     		ldr	r3, [r3]
 4482 005e 002B     		cmp	r3, #0
 4483 0060 E5D0     		beq	.L300
 4484              	.LBB191:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4485              		.loc 1 2999 3 discriminator 6
 4486 0062 FA68     		ldr	r2, [r7, #12]
 4487 0064 1346     		mov	r3, r2
 4488 0066 9B00     		lsls	r3, r3, #2
 4489 0068 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccQcdK8x.s 			page 136


 4490 006a 9B00     		lsls	r3, r3, #2
 4491 006c 174A     		ldr	r2, .L303+20
 4492 006e 1344     		add	r3, r3, r2
 4493 0070 BB60     		str	r3, [r7, #8]
 4494 0072 BB68     		ldr	r3, [r7, #8]
 4495 0074 5B68     		ldr	r3, [r3, #4]
 4496 0076 5A68     		ldr	r2, [r3, #4]
 4497 0078 BB68     		ldr	r3, [r7, #8]
 4498 007a 5A60     		str	r2, [r3, #4]
 4499 007c BB68     		ldr	r3, [r7, #8]
 4500 007e 5A68     		ldr	r2, [r3, #4]
 4501 0080 BB68     		ldr	r3, [r7, #8]
 4502 0082 0833     		adds	r3, r3, #8
 4503 0084 9A42     		cmp	r2, r3
 4504 0086 04D1     		bne	.L301
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4505              		.loc 1 2999 3 discriminator 7
 4506 0088 BB68     		ldr	r3, [r7, #8]
 4507 008a 5B68     		ldr	r3, [r3, #4]
 4508 008c 5A68     		ldr	r2, [r3, #4]
 4509 008e BB68     		ldr	r3, [r7, #8]
 4510 0090 5A60     		str	r2, [r3, #4]
 4511              	.L301:
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 4512              		.loc 1 2999 3 discriminator 9
 4513 0092 BB68     		ldr	r3, [r7, #8]
 4514 0094 5B68     		ldr	r3, [r3, #4]
 4515 0096 DB68     		ldr	r3, [r3, #12]
 4516 0098 094A     		ldr	r2, .L303+8
 4517 009a 1360     		str	r3, [r2]
 4518              	.LBE191:
 4519 009c 0A4A     		ldr	r2, .L303+16
 4520 009e FB68     		ldr	r3, [r7, #12]
 4521 00a0 1360     		str	r3, [r2]
 4522              	.LBE188:
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4523              		.loc 1 3005 33 is_stmt 1 discriminator 9
 4524 00a2 074B     		ldr	r3, .L303+8
 4525 00a4 1B68     		ldr	r3, [r3]
 4526 00a6 1B6E     		ldr	r3, [r3, #96]
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4527              		.loc 1 3005 19 discriminator 9
 4528 00a8 064A     		ldr	r2, .L303+12
 4529 00aa 1360     		str	r3, [r2]
 4530              	.L302:
 4531              		.loc 1 3017 1
 4532 00ac 00BF     		nop
 4533 00ae 1437     		adds	r7, r7, #20
 4534              	.LCFI161:
 4535              		.cfi_def_cfa_offset 4
 4536 00b0 BD46     		mov	sp, r7
 4537              	.LCFI162:
 4538              		.cfi_def_cfa_register 13
 4539              		@ sp needed
 4540 00b2 5DF8047B 		ldr	r7, [sp], #4
 4541              	.LCFI163:
 4542              		.cfi_restore 7
ARM GAS  /tmp/ccQcdK8x.s 			page 137


 4543              		.cfi_def_cfa_offset 0
 4544 00b6 7047     		bx	lr
 4545              	.L304:
 4546              		.align	2
 4547              	.L303:
 4548 00b8 00000000 		.word	uxSchedulerSuspended
 4549 00bc 00000000 		.word	xYieldPending
 4550 00c0 00000000 		.word	pxCurrentTCB
 4551 00c4 00000000 		.word	FreeRTOS_errno
 4552 00c8 00000000 		.word	uxTopReadyPriority
 4553 00cc 00000000 		.word	pxReadyTasksLists
 4554              		.cfi_endproc
 4555              	.LFE38:
 4557              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 4558              		.align	1
 4559              		.global	vTaskPlaceOnEventList
 4560              		.syntax unified
 4561              		.thumb
 4562              		.thumb_func
 4563              		.fpu fpv4-sp-d16
 4565              	vTaskPlaceOnEventList:
 4566              	.LFB39:
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4567              		.loc 1 3021 1
 4568              		.cfi_startproc
 4569              		@ args = 0, pretend = 0, frame = 16
 4570              		@ frame_needed = 1, uses_anonymous_args = 0
 4571 0000 80B5     		push	{r7, lr}
 4572              	.LCFI164:
 4573              		.cfi_def_cfa_offset 8
 4574              		.cfi_offset 7, -8
 4575              		.cfi_offset 14, -4
 4576 0002 84B0     		sub	sp, sp, #16
 4577              	.LCFI165:
 4578              		.cfi_def_cfa_offset 24
 4579 0004 00AF     		add	r7, sp, #0
 4580              	.LCFI166:
 4581              		.cfi_def_cfa_register 7
 4582 0006 7860     		str	r0, [r7, #4]
 4583 0008 3960     		str	r1, [r7]
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4584              		.loc 1 3022 2
 4585 000a 7B68     		ldr	r3, [r7, #4]
 4586 000c 002B     		cmp	r3, #0
 4587 000e 09D1     		bne	.L306
 4588              	.LBB192:
 4589              	.LBB193:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4590              		.loc 2 195 2 discriminator 1
 4591              		.syntax unified
 4592              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4593 0010 4FF05003 			mov r3, #80												
 4594 0014 83F31188 		msr basepri, r3											
 4595 0018 BFF36F8F 		isb														
ARM GAS  /tmp/ccQcdK8x.s 			page 138


 4596 001c BFF34F8F 		dsb														
 4597              	
 4598              	@ 0 "" 2
 4599              		.thumb
 4600              		.syntax unified
 4601 0020 FB60     		str	r3, [r7, #12]
 4602              	.L307:
 4603              	.LBE193:
 4604              	.LBE192:
 4605              		.loc 1 3022 2 discriminator 1
 4606 0022 FEE7     		b	.L307
 4607              	.L306:
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4608              		.loc 1 3031 43
 4609 0024 074B     		ldr	r3, .L308
 4610 0026 1B68     		ldr	r3, [r3]
 4611              		.loc 1 3031 2
 4612 0028 1833     		adds	r3, r3, #24
 4613 002a 1946     		mov	r1, r3
 4614 002c 7868     		ldr	r0, [r7, #4]
 4615 002e FFF7FEFF 		bl	vListInsert
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4616              		.loc 1 3033 2
 4617 0032 0121     		movs	r1, #1
 4618 0034 3868     		ldr	r0, [r7]
 4619 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4620              		.loc 1 3034 1
 4621 003a 00BF     		nop
 4622 003c 1037     		adds	r7, r7, #16
 4623              	.LCFI167:
 4624              		.cfi_def_cfa_offset 8
 4625 003e BD46     		mov	sp, r7
 4626              	.LCFI168:
 4627              		.cfi_def_cfa_register 13
 4628              		@ sp needed
 4629 0040 80BD     		pop	{r7, pc}
 4630              	.L309:
 4631 0042 00BF     		.align	2
 4632              	.L308:
 4633 0044 00000000 		.word	pxCurrentTCB
 4634              		.cfi_endproc
 4635              	.LFE39:
 4637              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 4638              		.align	1
 4639              		.global	vTaskPlaceOnUnorderedEventList
 4640              		.syntax unified
 4641              		.thumb
ARM GAS  /tmp/ccQcdK8x.s 			page 139


 4642              		.thumb_func
 4643              		.fpu fpv4-sp-d16
 4645              	vTaskPlaceOnUnorderedEventList:
 4646              	.LFB40:
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4647              		.loc 1 3038 1
 4648              		.cfi_startproc
 4649              		@ args = 0, pretend = 0, frame = 24
 4650              		@ frame_needed = 1, uses_anonymous_args = 0
 4651 0000 80B5     		push	{r7, lr}
 4652              	.LCFI169:
 4653              		.cfi_def_cfa_offset 8
 4654              		.cfi_offset 7, -8
 4655              		.cfi_offset 14, -4
 4656 0002 86B0     		sub	sp, sp, #24
 4657              	.LCFI170:
 4658              		.cfi_def_cfa_offset 32
 4659 0004 00AF     		add	r7, sp, #0
 4660              	.LCFI171:
 4661              		.cfi_def_cfa_register 7
 4662 0006 F860     		str	r0, [r7, #12]
 4663 0008 B960     		str	r1, [r7, #8]
 4664 000a 7A60     		str	r2, [r7, #4]
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 4665              		.loc 1 3039 2
 4666 000c FB68     		ldr	r3, [r7, #12]
 4667 000e 002B     		cmp	r3, #0
 4668 0010 09D1     		bne	.L311
 4669              	.LBB194:
 4670              	.LBB195:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4671              		.loc 2 195 2 discriminator 1
 4672              		.syntax unified
 4673              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4674 0012 4FF05003 			mov r3, #80												
 4675 0016 83F31188 		msr basepri, r3											
 4676 001a BFF36F8F 		isb														
 4677 001e BFF34F8F 		dsb														
 4678              	
 4679              	@ 0 "" 2
 4680              		.thumb
 4681              		.syntax unified
 4682 0022 7B61     		str	r3, [r7, #20]
 4683              	.L312:
 4684              	.LBE195:
 4685              	.LBE194:
 4686              		.loc 1 3039 2 discriminator 1
 4687 0024 FEE7     		b	.L312
 4688              	.L311:
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
 4689              		.loc 1 3043 2
ARM GAS  /tmp/ccQcdK8x.s 			page 140


 4690 0026 114B     		ldr	r3, .L315
 4691 0028 1B68     		ldr	r3, [r3]
 4692 002a 002B     		cmp	r3, #0
 4693 002c 09D1     		bne	.L313
 4694              	.LBB196:
 4695              	.LBB197:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4696              		.loc 2 195 2 discriminator 1
 4697              		.syntax unified
 4698              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4699 002e 4FF05003 			mov r3, #80												
 4700 0032 83F31188 		msr basepri, r3											
 4701 0036 BFF36F8F 		isb														
 4702 003a BFF34F8F 		dsb														
 4703              	
 4704              	@ 0 "" 2
 4705              		.thumb
 4706              		.syntax unified
 4707 003e 3B61     		str	r3, [r7, #16]
 4708              	.L314:
 4709              	.LBE197:
 4710              	.LBE196:
 4711              		.loc 1 3043 2 discriminator 2
 4712 0040 FEE7     		b	.L314
 4713              	.L313:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
 4714              		.loc 1 3048 2
 4715 0042 0B4B     		ldr	r3, .L315+4
 4716 0044 1B68     		ldr	r3, [r3]
 4717 0046 BA68     		ldr	r2, [r7, #8]
 4718 0048 42F00042 		orr	r2, r2, #-2147483648
 4719 004c 9A61     		str	r2, [r3, #24]
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4720              		.loc 1 3055 46
 4721 004e 084B     		ldr	r3, .L315+4
 4722 0050 1B68     		ldr	r3, [r3]
 4723              		.loc 1 3055 2
 4724 0052 1833     		adds	r3, r3, #24
 4725 0054 1946     		mov	r1, r3
 4726 0056 F868     		ldr	r0, [r7, #12]
 4727 0058 FFF7FEFF 		bl	vListInsertEnd
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 4728              		.loc 1 3057 2
 4729 005c 0121     		movs	r1, #1
 4730 005e 7868     		ldr	r0, [r7, #4]
 4731 0060 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
ARM GAS  /tmp/ccQcdK8x.s 			page 141


3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4732              		.loc 1 3058 1
 4733 0064 00BF     		nop
 4734 0066 1837     		adds	r7, r7, #24
 4735              	.LCFI172:
 4736              		.cfi_def_cfa_offset 8
 4737 0068 BD46     		mov	sp, r7
 4738              	.LCFI173:
 4739              		.cfi_def_cfa_register 13
 4740              		@ sp needed
 4741 006a 80BD     		pop	{r7, pc}
 4742              	.L316:
 4743              		.align	2
 4744              	.L315:
 4745 006c 00000000 		.word	uxSchedulerSuspended
 4746 0070 00000000 		.word	pxCurrentTCB
 4747              		.cfi_endproc
 4748              	.LFE40:
 4750              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 4751              		.align	1
 4752              		.global	vTaskPlaceOnEventListRestricted
 4753              		.syntax unified
 4754              		.thumb
 4755              		.thumb_func
 4756              		.fpu fpv4-sp-d16
 4758              	vTaskPlaceOnEventListRestricted:
 4759              	.LFB41:
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 4760              		.loc 1 3064 2
 4761              		.cfi_startproc
 4762              		@ args = 0, pretend = 0, frame = 24
 4763              		@ frame_needed = 1, uses_anonymous_args = 0
 4764 0000 80B5     		push	{r7, lr}
 4765              	.LCFI174:
 4766              		.cfi_def_cfa_offset 8
 4767              		.cfi_offset 7, -8
 4768              		.cfi_offset 14, -4
 4769 0002 86B0     		sub	sp, sp, #24
 4770              	.LCFI175:
 4771              		.cfi_def_cfa_offset 32
 4772 0004 00AF     		add	r7, sp, #0
 4773              	.LCFI176:
 4774              		.cfi_def_cfa_register 7
 4775 0006 F860     		str	r0, [r7, #12]
 4776 0008 B960     		str	r1, [r7, #8]
 4777 000a 7A60     		str	r2, [r7, #4]
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 4778              		.loc 1 3065 3
 4779 000c FB68     		ldr	r3, [r7, #12]
 4780 000e 002B     		cmp	r3, #0
 4781 0010 09D1     		bne	.L318
 4782              	.LBB198:
ARM GAS  /tmp/ccQcdK8x.s 			page 142


 4783              	.LBB199:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4784              		.loc 2 195 2 discriminator 1
 4785              		.syntax unified
 4786              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4787 0012 4FF05003 			mov r3, #80												
 4788 0016 83F31188 		msr basepri, r3											
 4789 001a BFF36F8F 		isb														
 4790 001e BFF34F8F 		dsb														
 4791              	
 4792              	@ 0 "" 2
 4793              		.thumb
 4794              		.syntax unified
 4795 0022 7B61     		str	r3, [r7, #20]
 4796              	.L319:
 4797              	.LBE199:
 4798              	.LBE198:
 4799              		.loc 1 3065 3 discriminator 1
 4800 0024 FEE7     		b	.L319
 4801              	.L318:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 4802              		.loc 1 3077 47
 4803 0026 0A4B     		ldr	r3, .L321
 4804 0028 1B68     		ldr	r3, [r3]
 4805              		.loc 1 3077 3
 4806 002a 1833     		adds	r3, r3, #24
 4807 002c 1946     		mov	r1, r3
 4808 002e F868     		ldr	r0, [r7, #12]
 4809 0030 FFF7FEFF 		bl	vListInsertEnd
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
 4810              		.loc 1 3082 5
 4811 0034 7B68     		ldr	r3, [r7, #4]
 4812 0036 002B     		cmp	r3, #0
 4813 0038 02D0     		beq	.L320
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
 4814              		.loc 1 3084 17
 4815 003a 4FF0FF33 		mov	r3, #-1
 4816 003e BB60     		str	r3, [r7, #8]
 4817              	.L320:
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 143


3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 4818              		.loc 1 3088 3
 4819 0040 7968     		ldr	r1, [r7, #4]
 4820 0042 B868     		ldr	r0, [r7, #8]
 4821 0044 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 4822              		.loc 1 3089 2
 4823 0048 00BF     		nop
 4824 004a 1837     		adds	r7, r7, #24
 4825              	.LCFI177:
 4826              		.cfi_def_cfa_offset 8
 4827 004c BD46     		mov	sp, r7
 4828              	.LCFI178:
 4829              		.cfi_def_cfa_register 13
 4830              		@ sp needed
 4831 004e 80BD     		pop	{r7, pc}
 4832              	.L322:
 4833              		.align	2
 4834              	.L321:
 4835 0050 00000000 		.word	pxCurrentTCB
 4836              		.cfi_endproc
 4837              	.LFE41:
 4839              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 4840              		.align	1
 4841              		.global	xTaskRemoveFromEventList
 4842              		.syntax unified
 4843              		.thumb
 4844              		.thumb_func
 4845              		.fpu fpv4-sp-d16
 4847              	xTaskRemoveFromEventList:
 4848              	.LFB42:
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 4849              		.loc 1 3095 1
 4850              		.cfi_startproc
 4851              		@ args = 0, pretend = 0, frame = 24
 4852              		@ frame_needed = 1, uses_anonymous_args = 0
 4853 0000 80B5     		push	{r7, lr}
 4854              	.LCFI179:
 4855              		.cfi_def_cfa_offset 8
 4856              		.cfi_offset 7, -8
 4857              		.cfi_offset 14, -4
 4858 0002 86B0     		sub	sp, sp, #24
 4859              	.LCFI180:
 4860              		.cfi_def_cfa_offset 32
 4861 0004 00AF     		add	r7, sp, #0
 4862              	.LCFI181:
 4863              		.cfi_def_cfa_register 7
 4864 0006 7860     		str	r0, [r7, #4]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 144


3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this 
 4865              		.loc 1 3112 19
 4866 0008 7B68     		ldr	r3, [r7, #4]
 4867 000a DB68     		ldr	r3, [r3, #12]
 4868              		.loc 1 3112 17
 4869 000c DB68     		ldr	r3, [r3, #12]
 4870 000e 3B61     		str	r3, [r7, #16]
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 4871              		.loc 1 3113 2
 4872 0010 3B69     		ldr	r3, [r7, #16]
 4873 0012 002B     		cmp	r3, #0
 4874 0014 09D1     		bne	.L324
 4875              	.LBB200:
 4876              	.LBB201:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4877              		.loc 2 195 2 discriminator 1
 4878              		.syntax unified
 4879              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4880 0016 4FF05003 			mov r3, #80												
 4881 001a 83F31188 		msr basepri, r3											
 4882 001e BFF36F8F 		isb														
 4883 0022 BFF34F8F 		dsb														
 4884              	
 4885              	@ 0 "" 2
 4886              		.thumb
 4887              		.syntax unified
 4888 0026 FB60     		str	r3, [r7, #12]
 4889              	.L325:
 4890              	.LBE201:
 4891              	.LBE200:
 4892              		.loc 1 3113 2 discriminator 1
 4893 0028 FEE7     		b	.L325
 4894              	.L324:
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 4895              		.loc 1 3114 11
 4896 002a 3B69     		ldr	r3, [r7, #16]
 4897 002c 1833     		adds	r3, r3, #24
 4898 002e 1846     		mov	r0, r3
 4899 0030 FFF7FEFF 		bl	uxListRemove
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 4900              		.loc 1 3116 27
 4901 0034 1D4B     		ldr	r3, .L332
 4902 0036 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQcdK8x.s 			page 145


 4903              		.loc 1 3116 4
 4904 0038 002B     		cmp	r3, #0
 4905 003a 1DD1     		bne	.L326
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 4906              		.loc 1 3118 12
 4907 003c 3B69     		ldr	r3, [r7, #16]
 4908 003e 0433     		adds	r3, r3, #4
 4909 0040 1846     		mov	r0, r3
 4910 0042 FFF7FEFF 		bl	uxListRemove
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 4911              		.loc 1 3119 3
 4912 0046 3B69     		ldr	r3, [r7, #16]
 4913 0048 DA6A     		ldr	r2, [r3, #44]
 4914 004a 194B     		ldr	r3, .L332+4
 4915 004c 1B68     		ldr	r3, [r3]
 4916 004e 9A42     		cmp	r2, r3
 4917 0050 03D9     		bls	.L327
 4918              		.loc 1 3119 3 is_stmt 0 discriminator 1
 4919 0052 3B69     		ldr	r3, [r7, #16]
 4920 0054 DB6A     		ldr	r3, [r3, #44]
 4921 0056 164A     		ldr	r2, .L332+4
 4922 0058 1360     		str	r3, [r2]
 4923              	.L327:
 4924              		.loc 1 3119 3 discriminator 3
 4925 005a 3B69     		ldr	r3, [r7, #16]
 4926 005c DA6A     		ldr	r2, [r3, #44]
 4927 005e 1346     		mov	r3, r2
 4928 0060 9B00     		lsls	r3, r3, #2
 4929 0062 1344     		add	r3, r3, r2
 4930 0064 9B00     		lsls	r3, r3, #2
 4931 0066 134A     		ldr	r2, .L332+8
 4932 0068 1A44     		add	r2, r2, r3
 4933 006a 3B69     		ldr	r3, [r7, #16]
 4934 006c 0433     		adds	r3, r3, #4
 4935 006e 1946     		mov	r1, r3
 4936 0070 1046     		mov	r0, r2
 4937 0072 FFF7FEFF 		bl	vListInsertEnd
 4938 0076 05E0     		b	.L328
 4939              	.L326:
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TICKLESS_IDLE != 0 )
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			might be set to the blocked task's time out time.  If the task is
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked for a reason other than a timeout xNextTaskUnblockTime is
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			normally left unchanged, because it is automatically reset to a new
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			value when the tick count equals xNextTaskUnblockTime.  However if
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			tickless idling is used it might be more important to enter sleep mode
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			at the earliest possible time - so reset xNextTaskUnblockTime here to
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ensure it is updated at the earliest possible time. */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvResetNextTaskUnblockTime();
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccQcdK8x.s 			page 146


3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 4940              		.loc 1 3139 3 is_stmt 1
 4941 0078 3B69     		ldr	r3, [r7, #16]
 4942 007a 1833     		adds	r3, r3, #24
 4943 007c 1946     		mov	r1, r3
 4944 007e 0E48     		ldr	r0, .L332+12
 4945 0080 FFF7FEFF 		bl	vListInsertEnd
 4946              	.L328:
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 4947              		.loc 1 3142 20
 4948 0084 3B69     		ldr	r3, [r7, #16]
 4949 0086 DA6A     		ldr	r2, [r3, #44]
 4950              		.loc 1 3142 47
 4951 0088 0C4B     		ldr	r3, .L332+16
 4952 008a 1B68     		ldr	r3, [r3]
 4953 008c DB6A     		ldr	r3, [r3, #44]
 4954              		.loc 1 3142 4
 4955 008e 9A42     		cmp	r2, r3
 4956 0090 05D9     		bls	.L329
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
 4957              		.loc 1 3147 11
 4958 0092 0123     		movs	r3, #1
 4959 0094 7B61     		str	r3, [r7, #20]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 4960              		.loc 1 3151 17
 4961 0096 0A4B     		ldr	r3, .L332+20
 4962 0098 0122     		movs	r2, #1
 4963 009a 1A60     		str	r2, [r3]
 4964 009c 01E0     		b	.L330
 4965              	.L329:
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
 4966              		.loc 1 3155 11
 4967 009e 0023     		movs	r3, #0
 4968 00a0 7B61     		str	r3, [r7, #20]
 4969              	.L330:
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 4970              		.loc 1 3158 9
 4971 00a2 7B69     		ldr	r3, [r7, #20]
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4972              		.loc 1 3159 1
 4973 00a4 1846     		mov	r0, r3
ARM GAS  /tmp/ccQcdK8x.s 			page 147


 4974 00a6 1837     		adds	r7, r7, #24
 4975              	.LCFI182:
 4976              		.cfi_def_cfa_offset 8
 4977 00a8 BD46     		mov	sp, r7
 4978              	.LCFI183:
 4979              		.cfi_def_cfa_register 13
 4980              		@ sp needed
 4981 00aa 80BD     		pop	{r7, pc}
 4982              	.L333:
 4983              		.align	2
 4984              	.L332:
 4985 00ac 00000000 		.word	uxSchedulerSuspended
 4986 00b0 00000000 		.word	uxTopReadyPriority
 4987 00b4 00000000 		.word	pxReadyTasksLists
 4988 00b8 00000000 		.word	xPendingReadyList
 4989 00bc 00000000 		.word	pxCurrentTCB
 4990 00c0 00000000 		.word	xYieldPending
 4991              		.cfi_endproc
 4992              	.LFE42:
 4994              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 4995              		.align	1
 4996              		.global	vTaskRemoveFromUnorderedEventList
 4997              		.syntax unified
 4998              		.thumb
 4999              		.thumb_func
 5000              		.fpu fpv4-sp-d16
 5002              	vTaskRemoveFromUnorderedEventList:
 5003              	.LFB43:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5004              		.loc 1 3163 1
 5005              		.cfi_startproc
 5006              		@ args = 0, pretend = 0, frame = 24
 5007              		@ frame_needed = 1, uses_anonymous_args = 0
 5008 0000 80B5     		push	{r7, lr}
 5009              	.LCFI184:
 5010              		.cfi_def_cfa_offset 8
 5011              		.cfi_offset 7, -8
 5012              		.cfi_offset 14, -4
 5013 0002 86B0     		sub	sp, sp, #24
 5014              	.LCFI185:
 5015              		.cfi_def_cfa_offset 32
 5016 0004 00AF     		add	r7, sp, #0
 5017              	.LCFI186:
 5018              		.cfi_def_cfa_register 7
 5019 0006 7860     		str	r0, [r7, #4]
 5020 0008 3960     		str	r1, [r7]
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
 5021              		.loc 1 3168 2
 5022 000a 284B     		ldr	r3, .L342
 5023 000c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQcdK8x.s 			page 148


 5024 000e 002B     		cmp	r3, #0
 5025 0010 09D1     		bne	.L335
 5026              	.LBB202:
 5027              	.LBB203:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5028              		.loc 2 195 2 discriminator 1
 5029              		.syntax unified
 5030              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5031 0012 4FF05003 			mov r3, #80												
 5032 0016 83F31188 		msr basepri, r3											
 5033 001a BFF36F8F 		isb														
 5034 001e BFF34F8F 		dsb														
 5035              	
 5036              	@ 0 "" 2
 5037              		.thumb
 5038              		.syntax unified
 5039 0022 3B61     		str	r3, [r7, #16]
 5040              	.L336:
 5041              	.LBE203:
 5042              	.LBE202:
 5043              		.loc 1 3168 2 discriminator 1
 5044 0024 FEE7     		b	.L336
 5045              	.L335:
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 5046              		.loc 1 3171 2
 5047 0026 3B68     		ldr	r3, [r7]
 5048 0028 43F00042 		orr	r2, r3, #-2147483648
 5049 002c 7B68     		ldr	r3, [r7, #4]
 5050 002e 1A60     		str	r2, [r3]
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this 
 5051              		.loc 1 3175 17
 5052 0030 7B68     		ldr	r3, [r7, #4]
 5053 0032 DB68     		ldr	r3, [r3, #12]
 5054 0034 7B61     		str	r3, [r7, #20]
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 5055              		.loc 1 3176 2
 5056 0036 7B69     		ldr	r3, [r7, #20]
 5057 0038 002B     		cmp	r3, #0
 5058 003a 09D1     		bne	.L337
 5059              	.LBB204:
 5060              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5061              		.loc 2 195 2 discriminator 1
 5062              		.syntax unified
 5063              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5064 003c 4FF05003 			mov r3, #80												
 5065 0040 83F31188 		msr basepri, r3											
 5066 0044 BFF36F8F 		isb														
 5067 0048 BFF34F8F 		dsb														
 5068              	
 5069              	@ 0 "" 2
 5070              		.thumb
ARM GAS  /tmp/ccQcdK8x.s 			page 149


 5071              		.syntax unified
 5072 004c FB60     		str	r3, [r7, #12]
 5073              	.L338:
 5074              	.LBE205:
 5075              	.LBE204:
 5076              		.loc 1 3176 2 discriminator 2
 5077 004e FEE7     		b	.L338
 5078              	.L337:
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 5079              		.loc 1 3177 11
 5080 0050 7868     		ldr	r0, [r7, #4]
 5081 0052 FFF7FEFF 		bl	uxListRemove
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 5082              		.loc 1 3182 11
 5083 0056 7B69     		ldr	r3, [r7, #20]
 5084 0058 0433     		adds	r3, r3, #4
 5085 005a 1846     		mov	r0, r3
 5086 005c FFF7FEFF 		bl	uxListRemove
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 5087              		.loc 1 3183 2
 5088 0060 7B69     		ldr	r3, [r7, #20]
 5089 0062 DA6A     		ldr	r2, [r3, #44]
 5090 0064 124B     		ldr	r3, .L342+4
 5091 0066 1B68     		ldr	r3, [r3]
 5092 0068 9A42     		cmp	r2, r3
 5093 006a 03D9     		bls	.L339
 5094              		.loc 1 3183 2 is_stmt 0 discriminator 1
 5095 006c 7B69     		ldr	r3, [r7, #20]
 5096 006e DB6A     		ldr	r3, [r3, #44]
 5097 0070 0F4A     		ldr	r2, .L342+4
 5098 0072 1360     		str	r3, [r2]
 5099              	.L339:
 5100              		.loc 1 3183 2 discriminator 3
 5101 0074 7B69     		ldr	r3, [r7, #20]
 5102 0076 DA6A     		ldr	r2, [r3, #44]
 5103 0078 1346     		mov	r3, r2
 5104 007a 9B00     		lsls	r3, r3, #2
 5105 007c 1344     		add	r3, r3, r2
 5106 007e 9B00     		lsls	r3, r3, #2
 5107 0080 0C4A     		ldr	r2, .L342+8
 5108 0082 1A44     		add	r2, r2, r3
 5109 0084 7B69     		ldr	r3, [r7, #20]
 5110 0086 0433     		adds	r3, r3, #4
 5111 0088 1946     		mov	r1, r3
 5112 008a 1046     		mov	r0, r2
 5113 008c FFF7FEFF 		bl	vListInsertEnd
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 5114              		.loc 1 3185 20 is_stmt 1 discriminator 3
 5115 0090 7B69     		ldr	r3, [r7, #20]
 5116 0092 DA6A     		ldr	r2, [r3, #44]
 5117              		.loc 1 3185 47 discriminator 3
 5118 0094 084B     		ldr	r3, .L342+12
ARM GAS  /tmp/ccQcdK8x.s 			page 150


 5119 0096 1B68     		ldr	r3, [r3]
 5120 0098 DB6A     		ldr	r3, [r3, #44]
 5121              		.loc 1 3185 4 discriminator 3
 5122 009a 9A42     		cmp	r2, r3
 5123 009c 02D9     		bls	.L341
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
 5124              		.loc 1 3191 17
 5125 009e 074B     		ldr	r3, .L342+16
 5126 00a0 0122     		movs	r2, #1
 5127 00a2 1A60     		str	r2, [r3]
 5128              	.L341:
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5129              		.loc 1 3193 1
 5130 00a4 00BF     		nop
 5131 00a6 1837     		adds	r7, r7, #24
 5132              	.LCFI187:
 5133              		.cfi_def_cfa_offset 8
 5134 00a8 BD46     		mov	sp, r7
 5135              	.LCFI188:
 5136              		.cfi_def_cfa_register 13
 5137              		@ sp needed
 5138 00aa 80BD     		pop	{r7, pc}
 5139              	.L343:
 5140              		.align	2
 5141              	.L342:
 5142 00ac 00000000 		.word	uxSchedulerSuspended
 5143 00b0 00000000 		.word	uxTopReadyPriority
 5144 00b4 00000000 		.word	pxReadyTasksLists
 5145 00b8 00000000 		.word	pxCurrentTCB
 5146 00bc 00000000 		.word	xYieldPending
 5147              		.cfi_endproc
 5148              	.LFE43:
 5150              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 5151              		.align	1
 5152              		.global	vTaskSetTimeOutState
 5153              		.syntax unified
 5154              		.thumb
 5155              		.thumb_func
 5156              		.fpu fpv4-sp-d16
 5158              	vTaskSetTimeOutState:
 5159              	.LFB44:
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5160              		.loc 1 3197 1
 5161              		.cfi_startproc
 5162              		@ args = 0, pretend = 0, frame = 16
 5163              		@ frame_needed = 1, uses_anonymous_args = 0
 5164 0000 80B5     		push	{r7, lr}
 5165              	.LCFI189:
ARM GAS  /tmp/ccQcdK8x.s 			page 151


 5166              		.cfi_def_cfa_offset 8
 5167              		.cfi_offset 7, -8
 5168              		.cfi_offset 14, -4
 5169 0002 84B0     		sub	sp, sp, #16
 5170              	.LCFI190:
 5171              		.cfi_def_cfa_offset 24
 5172 0004 00AF     		add	r7, sp, #0
 5173              	.LCFI191:
 5174              		.cfi_def_cfa_register 7
 5175 0006 7860     		str	r0, [r7, #4]
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 5176              		.loc 1 3198 2
 5177 0008 7B68     		ldr	r3, [r7, #4]
 5178 000a 002B     		cmp	r3, #0
 5179 000c 09D1     		bne	.L345
 5180              	.LBB206:
 5181              	.LBB207:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5182              		.loc 2 195 2 discriminator 1
 5183              		.syntax unified
 5184              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5185 000e 4FF05003 			mov r3, #80												
 5186 0012 83F31188 		msr basepri, r3											
 5187 0016 BFF36F8F 		isb														
 5188 001a BFF34F8F 		dsb														
 5189              	
 5190              	@ 0 "" 2
 5191              		.thumb
 5192              		.syntax unified
 5193 001e FB60     		str	r3, [r7, #12]
 5194              	.L346:
 5195              	.LBE207:
 5196              	.LBE206:
 5197              		.loc 1 3198 2 discriminator 1
 5198 0020 FEE7     		b	.L346
 5199              	.L345:
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5200              		.loc 1 3199 2
 5201 0022 FFF7FEFF 		bl	vPortEnterCritical
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
 5202              		.loc 1 3201 29
 5203 0026 074B     		ldr	r3, .L347
 5204 0028 1A68     		ldr	r2, [r3]
 5205 002a 7B68     		ldr	r3, [r7, #4]
 5206 002c 1A60     		str	r2, [r3]
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 5207              		.loc 1 3202 30
 5208 002e 064B     		ldr	r3, .L347+4
 5209 0030 1A68     		ldr	r2, [r3]
 5210 0032 7B68     		ldr	r3, [r7, #4]
 5211 0034 5A60     		str	r2, [r3, #4]
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 5212              		.loc 1 3204 2
 5213 0036 FFF7FEFF 		bl	vPortExitCritical
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  /tmp/ccQcdK8x.s 			page 152


 5214              		.loc 1 3205 1
 5215 003a 00BF     		nop
 5216 003c 1037     		adds	r7, r7, #16
 5217              	.LCFI192:
 5218              		.cfi_def_cfa_offset 8
 5219 003e BD46     		mov	sp, r7
 5220              	.LCFI193:
 5221              		.cfi_def_cfa_register 13
 5222              		@ sp needed
 5223 0040 80BD     		pop	{r7, pc}
 5224              	.L348:
 5225 0042 00BF     		.align	2
 5226              	.L347:
 5227 0044 00000000 		.word	xNumOfOverflows
 5228 0048 00000000 		.word	xTickCount
 5229              		.cfi_endproc
 5230              	.LFE44:
 5232              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 5233              		.align	1
 5234              		.global	vTaskInternalSetTimeOutState
 5235              		.syntax unified
 5236              		.thumb
 5237              		.thumb_func
 5238              		.fpu fpv4-sp-d16
 5240              	vTaskInternalSetTimeOutState:
 5241              	.LFB45:
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5242              		.loc 1 3209 1
 5243              		.cfi_startproc
 5244              		@ args = 0, pretend = 0, frame = 8
 5245              		@ frame_needed = 1, uses_anonymous_args = 0
 5246              		@ link register save eliminated.
 5247 0000 80B4     		push	{r7}
 5248              	.LCFI194:
 5249              		.cfi_def_cfa_offset 4
 5250              		.cfi_offset 7, -4
 5251 0002 83B0     		sub	sp, sp, #12
 5252              	.LCFI195:
 5253              		.cfi_def_cfa_offset 16
 5254 0004 00AF     		add	r7, sp, #0
 5255              	.LCFI196:
 5256              		.cfi_def_cfa_register 7
 5257 0006 7860     		str	r0, [r7, #4]
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 5258              		.loc 1 3211 28
 5259 0008 064B     		ldr	r3, .L350
 5260 000a 1A68     		ldr	r2, [r3]
 5261 000c 7B68     		ldr	r3, [r7, #4]
 5262 000e 1A60     		str	r2, [r3]
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 5263              		.loc 1 3212 29
 5264 0010 054B     		ldr	r3, .L350+4
 5265 0012 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccQcdK8x.s 			page 153


 5266 0014 7B68     		ldr	r3, [r7, #4]
 5267 0016 5A60     		str	r2, [r3, #4]
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5268              		.loc 1 3213 1
 5269 0018 00BF     		nop
 5270 001a 0C37     		adds	r7, r7, #12
 5271              	.LCFI197:
 5272              		.cfi_def_cfa_offset 4
 5273 001c BD46     		mov	sp, r7
 5274              	.LCFI198:
 5275              		.cfi_def_cfa_register 13
 5276              		@ sp needed
 5277 001e 5DF8047B 		ldr	r7, [sp], #4
 5278              	.LCFI199:
 5279              		.cfi_restore 7
 5280              		.cfi_def_cfa_offset 0
 5281 0022 7047     		bx	lr
 5282              	.L351:
 5283              		.align	2
 5284              	.L350:
 5285 0024 00000000 		.word	xNumOfOverflows
 5286 0028 00000000 		.word	xTickCount
 5287              		.cfi_endproc
 5288              	.LFE45:
 5290              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 5291              		.align	1
 5292              		.global	xTaskCheckForTimeOut
 5293              		.syntax unified
 5294              		.thumb
 5295              		.thumb_func
 5296              		.fpu fpv4-sp-d16
 5298              	xTaskCheckForTimeOut:
 5299              	.LFB46:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5300              		.loc 1 3217 1
 5301              		.cfi_startproc
 5302              		@ args = 0, pretend = 0, frame = 32
 5303              		@ frame_needed = 1, uses_anonymous_args = 0
 5304 0000 80B5     		push	{r7, lr}
 5305              	.LCFI200:
 5306              		.cfi_def_cfa_offset 8
 5307              		.cfi_offset 7, -8
 5308              		.cfi_offset 14, -4
 5309 0002 88B0     		sub	sp, sp, #32
 5310              	.LCFI201:
 5311              		.cfi_def_cfa_offset 40
 5312 0004 00AF     		add	r7, sp, #0
 5313              	.LCFI202:
 5314              		.cfi_def_cfa_register 7
 5315 0006 7860     		str	r0, [r7, #4]
 5316 0008 3960     		str	r1, [r7]
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
ARM GAS  /tmp/ccQcdK8x.s 			page 154


 5317              		.loc 1 3220 2
 5318 000a 7B68     		ldr	r3, [r7, #4]
 5319 000c 002B     		cmp	r3, #0
 5320 000e 09D1     		bne	.L353
 5321              	.LBB208:
 5322              	.LBB209:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5323              		.loc 2 195 2 discriminator 1
 5324              		.syntax unified
 5325              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5326 0010 4FF05003 			mov r3, #80												
 5327 0014 83F31188 		msr basepri, r3											
 5328 0018 BFF36F8F 		isb														
 5329 001c BFF34F8F 		dsb														
 5330              	
 5331              	@ 0 "" 2
 5332              		.thumb
 5333              		.syntax unified
 5334 0020 3B61     		str	r3, [r7, #16]
 5335              	.L354:
 5336              	.LBE209:
 5337              	.LBE208:
 5338              		.loc 1 3220 2 discriminator 1
 5339 0022 FEE7     		b	.L354
 5340              	.L353:
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 5341              		.loc 1 3221 2
 5342 0024 3B68     		ldr	r3, [r7]
 5343 0026 002B     		cmp	r3, #0
 5344 0028 09D1     		bne	.L355
 5345              	.LBB210:
 5346              	.LBB211:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5347              		.loc 2 195 2 discriminator 1
 5348              		.syntax unified
 5349              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5350 002a 4FF05003 			mov r3, #80												
 5351 002e 83F31188 		msr basepri, r3											
 5352 0032 BFF36F8F 		isb														
 5353 0036 BFF34F8F 		dsb														
 5354              	
 5355              	@ 0 "" 2
 5356              		.thumb
 5357              		.syntax unified
 5358 003a FB60     		str	r3, [r7, #12]
 5359              	.L356:
 5360              	.LBE211:
 5361              	.LBE210:
 5362              		.loc 1 3221 2 discriminator 2
 5363 003c FEE7     		b	.L356
 5364              	.L355:
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 5365              		.loc 1 3223 2
 5366 003e FFF7FEFF 		bl	vPortEnterCritical
 5367              	.LBB212:
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccQcdK8x.s 			page 155


3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
 5368              		.loc 1 3226 20
 5369 0042 1D4B     		ldr	r3, .L362
 5370 0044 1B68     		ldr	r3, [r3]
 5371 0046 BB61     		str	r3, [r7, #24]
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 5372              		.loc 1 3227 62
 5373 0048 7B68     		ldr	r3, [r7, #4]
 5374 004a 5B68     		ldr	r3, [r3, #4]
 5375              		.loc 1 3227 20
 5376 004c BA69     		ldr	r2, [r7, #24]
 5377 004e D31A     		subs	r3, r2, r3
 5378 0050 7B61     		str	r3, [r7, #20]
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
 5379              		.loc 1 3241 8
 5380 0052 3B68     		ldr	r3, [r7]
 5381 0054 1B68     		ldr	r3, [r3]
 5382              		.loc 1 3241 6
 5383 0056 B3F1FF3F 		cmp	r3, #-1
 5384 005a 02D1     		bne	.L357
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 5385              		.loc 1 3246 13
 5386 005c 0023     		movs	r3, #0
 5387 005e FB61     		str	r3, [r7, #28]
 5388 0060 23E0     		b	.L358
 5389              	.L357:
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
 5390              		.loc 1 3251 37
 5391 0062 7B68     		ldr	r3, [r7, #4]
 5392 0064 1A68     		ldr	r2, [r3]
 5393              		.loc 1 3251 25
 5394 0066 154B     		ldr	r3, .L362+4
 5395 0068 1B68     		ldr	r3, [r3]
 5396              		.loc 1 3251 5
 5397 006a 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccQcdK8x.s 			page 156


 5398 006c 07D0     		beq	.L359
 5399              		.loc 1 3251 89 discriminator 1
 5400 006e 7B68     		ldr	r3, [r7, #4]
 5401 0070 5B68     		ldr	r3, [r3, #4]
 5402              		.loc 1 3251 56 discriminator 1
 5403 0072 BA69     		ldr	r2, [r7, #24]
 5404 0074 9A42     		cmp	r2, r3
 5405 0076 02D3     		bcc	.L359
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5406              		.loc 1 3258 12
 5407 0078 0123     		movs	r3, #1
 5408 007a FB61     		str	r3, [r7, #28]
 5409 007c 15E0     		b	.L358
 5410              	.L359:
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
 5411              		.loc 1 3260 27
 5412 007e 3B68     		ldr	r3, [r7]
 5413 0080 1B68     		ldr	r3, [r3]
 5414              		.loc 1 3260 10
 5415 0082 7A69     		ldr	r2, [r7, #20]
 5416 0084 9A42     		cmp	r2, r3
 5417 0086 0BD2     		bcs	.L360
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
 5418              		.loc 1 3263 19
 5419 0088 3B68     		ldr	r3, [r7]
 5420 008a 1A68     		ldr	r2, [r3]
 5421 008c 7B69     		ldr	r3, [r7, #20]
 5422 008e D21A     		subs	r2, r2, r3
 5423 0090 3B68     		ldr	r3, [r7]
 5424 0092 1A60     		str	r2, [r3]
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 5425              		.loc 1 3264 4
 5426 0094 7868     		ldr	r0, [r7, #4]
 5427 0096 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 5428              		.loc 1 3265 12
 5429 009a 0023     		movs	r3, #0
 5430 009c FB61     		str	r3, [r7, #28]
 5431 009e 04E0     		b	.L358
 5432              	.L360:
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
 5433              		.loc 1 3269 19
 5434 00a0 3B68     		ldr	r3, [r7]
 5435 00a2 0022     		movs	r2, #0
 5436 00a4 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccQcdK8x.s 			page 157


3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 5437              		.loc 1 3270 12
 5438 00a6 0123     		movs	r3, #1
 5439 00a8 FB61     		str	r3, [r7, #28]
 5440              	.L358:
 5441              	.LBE212:
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
 5442              		.loc 1 3273 2
 5443 00aa FFF7FEFF 		bl	vPortExitCritical
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
 5444              		.loc 1 3275 9
 5445 00ae FB69     		ldr	r3, [r7, #28]
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5446              		.loc 1 3276 1
 5447 00b0 1846     		mov	r0, r3
 5448 00b2 2037     		adds	r7, r7, #32
 5449              	.LCFI203:
 5450              		.cfi_def_cfa_offset 8
 5451 00b4 BD46     		mov	sp, r7
 5452              	.LCFI204:
 5453              		.cfi_def_cfa_register 13
 5454              		@ sp needed
 5455 00b6 80BD     		pop	{r7, pc}
 5456              	.L363:
 5457              		.align	2
 5458              	.L362:
 5459 00b8 00000000 		.word	xTickCount
 5460 00bc 00000000 		.word	xNumOfOverflows
 5461              		.cfi_endproc
 5462              	.LFE46:
 5464              		.section	.text.vTaskMissedYield,"ax",%progbits
 5465              		.align	1
 5466              		.global	vTaskMissedYield
 5467              		.syntax unified
 5468              		.thumb
 5469              		.thumb_func
 5470              		.fpu fpv4-sp-d16
 5472              	vTaskMissedYield:
 5473              	.LFB47:
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5474              		.loc 1 3280 1
 5475              		.cfi_startproc
 5476              		@ args = 0, pretend = 0, frame = 0
 5477              		@ frame_needed = 1, uses_anonymous_args = 0
 5478              		@ link register save eliminated.
 5479 0000 80B4     		push	{r7}
 5480              	.LCFI205:
 5481              		.cfi_def_cfa_offset 4
 5482              		.cfi_offset 7, -4
 5483 0002 00AF     		add	r7, sp, #0
 5484              	.LCFI206:
ARM GAS  /tmp/ccQcdK8x.s 			page 158


 5485              		.cfi_def_cfa_register 7
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 5486              		.loc 1 3281 16
 5487 0004 034B     		ldr	r3, .L365
 5488 0006 0122     		movs	r2, #1
 5489 0008 1A60     		str	r2, [r3]
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5490              		.loc 1 3282 1
 5491 000a 00BF     		nop
 5492 000c BD46     		mov	sp, r7
 5493              	.LCFI207:
 5494              		.cfi_def_cfa_register 13
 5495              		@ sp needed
 5496 000e 5DF8047B 		ldr	r7, [sp], #4
 5497              	.LCFI208:
 5498              		.cfi_restore 7
 5499              		.cfi_def_cfa_offset 0
 5500 0012 7047     		bx	lr
 5501              	.L366:
 5502              		.align	2
 5503              	.L365:
 5504 0014 00000000 		.word	xYieldPending
 5505              		.cfi_endproc
 5506              	.LFE47:
 5508              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 5509              		.align	1
 5510              		.global	uxTaskGetTaskNumber
 5511              		.syntax unified
 5512              		.thumb
 5513              		.thumb_func
 5514              		.fpu fpv4-sp-d16
 5516              	uxTaskGetTaskNumber:
 5517              	.LFB48:
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5518              		.loc 1 3288 2
 5519              		.cfi_startproc
 5520              		@ args = 0, pretend = 0, frame = 16
 5521              		@ frame_needed = 1, uses_anonymous_args = 0
 5522              		@ link register save eliminated.
 5523 0000 80B4     		push	{r7}
 5524              	.LCFI209:
 5525              		.cfi_def_cfa_offset 4
 5526              		.cfi_offset 7, -4
 5527 0002 85B0     		sub	sp, sp, #20
 5528              	.LCFI210:
 5529              		.cfi_def_cfa_offset 24
 5530 0004 00AF     		add	r7, sp, #0
 5531              	.LCFI211:
 5532              		.cfi_def_cfa_register 7
 5533 0006 7860     		str	r0, [r7, #4]
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t const *pxTCB;
ARM GAS  /tmp/ccQcdK8x.s 			page 159


3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5534              		.loc 1 3292 5
 5535 0008 7B68     		ldr	r3, [r7, #4]
 5536 000a 002B     		cmp	r3, #0
 5537 000c 05D0     		beq	.L368
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5538              		.loc 1 3294 10
 5539 000e 7B68     		ldr	r3, [r7, #4]
 5540 0010 BB60     		str	r3, [r7, #8]
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
 5541              		.loc 1 3295 13
 5542 0012 BB68     		ldr	r3, [r7, #8]
 5543 0014 9B6C     		ldr	r3, [r3, #72]
 5544 0016 FB60     		str	r3, [r7, #12]
 5545 0018 01E0     		b	.L369
 5546              	.L368:
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
 5547              		.loc 1 3299 13
 5548 001a 0023     		movs	r3, #0
 5549 001c FB60     		str	r3, [r7, #12]
 5550              	.L369:
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 5551              		.loc 1 3302 10
 5552 001e FB68     		ldr	r3, [r7, #12]
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5553              		.loc 1 3303 2
 5554 0020 1846     		mov	r0, r3
 5555 0022 1437     		adds	r7, r7, #20
 5556              	.LCFI212:
 5557              		.cfi_def_cfa_offset 4
 5558 0024 BD46     		mov	sp, r7
 5559              	.LCFI213:
 5560              		.cfi_def_cfa_register 13
 5561              		@ sp needed
 5562 0026 5DF8047B 		ldr	r7, [sp], #4
 5563              	.LCFI214:
 5564              		.cfi_restore 7
 5565              		.cfi_def_cfa_offset 0
 5566 002a 7047     		bx	lr
 5567              		.cfi_endproc
 5568              	.LFE48:
 5570              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 5571              		.align	1
 5572              		.global	vTaskSetTaskNumber
 5573              		.syntax unified
 5574              		.thumb
 5575              		.thumb_func
 5576              		.fpu fpv4-sp-d16
 5578              	vTaskSetTaskNumber:
 5579              	.LFB49:
ARM GAS  /tmp/ccQcdK8x.s 			page 160


3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5580              		.loc 1 3311 2
 5581              		.cfi_startproc
 5582              		@ args = 0, pretend = 0, frame = 16
 5583              		@ frame_needed = 1, uses_anonymous_args = 0
 5584              		@ link register save eliminated.
 5585 0000 80B4     		push	{r7}
 5586              	.LCFI215:
 5587              		.cfi_def_cfa_offset 4
 5588              		.cfi_offset 7, -4
 5589 0002 85B0     		sub	sp, sp, #20
 5590              	.LCFI216:
 5591              		.cfi_def_cfa_offset 24
 5592 0004 00AF     		add	r7, sp, #0
 5593              	.LCFI217:
 5594              		.cfi_def_cfa_register 7
 5595 0006 7860     		str	r0, [r7, #4]
 5596 0008 3960     		str	r1, [r7]
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
 5597              		.loc 1 3314 5
 5598 000a 7B68     		ldr	r3, [r7, #4]
 5599 000c 002B     		cmp	r3, #0
 5600 000e 04D0     		beq	.L373
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = xTask;
 5601              		.loc 1 3316 10
 5602 0010 7B68     		ldr	r3, [r7, #4]
 5603 0012 FB60     		str	r3, [r7, #12]
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
 5604              		.loc 1 3317 24
 5605 0014 FB68     		ldr	r3, [r7, #12]
 5606 0016 3A68     		ldr	r2, [r7]
 5607 0018 9A64     		str	r2, [r3, #72]
 5608              	.L373:
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5609              		.loc 1 3319 2
 5610 001a 00BF     		nop
 5611 001c 1437     		adds	r7, r7, #20
 5612              	.LCFI218:
 5613              		.cfi_def_cfa_offset 4
 5614 001e BD46     		mov	sp, r7
 5615              	.LCFI219:
 5616              		.cfi_def_cfa_register 13
 5617              		@ sp needed
 5618 0020 5DF8047B 		ldr	r7, [sp], #4
 5619              	.LCFI220:
 5620              		.cfi_restore 7
ARM GAS  /tmp/ccQcdK8x.s 			page 161


 5621              		.cfi_def_cfa_offset 0
 5622 0024 7047     		bx	lr
 5623              		.cfi_endproc
 5624              	.LFE49:
 5626              		.section	.text.prvIdleTask,"ax",%progbits
 5627              		.align	1
 5628              		.syntax unified
 5629              		.thumb
 5630              		.thumb_func
 5631              		.fpu fpv4-sp-d16
 5633              	prvIdleTask:
 5634              	.LFB50:
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5635              		.loc 1 3335 1
 5636              		.cfi_startproc
 5637              		@ args = 0, pretend = 0, frame = 8
 5638              		@ frame_needed = 1, uses_anonymous_args = 0
 5639 0000 80B5     		push	{r7, lr}
 5640              	.LCFI221:
 5641              		.cfi_def_cfa_offset 8
 5642              		.cfi_offset 7, -8
 5643              		.cfi_offset 14, -4
 5644 0002 82B0     		sub	sp, sp, #8
 5645              	.LCFI222:
 5646              		.cfi_def_cfa_offset 16
 5647 0004 00AF     		add	r7, sp, #0
 5648              	.LCFI223:
 5649              		.cfi_def_cfa_register 7
 5650 0006 7860     		str	r0, [r7, #4]
 5651              	.L376:
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portALLOCATE_SECURE_CONTEXT( configMINIMAL_SECURE_STACK_SIZE );
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
ARM GAS  /tmp/ccQcdK8x.s 			page 162


3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
 5652              		.loc 1 3351 3
 5653 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 5654              		.loc 1 3374 8
 5655 000c 064B     		ldr	r3, .L377
 5656 000e 1B68     		ldr	r3, [r3]
 5657              		.loc 1 3374 6
 5658 0010 012B     		cmp	r3, #1
 5659 0012 F9D9     		bls	.L376
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
 5660              		.loc 1 3376 5
 5661 0014 054B     		ldr	r3, .L377+4
 5662 0016 4FF08052 		mov	r2, #268435456
 5663 001a 1A60     		str	r2, [r3]
 5664              		.syntax unified
 5665              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5666 001c BFF34F8F 		dsb
 5667              	@ 0 "" 2
 5668              	@ 3376 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5669 0020 BFF36F8F 		isb
 5670              	@ 0 "" 2
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5671              		.loc 1 3351 3
 5672              		.thumb
 5673              		.syntax unified
 5674 0024 F0E7     		b	.L376
 5675              	.L378:
 5676 0026 00BF     		.align	2
 5677              	.L377:
 5678 0028 00000000 		.word	pxReadyTasksLists
ARM GAS  /tmp/ccQcdK8x.s 			page 163


 5679 002c 04ED00E0 		.word	-536810236
 5680              		.cfi_endproc
 5681              	.LFE50:
 5683              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 5684              		.align	1
 5685              		.syntax unified
 5686              		.thumb
 5687              		.thumb_func
 5688              		.fpu fpv4-sp-d16
 5690              	prvInitialiseTaskLists:
 5691              	.LFB51:
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 164


3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
ARM GAS  /tmp/ccQcdK8x.s 			page 165


3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
ARM GAS  /tmp/ccQcdK8x.s 			page 166


3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5692              		.loc 1 3547 1
 5693              		.cfi_startproc
 5694              		@ args = 0, pretend = 0, frame = 8
 5695              		@ frame_needed = 1, uses_anonymous_args = 0
 5696 0000 80B5     		push	{r7, lr}
 5697              	.LCFI224:
 5698              		.cfi_def_cfa_offset 8
 5699              		.cfi_offset 7, -8
 5700              		.cfi_offset 14, -4
 5701 0002 82B0     		sub	sp, sp, #8
 5702              	.LCFI225:
 5703              		.cfi_def_cfa_offset 16
 5704 0004 00AF     		add	r7, sp, #0
 5705              	.LCFI226:
 5706              		.cfi_def_cfa_register 7
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
 5707              		.loc 1 3550 18
 5708 0006 0023     		movs	r3, #0
 5709 0008 7B60     		str	r3, [r7, #4]
 5710              		.loc 1 3550 2
 5711 000a 0CE0     		b	.L380
 5712              	.L381:
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 5713              		.loc 1 3552 3 discriminator 3
 5714 000c 7A68     		ldr	r2, [r7, #4]
 5715 000e 1346     		mov	r3, r2
 5716 0010 9B00     		lsls	r3, r3, #2
 5717 0012 1344     		add	r3, r3, r2
 5718 0014 9B00     		lsls	r3, r3, #2
 5719 0016 124A     		ldr	r2, .L382
 5720 0018 1344     		add	r3, r3, r2
 5721 001a 1846     		mov	r0, r3
 5722 001c FFF7FEFF 		bl	vListInitialise
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5723              		.loc 1 3550 101 discriminator 3
 5724 0020 7B68     		ldr	r3, [r7, #4]
 5725 0022 0133     		adds	r3, r3, #1
 5726 0024 7B60     		str	r3, [r7, #4]
 5727              	.L380:
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5728              		.loc 1 3550 2 discriminator 1
 5729 0026 7B68     		ldr	r3, [r7, #4]
 5730 0028 372B     		cmp	r3, #55
ARM GAS  /tmp/ccQcdK8x.s 			page 167


 5731 002a EFD9     		bls	.L381
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
 5732              		.loc 1 3555 2
 5733 002c 0D48     		ldr	r0, .L382+4
 5734 002e FFF7FEFF 		bl	vListInitialise
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 5735              		.loc 1 3556 2
 5736 0032 0D48     		ldr	r0, .L382+8
 5737 0034 FFF7FEFF 		bl	vListInitialise
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 5738              		.loc 1 3557 2
 5739 0038 0C48     		ldr	r0, .L382+12
 5740 003a FFF7FEFF 		bl	vListInitialise
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
 5741              		.loc 1 3561 3
 5742 003e 0C48     		ldr	r0, .L382+16
 5743 0040 FFF7FEFF 		bl	vListInitialise
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
 5744              		.loc 1 3567 3
 5745 0044 0B48     		ldr	r0, .L382+20
 5746 0046 FFF7FEFF 		bl	vListInitialise
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
 5747              		.loc 1 3573 20
 5748 004a 0B4B     		ldr	r3, .L382+24
 5749 004c 054A     		ldr	r2, .L382+4
 5750 004e 1A60     		str	r2, [r3]
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 5751              		.loc 1 3574 28
 5752 0050 0A4B     		ldr	r3, .L382+28
 5753 0052 054A     		ldr	r2, .L382+8
 5754 0054 1A60     		str	r2, [r3]
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5755              		.loc 1 3575 1
 5756 0056 00BF     		nop
 5757 0058 0837     		adds	r7, r7, #8
 5758              	.LCFI227:
 5759              		.cfi_def_cfa_offset 8
 5760 005a BD46     		mov	sp, r7
 5761              	.LCFI228:
 5762              		.cfi_def_cfa_register 13
 5763              		@ sp needed
 5764 005c 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccQcdK8x.s 			page 168


 5765              	.L383:
 5766 005e 00BF     		.align	2
 5767              	.L382:
 5768 0060 00000000 		.word	pxReadyTasksLists
 5769 0064 00000000 		.word	xDelayedTaskList1
 5770 0068 00000000 		.word	xDelayedTaskList2
 5771 006c 00000000 		.word	xPendingReadyList
 5772 0070 00000000 		.word	xTasksWaitingTermination
 5773 0074 00000000 		.word	xSuspendedTaskList
 5774 0078 00000000 		.word	pxDelayedTaskList
 5775 007c 00000000 		.word	pxOverflowDelayedTaskList
 5776              		.cfi_endproc
 5777              	.LFE51:
 5779              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 5780              		.align	1
 5781              		.syntax unified
 5782              		.thumb
 5783              		.thumb_func
 5784              		.fpu fpv4-sp-d16
 5786              	prvCheckTasksWaitingTermination:
 5787              	.LFB52:
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 5788              		.loc 1 3579 1
 5789              		.cfi_startproc
 5790              		@ args = 0, pretend = 0, frame = 8
 5791              		@ frame_needed = 1, uses_anonymous_args = 0
 5792 0000 80B5     		push	{r7, lr}
 5793              	.LCFI229:
 5794              		.cfi_def_cfa_offset 8
 5795              		.cfi_offset 7, -8
 5796              		.cfi_offset 14, -4
 5797 0002 82B0     		sub	sp, sp, #8
 5798              	.LCFI230:
 5799              		.cfi_def_cfa_offset 16
 5800 0004 00AF     		add	r7, sp, #0
 5801              	.LCFI231:
 5802              		.cfi_def_cfa_register 7
 5803              	.LBB213:
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 5804              		.loc 1 3589 8
 5805 0006 19E0     		b	.L385
 5806              	.L386:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
 5807              		.loc 1 3591 4
ARM GAS  /tmp/ccQcdK8x.s 			page 169


 5808 0008 FFF7FEFF 		bl	vPortEnterCritical
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is u
 5809              		.loc 1 3593 13
 5810 000c 0F4B     		ldr	r3, .L387
 5811 000e DB68     		ldr	r3, [r3, #12]
 5812              		.loc 1 3593 11
 5813 0010 DB68     		ldr	r3, [r3, #12]
 5814 0012 7B60     		str	r3, [r7, #4]
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 5815              		.loc 1 3594 14
 5816 0014 7B68     		ldr	r3, [r7, #4]
 5817 0016 0433     		adds	r3, r3, #4
 5818 0018 1846     		mov	r0, r3
 5819 001a FFF7FEFF 		bl	uxListRemove
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 5820              		.loc 1 3595 5
 5821 001e 0C4B     		ldr	r3, .L387+4
 5822 0020 1B68     		ldr	r3, [r3]
 5823 0022 013B     		subs	r3, r3, #1
 5824 0024 0A4A     		ldr	r2, .L387+4
 5825 0026 1360     		str	r3, [r2]
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 5826              		.loc 1 3596 5
 5827 0028 0A4B     		ldr	r3, .L387+8
 5828 002a 1B68     		ldr	r3, [r3]
 5829 002c 013B     		subs	r3, r3, #1
 5830 002e 094A     		ldr	r2, .L387+8
 5831 0030 1360     		str	r3, [r2]
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
 5832              		.loc 1 3598 4
 5833 0032 FFF7FEFF 		bl	vPortExitCritical
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
 5834              		.loc 1 3600 4
 5835 0036 7868     		ldr	r0, [r7, #4]
 5836 0038 FFF7FEFF 		bl	prvDeleteTCB
 5837              	.L385:
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5838              		.loc 1 3589 39
 5839 003c 054B     		ldr	r3, .L387+8
 5840 003e 1B68     		ldr	r3, [r3]
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5841              		.loc 1 3589 8
 5842 0040 002B     		cmp	r3, #0
 5843 0042 E1D1     		bne	.L386
 5844              	.LBE213:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 5845              		.loc 1 3604 1
 5846 0044 00BF     		nop
 5847 0046 0837     		adds	r7, r7, #8
 5848              	.LCFI232:
 5849              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccQcdK8x.s 			page 170


 5850 0048 BD46     		mov	sp, r7
 5851              	.LCFI233:
 5852              		.cfi_def_cfa_register 13
 5853              		@ sp needed
 5854 004a 80BD     		pop	{r7, pc}
 5855              	.L388:
 5856              		.align	2
 5857              	.L387:
 5858 004c 00000000 		.word	xTasksWaitingTermination
 5859 0050 00000000 		.word	uxCurrentNumberOfTasks
 5860 0054 00000000 		.word	uxDeletedTasksWaitingCleanUp
 5861              		.cfi_endproc
 5862              	.LFE52:
 5864              		.section	.text.vTaskGetInfo,"ax",%progbits
 5865              		.align	1
 5866              		.global	vTaskGetInfo
 5867              		.syntax unified
 5868              		.thumb
 5869              		.thumb_func
 5870              		.fpu fpv4-sp-d16
 5872              	vTaskGetInfo:
 5873              	.LFB53:
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 5874              		.loc 1 3610 2
 5875              		.cfi_startproc
 5876              		@ args = 0, pretend = 0, frame = 24
 5877              		@ frame_needed = 1, uses_anonymous_args = 0
 5878 0000 80B5     		push	{r7, lr}
 5879              	.LCFI234:
 5880              		.cfi_def_cfa_offset 8
 5881              		.cfi_offset 7, -8
 5882              		.cfi_offset 14, -4
 5883 0002 86B0     		sub	sp, sp, #24
 5884              	.LCFI235:
 5885              		.cfi_def_cfa_offset 32
 5886 0004 00AF     		add	r7, sp, #0
 5887              	.LCFI236:
 5888              		.cfi_def_cfa_register 7
 5889 0006 F860     		str	r0, [r7, #12]
 5890 0008 B960     		str	r1, [r7, #8]
 5891 000a 7A60     		str	r2, [r7, #4]
 5892 000c FB70     		strb	r3, [r7, #3]
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 5893              		.loc 1 3614 11
 5894 000e FB68     		ldr	r3, [r7, #12]
 5895 0010 002B     		cmp	r3, #0
 5896 0012 02D1     		bne	.L390
 5897              		.loc 1 3614 11 is_stmt 0 discriminator 1
 5898 0014 2C4B     		ldr	r3, .L400
ARM GAS  /tmp/ccQcdK8x.s 			page 171


 5899 0016 1B68     		ldr	r3, [r3]
 5900 0018 00E0     		b	.L391
 5901              	.L390:
 5902              		.loc 1 3614 11 discriminator 2
 5903 001a FB68     		ldr	r3, [r7, #12]
 5904              	.L391:
 5905              		.loc 1 3614 9 is_stmt 1 discriminator 4
 5906 001c 7B61     		str	r3, [r7, #20]
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 5907              		.loc 1 3616 25 discriminator 4
 5908 001e BB68     		ldr	r3, [r7, #8]
 5909 0020 7A69     		ldr	r2, [r7, #20]
 5910 0022 1A60     		str	r2, [r3]
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 5911              		.loc 1 3617 47 discriminator 4
 5912 0024 7B69     		ldr	r3, [r7, #20]
 5913 0026 03F13402 		add	r2, r3, #52
 5914              		.loc 1 3617 28 discriminator 4
 5915 002a BB68     		ldr	r3, [r7, #8]
 5916 002c 5A60     		str	r2, [r3, #4]
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 5917              		.loc 1 3618 42 discriminator 4
 5918 002e 7B69     		ldr	r3, [r7, #20]
 5919 0030 DA6A     		ldr	r2, [r3, #44]
 5920              		.loc 1 3618 35 discriminator 4
 5921 0032 BB68     		ldr	r3, [r7, #8]
 5922 0034 1A61     		str	r2, [r3, #16]
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 5923              		.loc 1 3619 36 discriminator 4
 5924 0036 7B69     		ldr	r3, [r7, #20]
 5925 0038 1A6B     		ldr	r2, [r3, #48]
 5926              		.loc 1 3619 29 discriminator 4
 5927 003a BB68     		ldr	r3, [r7, #8]
 5928 003c DA61     		str	r2, [r3, #28]
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 5929              		.loc 1 3620 36 discriminator 4
 5930 003e 7B69     		ldr	r3, [r7, #20]
 5931 0040 5A6C     		ldr	r2, [r3, #68]
 5932              		.loc 1 3620 29 discriminator 4
 5933 0042 BB68     		ldr	r3, [r7, #8]
 5934 0044 9A60     		str	r2, [r3, #8]
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 5935              		.loc 1 3624 40 discriminator 4
 5936 0046 7B69     		ldr	r3, [r7, #20]
 5937 0048 DA6C     		ldr	r2, [r3, #76]
 5938              		.loc 1 3624 33 discriminator 4
 5939 004a BB68     		ldr	r3, [r7, #8]
 5940 004c 5A61     		str	r2, [r3, #20]
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccQcdK8x.s 			page 172


3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
 5941              		.loc 1 3638 35 discriminator 4
 5942 004e BB68     		ldr	r3, [r7, #8]
 5943 0050 0022     		movs	r2, #0
 5944 0052 9A61     		str	r2, [r3, #24]
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
 5945              		.loc 1 3645 5 discriminator 4
 5946 0054 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5947 0056 052B     		cmp	r3, #5
 5948 0058 1AD0     		beq	.L392
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
 5949              		.loc 1 3647 14
 5950 005a 1B4B     		ldr	r3, .L400
 5951 005c 1B68     		ldr	r3, [r3]
 5952              		.loc 1 3647 6
 5953 005e 7A69     		ldr	r2, [r7, #20]
 5954 0060 9A42     		cmp	r2, r3
 5955 0062 03D1     		bne	.L393
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
 5956              		.loc 1 3649 33
 5957 0064 BB68     		ldr	r3, [r7, #8]
 5958 0066 0022     		movs	r2, #0
 5959 0068 1A73     		strb	r2, [r3, #12]
 5960 006a 18E0     		b	.L396
 5961              	.L393:
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
 5962              		.loc 1 3653 33
 5963 006c BB68     		ldr	r3, [r7, #8]
 5964 006e FA78     		ldrb	r2, [r7, #3]
 5965 0070 1A73     		strb	r2, [r3, #12]
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
 5966              		.loc 1 3660 8
ARM GAS  /tmp/ccQcdK8x.s 			page 173


 5967 0072 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 5968 0074 032B     		cmp	r3, #3
 5969 0076 12D1     		bne	.L396
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
 5970              		.loc 1 3662 7
 5971 0078 FFF7FEFF 		bl	vTaskSuspendAll
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 5972              		.loc 1 3664 12
 5973 007c 7B69     		ldr	r3, [r7, #20]
 5974 007e 9B6A     		ldr	r3, [r3, #40]
 5975              		.loc 1 3664 10
 5976 0080 002B     		cmp	r3, #0
 5977 0082 02D0     		beq	.L395
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
 5978              		.loc 1 3666 37
 5979 0084 BB68     		ldr	r3, [r7, #8]
 5980 0086 0222     		movs	r2, #2
 5981 0088 1A73     		strb	r2, [r3, #12]
 5982              	.L395:
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
 5983              		.loc 1 3669 16
 5984 008a FFF7FEFF 		bl	xTaskResumeAll
 5985 008e 06E0     		b	.L396
 5986              	.L392:
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 5987              		.loc 1 3677 34
 5988 0090 7869     		ldr	r0, [r7, #20]
 5989 0092 FFF7FEFF 		bl	eTaskGetState
 5990 0096 0346     		mov	r3, r0
 5991 0098 1A46     		mov	r2, r3
 5992              		.loc 1 3677 32
 5993 009a BB68     		ldr	r3, [r7, #8]
 5994 009c 1A73     		strb	r2, [r3, #12]
 5995              	.L396:
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
 5996              		.loc 1 3682 5
 5997 009e 7B68     		ldr	r3, [r7, #4]
 5998 00a0 002B     		cmp	r3, #0
 5999 00a2 09D0     		beq	.L397
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
ARM GAS  /tmp/ccQcdK8x.s 			page 174


3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
 6000              		.loc 1 3690 89
 6001 00a4 7B69     		ldr	r3, [r7, #20]
 6002 00a6 1B6B     		ldr	r3, [r3, #48]
 6003              		.loc 1 3690 42
 6004 00a8 1846     		mov	r0, r3
 6005 00aa FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 6006 00ae 0346     		mov	r3, r0
 6007 00b0 1A46     		mov	r2, r3
 6008              		.loc 1 3690 40
 6009 00b2 BB68     		ldr	r3, [r7, #8]
 6010 00b4 1A84     		strh	r2, [r3, #32]	@ movhi
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6011              		.loc 1 3698 2
 6012 00b6 02E0     		b	.L399
 6013              	.L397:
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 6014              		.loc 1 3696 39
 6015 00b8 BB68     		ldr	r3, [r7, #8]
 6016 00ba 0022     		movs	r2, #0
 6017 00bc 1A84     		strh	r2, [r3, #32]	@ movhi
 6018              	.L399:
 6019              		.loc 1 3698 2
 6020 00be 00BF     		nop
 6021 00c0 1837     		adds	r7, r7, #24
 6022              	.LCFI237:
 6023              		.cfi_def_cfa_offset 8
 6024 00c2 BD46     		mov	sp, r7
 6025              	.LCFI238:
 6026              		.cfi_def_cfa_register 13
 6027              		@ sp needed
 6028 00c4 80BD     		pop	{r7, pc}
 6029              	.L401:
 6030 00c6 00BF     		.align	2
 6031              	.L400:
 6032 00c8 00000000 		.word	pxCurrentTCB
 6033              		.cfi_endproc
 6034              	.LFE53:
 6036              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 6037              		.align	1
 6038              		.syntax unified
 6039              		.thumb
 6040              		.thumb_func
 6041              		.fpu fpv4-sp-d16
 6043              	prvListTasksWithinSingleList:
ARM GAS  /tmp/ccQcdK8x.s 			page 175


 6044              	.LFB54:
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6045              		.loc 1 3706 2
 6046              		.cfi_startproc
 6047              		@ args = 0, pretend = 0, frame = 40
 6048              		@ frame_needed = 1, uses_anonymous_args = 0
 6049 0000 80B5     		push	{r7, lr}
 6050              	.LCFI239:
 6051              		.cfi_def_cfa_offset 8
 6052              		.cfi_offset 7, -8
 6053              		.cfi_offset 14, -4
 6054 0002 8AB0     		sub	sp, sp, #40
 6055              	.LCFI240:
 6056              		.cfi_def_cfa_offset 48
 6057 0004 00AF     		add	r7, sp, #0
 6058              	.LCFI241:
 6059              		.cfi_def_cfa_register 7
 6060 0006 F860     		str	r0, [r7, #12]
 6061 0008 B960     		str	r1, [r7, #8]
 6062 000a 1346     		mov	r3, r2
 6063 000c FB71     		strb	r3, [r7, #7]
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
 6064              		.loc 1 3708 14
 6065 000e 0023     		movs	r3, #0
 6066 0010 7B62     		str	r3, [r7, #36]
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 6067              		.loc 1 3710 7
 6068 0012 BB68     		ldr	r3, [r7, #8]
 6069 0014 1B68     		ldr	r3, [r3]
 6070              		.loc 1 3710 5
 6071 0016 002B     		cmp	r3, #0
 6072 0018 3FD0     		beq	.L403
 6073              	.LBB214:
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is
 6074              		.loc 1 3712 4
 6075 001a BB68     		ldr	r3, [r7, #8]
 6076 001c 3B62     		str	r3, [r7, #32]
 6077 001e 3B6A     		ldr	r3, [r7, #32]
 6078 0020 5B68     		ldr	r3, [r3, #4]
 6079 0022 5A68     		ldr	r2, [r3, #4]
 6080 0024 3B6A     		ldr	r3, [r7, #32]
 6081 0026 5A60     		str	r2, [r3, #4]
 6082 0028 3B6A     		ldr	r3, [r7, #32]
 6083 002a 5A68     		ldr	r2, [r3, #4]
 6084 002c 3B6A     		ldr	r3, [r7, #32]
 6085 002e 0833     		adds	r3, r3, #8
 6086 0030 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccQcdK8x.s 			page 176


 6087 0032 04D1     		bne	.L404
 6088              		.loc 1 3712 4 is_stmt 0 discriminator 1
 6089 0034 3B6A     		ldr	r3, [r7, #32]
 6090 0036 5B68     		ldr	r3, [r3, #4]
 6091 0038 5A68     		ldr	r2, [r3, #4]
 6092 003a 3B6A     		ldr	r3, [r7, #32]
 6093 003c 5A60     		str	r2, [r3, #4]
 6094              	.L404:
 6095              		.loc 1 3712 4 discriminator 3
 6096 003e 3B6A     		ldr	r3, [r7, #32]
 6097 0040 5B68     		ldr	r3, [r3, #4]
 6098 0042 DB68     		ldr	r3, [r3, #12]
 6099 0044 FB61     		str	r3, [r7, #28]
 6100              	.L406:
 6101              	.LBE214:
 6102              	.LBB215:
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is
 6103              		.loc 1 3720 5 is_stmt 1
 6104 0046 BB68     		ldr	r3, [r7, #8]
 6105 0048 BB61     		str	r3, [r7, #24]
 6106 004a BB69     		ldr	r3, [r7, #24]
 6107 004c 5B68     		ldr	r3, [r3, #4]
 6108 004e 5A68     		ldr	r2, [r3, #4]
 6109 0050 BB69     		ldr	r3, [r7, #24]
 6110 0052 5A60     		str	r2, [r3, #4]
 6111 0054 BB69     		ldr	r3, [r7, #24]
 6112 0056 5A68     		ldr	r2, [r3, #4]
 6113 0058 BB69     		ldr	r3, [r7, #24]
 6114 005a 0833     		adds	r3, r3, #8
 6115 005c 9A42     		cmp	r2, r3
 6116 005e 04D1     		bne	.L405
 6117              		.loc 1 3720 5 is_stmt 0 discriminator 1
 6118 0060 BB69     		ldr	r3, [r7, #24]
 6119 0062 5B68     		ldr	r3, [r3, #4]
 6120 0064 5A68     		ldr	r2, [r3, #4]
 6121 0066 BB69     		ldr	r3, [r7, #24]
 6122 0068 5A60     		str	r2, [r3, #4]
 6123              	.L405:
 6124              		.loc 1 3720 5 discriminator 3
 6125 006a BB69     		ldr	r3, [r7, #24]
 6126 006c 5B68     		ldr	r3, [r3, #4]
 6127 006e DB68     		ldr	r3, [r3, #12]
 6128 0070 7B61     		str	r3, [r7, #20]
 6129              	.LBE215:
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 6130              		.loc 1 3721 67 is_stmt 1 discriminator 3
 6131 0072 7A6A     		ldr	r2, [r7, #36]
 6132 0074 1346     		mov	r3, r2
 6133 0076 DB00     		lsls	r3, r3, #3
 6134 0078 1344     		add	r3, r3, r2
ARM GAS  /tmp/ccQcdK8x.s 			page 177


 6135 007a 9B00     		lsls	r3, r3, #2
 6136 007c 1A46     		mov	r2, r3
 6137              		.loc 1 3721 5 discriminator 3
 6138 007e FB68     		ldr	r3, [r7, #12]
 6139 0080 9918     		adds	r1, r3, r2
 6140 0082 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 6141 0084 0122     		movs	r2, #1
 6142 0086 7869     		ldr	r0, [r7, #20]
 6143 0088 FFF7FEFF 		bl	vTaskGetInfo
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 6144              		.loc 1 3722 11 discriminator 3
 6145 008c 7B6A     		ldr	r3, [r7, #36]
 6146 008e 0133     		adds	r3, r3, #1
 6147 0090 7B62     		str	r3, [r7, #36]
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 6148              		.loc 1 3723 4 discriminator 3
 6149 0092 7A69     		ldr	r2, [r7, #20]
 6150 0094 FB69     		ldr	r3, [r7, #28]
 6151 0096 9A42     		cmp	r2, r3
 6152 0098 D5D1     		bne	.L406
 6153              	.L403:
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
 6154              		.loc 1 3730 10
 6155 009a 7B6A     		ldr	r3, [r7, #36]
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6156              		.loc 1 3731 2
 6157 009c 1846     		mov	r0, r3
 6158 009e 2837     		adds	r7, r7, #40
 6159              	.LCFI242:
 6160              		.cfi_def_cfa_offset 8
 6161 00a0 BD46     		mov	sp, r7
 6162              	.LCFI243:
 6163              		.cfi_def_cfa_register 13
 6164              		@ sp needed
 6165 00a2 80BD     		pop	{r7, pc}
 6166              		.cfi_endproc
 6167              	.LFE54:
 6169              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 6170              		.align	1
 6171              		.syntax unified
 6172              		.thumb
 6173              		.thumb_func
 6174              		.fpu fpv4-sp-d16
 6176              	prvTaskCheckFreeStackSpace:
 6177              	.LFB55:
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUD
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 178


3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6178              		.loc 1 3739 2
 6179              		.cfi_startproc
 6180              		@ args = 0, pretend = 0, frame = 16
 6181              		@ frame_needed = 1, uses_anonymous_args = 0
 6182              		@ link register save eliminated.
 6183 0000 80B4     		push	{r7}
 6184              	.LCFI244:
 6185              		.cfi_def_cfa_offset 4
 6186              		.cfi_offset 7, -4
 6187 0002 85B0     		sub	sp, sp, #20
 6188              	.LCFI245:
 6189              		.cfi_def_cfa_offset 24
 6190 0004 00AF     		add	r7, sp, #0
 6191              	.LCFI246:
 6192              		.cfi_def_cfa_register 7
 6193 0006 7860     		str	r0, [r7, #4]
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 6194              		.loc 1 3740 11
 6195 0008 0023     		movs	r3, #0
 6196 000a FB60     		str	r3, [r7, #12]
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 6197              		.loc 1 3742 8
 6198 000c 05E0     		b	.L409
 6199              	.L410:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 6200              		.loc 1 3744 17
 6201 000e 7B68     		ldr	r3, [r7, #4]
 6202 0010 0133     		adds	r3, r3, #1
 6203 0012 7B60     		str	r3, [r7, #4]
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 6204              		.loc 1 3745 11
 6205 0014 FB68     		ldr	r3, [r7, #12]
 6206 0016 0133     		adds	r3, r3, #1
 6207 0018 FB60     		str	r3, [r7, #12]
 6208              	.L409:
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6209              		.loc 1 3742 10
 6210 001a 7B68     		ldr	r3, [r7, #4]
 6211 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6212              		.loc 1 3742 8
 6213 001e A52B     		cmp	r3, #165
 6214 0020 F5D0     		beq	.L410
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
 6215              		.loc 1 3748 11
 6216 0022 FB68     		ldr	r3, [r7, #12]
 6217 0024 9B08     		lsrs	r3, r3, #2
 6218 0026 FB60     		str	r3, [r7, #12]
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( configSTACK_DEPTH_TYPE ) ulCount;
 6219              		.loc 1 3750 10
ARM GAS  /tmp/ccQcdK8x.s 			page 179


 6220 0028 FB68     		ldr	r3, [r7, #12]
 6221 002a 9BB2     		uxth	r3, r3
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6222              		.loc 1 3751 2
 6223 002c 1846     		mov	r0, r3
 6224 002e 1437     		adds	r7, r7, #20
 6225              	.LCFI247:
 6226              		.cfi_def_cfa_offset 4
 6227 0030 BD46     		mov	sp, r7
 6228              	.LCFI248:
 6229              		.cfi_def_cfa_register 13
 6230              		@ sp needed
 6231 0032 5DF8047B 		ldr	r7, [sp], #4
 6232              	.LCFI249:
 6233              		.cfi_restore 7
 6234              		.cfi_def_cfa_offset 0
 6235 0036 7047     		bx	lr
 6236              		.cfi_endproc
 6237              	.LFE55:
 6239              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 6240              		.align	1
 6241              		.global	uxTaskGetStackHighWaterMark
 6242              		.syntax unified
 6243              		.thumb
 6244              		.thumb_func
 6245              		.fpu fpv4-sp-d16
 6247              	uxTaskGetStackHighWaterMark:
 6248              	.LFB56:
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 )
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are the
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	same except for their return type.  Using configSTACK_DEPTH_TYPE allows the
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	user to determine the return type.  It gets around the problem of the value
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	overflowing on 8-bit types without breaking backward compatibility for
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	applications that expect an 8-bit return type. */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxTaskGetStackHighWaterMark2( TaskHandle_t xTask )
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configSTACK_DEPTH_TYPE uxReturn;
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxTaskGetStackHighWaterMark() and uxTaskGetStackHighWaterMark2() are
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the same except for their return type.  Using configSTACK_DEPTH_TYPE
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		allows the user to determine the return type.  It gets around the
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		problem of the value overflowing on 8-bit types without breaking
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		backward compatibility for applications that expect an 8-bit return
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		type. */
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
ARM GAS  /tmp/ccQcdK8x.s 			page 180


3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = prvTaskCheckFreeStackSpace( pucEndOfStack );
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark2 */
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6249              		.loc 1 3799 2
 6250              		.cfi_startproc
 6251              		@ args = 0, pretend = 0, frame = 24
 6252              		@ frame_needed = 1, uses_anonymous_args = 0
 6253 0000 80B5     		push	{r7, lr}
 6254              	.LCFI250:
 6255              		.cfi_def_cfa_offset 8
 6256              		.cfi_offset 7, -8
 6257              		.cfi_offset 14, -4
 6258 0002 86B0     		sub	sp, sp, #24
 6259              	.LCFI251:
 6260              		.cfi_def_cfa_offset 32
 6261 0004 00AF     		add	r7, sp, #0
 6262              	.LCFI252:
 6263              		.cfi_def_cfa_register 7
 6264 0006 7860     		str	r0, [r7, #4]
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 6265              		.loc 1 3804 11
 6266 0008 7B68     		ldr	r3, [r7, #4]
 6267 000a 002B     		cmp	r3, #0
 6268 000c 02D1     		bne	.L413
 6269              		.loc 1 3804 11 is_stmt 0 discriminator 1
 6270 000e 094B     		ldr	r3, .L416
 6271 0010 1B68     		ldr	r3, [r3]
 6272 0012 00E0     		b	.L414
 6273              	.L413:
 6274              		.loc 1 3804 11 discriminator 2
 6275 0014 7B68     		ldr	r3, [r7, #4]
 6276              	.L414:
 6277              		.loc 1 3804 9 is_stmt 1 discriminator 4
 6278 0016 7B61     		str	r3, [r7, #20]
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccQcdK8x.s 			page 181


3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 6279              		.loc 1 3808 18 discriminator 4
 6280 0018 7B69     		ldr	r3, [r7, #20]
 6281 001a 1B6B     		ldr	r3, [r3, #48]
 6282 001c 3B61     		str	r3, [r7, #16]
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 6283              		.loc 1 3816 30 discriminator 4
 6284 001e 3869     		ldr	r0, [r7, #16]
 6285 0020 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 6286 0024 0346     		mov	r3, r0
 6287              		.loc 1 3816 12 discriminator 4
 6288 0026 FB60     		str	r3, [r7, #12]
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
 6289              		.loc 1 3818 10 discriminator 4
 6290 0028 FB68     		ldr	r3, [r7, #12]
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6291              		.loc 1 3819 2 discriminator 4
 6292 002a 1846     		mov	r0, r3
 6293 002c 1837     		adds	r7, r7, #24
 6294              	.LCFI253:
 6295              		.cfi_def_cfa_offset 8
 6296 002e BD46     		mov	sp, r7
 6297              	.LCFI254:
 6298              		.cfi_def_cfa_register 13
 6299              		@ sp needed
 6300 0030 80BD     		pop	{r7, pc}
 6301              	.L417:
 6302 0032 00BF     		.align	2
 6303              	.L416:
 6304 0034 00000000 		.word	pxCurrentTCB
 6305              		.cfi_endproc
 6306              	.LFE56:
 6308              		.section	.text.prvDeleteTCB,"ax",%progbits
 6309              		.align	1
 6310              		.syntax unified
 6311              		.thumb
 6312              		.thumb_func
 6313              		.fpu fpv4-sp-d16
 6315              	prvDeleteTCB:
 6316              	.LFB57:
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6317              		.loc 1 3827 2
ARM GAS  /tmp/ccQcdK8x.s 			page 182


 6318              		.cfi_startproc
 6319              		@ args = 0, pretend = 0, frame = 16
 6320              		@ frame_needed = 1, uses_anonymous_args = 0
 6321 0000 80B5     		push	{r7, lr}
 6322              	.LCFI255:
 6323              		.cfi_def_cfa_offset 8
 6324              		.cfi_offset 7, -8
 6325              		.cfi_offset 14, -4
 6326 0002 84B0     		sub	sp, sp, #16
 6327              	.LCFI256:
 6328              		.cfi_def_cfa_offset 24
 6329 0004 00AF     		add	r7, sp, #0
 6330              	.LCFI257:
 6331              		.cfi_def_cfa_register 7
 6332 0006 7860     		str	r0, [r7, #4]
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consol
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 6333              		.loc 1 3853 13
 6334 0008 7B68     		ldr	r3, [r7, #4]
 6335 000a 93F85D30 		ldrb	r3, [r3, #93]	@ zero_extendqisi2
 6336              		.loc 1 3853 6
 6337 000e 002B     		cmp	r3, #0
 6338 0010 08D1     		bne	.L419
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
 6339              		.loc 1 3857 21
 6340 0012 7B68     		ldr	r3, [r7, #4]
 6341 0014 1B6B     		ldr	r3, [r3, #48]
 6342              		.loc 1 3857 5
 6343 0016 1846     		mov	r0, r3
 6344 0018 FFF7FEFF 		bl	vPortFree
ARM GAS  /tmp/ccQcdK8x.s 			page 183


3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 6345              		.loc 1 3858 5
 6346 001c 7868     		ldr	r0, [r7, #4]
 6347 001e FFF7FEFF 		bl	vPortFree
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6348              		.loc 1 3875 2
 6349 0022 17E0     		b	.L423
 6350              	.L419:
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6351              		.loc 1 3860 18
 6352 0024 7B68     		ldr	r3, [r7, #4]
 6353 0026 93F85D30 		ldrb	r3, [r3, #93]	@ zero_extendqisi2
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6354              		.loc 1 3860 11
 6355 002a 012B     		cmp	r3, #1
 6356 002c 03D1     		bne	.L421
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6357              		.loc 1 3864 5
 6358 002e 7868     		ldr	r0, [r7, #4]
 6359 0030 FFF7FEFF 		bl	vPortFree
 6360              		.loc 1 3875 2
 6361 0034 0EE0     		b	.L423
 6362              	.L421:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 6363              		.loc 1 3870 5
 6364 0036 7B68     		ldr	r3, [r7, #4]
 6365 0038 93F85D30 		ldrb	r3, [r3, #93]	@ zero_extendqisi2
 6366 003c 022B     		cmp	r3, #2
 6367 003e 09D0     		beq	.L423
 6368              	.LBB216:
 6369              	.LBB217:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6370              		.loc 2 195 2 discriminator 1
 6371              		.syntax unified
 6372              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6373 0040 4FF05003 			mov r3, #80												
 6374 0044 83F31188 		msr basepri, r3											
 6375 0048 BFF36F8F 		isb														
 6376 004c BFF34F8F 		dsb														
 6377              	
 6378              	@ 0 "" 2
ARM GAS  /tmp/ccQcdK8x.s 			page 184


 6379              		.thumb
 6380              		.syntax unified
 6381 0050 FB60     		str	r3, [r7, #12]
 6382              	.L422:
 6383              	.LBE217:
 6384              	.LBE216:
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 6385              		.loc 1 3870 5 discriminator 1
 6386 0052 FEE7     		b	.L422
 6387              	.L423:
 6388              		.loc 1 3875 2
 6389 0054 00BF     		nop
 6390 0056 1037     		adds	r7, r7, #16
 6391              	.LCFI258:
 6392              		.cfi_def_cfa_offset 8
 6393 0058 BD46     		mov	sp, r7
 6394              	.LCFI259:
 6395              		.cfi_def_cfa_register 13
 6396              		@ sp needed
 6397 005a 80BD     		pop	{r7, pc}
 6398              		.cfi_endproc
 6399              	.LFE57:
 6401              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 6402              		.align	1
 6403              		.syntax unified
 6404              		.thumb
 6405              		.thumb_func
 6406              		.fpu fpv4-sp-d16
 6408              	prvResetNextTaskUnblockTime:
 6409              	.LFB58:
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 6410              		.loc 1 3881 1
 6411              		.cfi_startproc
 6412              		@ args = 0, pretend = 0, frame = 8
 6413              		@ frame_needed = 1, uses_anonymous_args = 0
 6414              		@ link register save eliminated.
 6415 0000 80B4     		push	{r7}
 6416              	.LCFI260:
 6417              		.cfi_def_cfa_offset 4
 6418              		.cfi_offset 7, -4
 6419 0002 83B0     		sub	sp, sp, #12
 6420              	.LCFI261:
 6421              		.cfi_def_cfa_offset 16
 6422 0004 00AF     		add	r7, sp, #0
 6423              	.LCFI262:
 6424              		.cfi_def_cfa_register 7
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 6425              		.loc 1 3884 6
 6426 0006 0C4B     		ldr	r3, .L428
 6427 0008 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQcdK8x.s 			page 185


 6428 000a 1B68     		ldr	r3, [r3]
 6429              		.loc 1 3884 4
 6430 000c 002B     		cmp	r3, #0
 6431 000e 04D1     		bne	.L425
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 6432              		.loc 1 3890 24
 6433 0010 0A4B     		ldr	r3, .L428+4
 6434 0012 4FF0FF32 		mov	r2, #-1
 6435 0016 1A60     		str	r2, [r3]
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as thi
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 6436              		.loc 1 3901 1
 6437 0018 08E0     		b	.L427
 6438              	.L425:
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 6439              		.loc 1 3898 15
 6440 001a 074B     		ldr	r3, .L428
 6441 001c 1B68     		ldr	r3, [r3]
 6442 001e DB68     		ldr	r3, [r3, #12]
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 6443              		.loc 1 3898 13
 6444 0020 DB68     		ldr	r3, [r3, #12]
 6445 0022 7B60     		str	r3, [r7, #4]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6446              		.loc 1 3899 26
 6447 0024 7B68     		ldr	r3, [r7, #4]
 6448 0026 5B68     		ldr	r3, [r3, #4]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6449              		.loc 1 3899 24
 6450 0028 044A     		ldr	r2, .L428+4
 6451 002a 1360     		str	r3, [r2]
 6452              	.L427:
 6453              		.loc 1 3901 1
 6454 002c 00BF     		nop
 6455 002e 0C37     		adds	r7, r7, #12
 6456              	.LCFI263:
 6457              		.cfi_def_cfa_offset 4
 6458 0030 BD46     		mov	sp, r7
 6459              	.LCFI264:
 6460              		.cfi_def_cfa_register 13
 6461              		@ sp needed
 6462 0032 5DF8047B 		ldr	r7, [sp], #4
 6463              	.LCFI265:
ARM GAS  /tmp/ccQcdK8x.s 			page 186


 6464              		.cfi_restore 7
 6465              		.cfi_def_cfa_offset 0
 6466 0036 7047     		bx	lr
 6467              	.L429:
 6468              		.align	2
 6469              	.L428:
 6470 0038 00000000 		.word	pxDelayedTaskList
 6471 003c 00000000 		.word	xNextTaskUnblockTime
 6472              		.cfi_endproc
 6473              	.LFE58:
 6475              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 6476              		.align	1
 6477              		.global	xTaskGetCurrentTaskHandle
 6478              		.syntax unified
 6479              		.thumb
 6480              		.thumb_func
 6481              		.fpu fpv4-sp-d16
 6483              	xTaskGetCurrentTaskHandle:
 6484              	.LFB59:
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6485              		.loc 1 3907 2
 6486              		.cfi_startproc
 6487              		@ args = 0, pretend = 0, frame = 8
 6488              		@ frame_needed = 1, uses_anonymous_args = 0
 6489              		@ link register save eliminated.
 6490 0000 80B4     		push	{r7}
 6491              	.LCFI266:
 6492              		.cfi_def_cfa_offset 4
 6493              		.cfi_offset 7, -4
 6494 0002 83B0     		sub	sp, sp, #12
 6495              	.LCFI267:
 6496              		.cfi_def_cfa_offset 16
 6497 0004 00AF     		add	r7, sp, #0
 6498              	.LCFI268:
 6499              		.cfi_def_cfa_register 7
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
 6500              		.loc 1 3913 11
 6501 0006 054B     		ldr	r3, .L432
 6502 0008 1B68     		ldr	r3, [r3]
 6503 000a 7B60     		str	r3, [r7, #4]
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6504              		.loc 1 3915 10
 6505 000c 7B68     		ldr	r3, [r7, #4]
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6506              		.loc 1 3916 2
 6507 000e 1846     		mov	r0, r3
ARM GAS  /tmp/ccQcdK8x.s 			page 187


 6508 0010 0C37     		adds	r7, r7, #12
 6509              	.LCFI269:
 6510              		.cfi_def_cfa_offset 4
 6511 0012 BD46     		mov	sp, r7
 6512              	.LCFI270:
 6513              		.cfi_def_cfa_register 13
 6514              		@ sp needed
 6515 0014 5DF8047B 		ldr	r7, [sp], #4
 6516              	.LCFI271:
 6517              		.cfi_restore 7
 6518              		.cfi_def_cfa_offset 0
 6519 0018 7047     		bx	lr
 6520              	.L433:
 6521 001a 00BF     		.align	2
 6522              	.L432:
 6523 001c 00000000 		.word	pxCurrentTCB
 6524              		.cfi_endproc
 6525              	.LFE59:
 6527              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 6528              		.align	1
 6529              		.global	xTaskGetSchedulerState
 6530              		.syntax unified
 6531              		.thumb
 6532              		.thumb_func
 6533              		.fpu fpv4-sp-d16
 6535              	xTaskGetSchedulerState:
 6536              	.LFB60:
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6537              		.loc 1 3924 2
 6538              		.cfi_startproc
 6539              		@ args = 0, pretend = 0, frame = 8
 6540              		@ frame_needed = 1, uses_anonymous_args = 0
 6541              		@ link register save eliminated.
 6542 0000 80B4     		push	{r7}
 6543              	.LCFI272:
 6544              		.cfi_def_cfa_offset 4
 6545              		.cfi_offset 7, -4
 6546 0002 83B0     		sub	sp, sp, #12
 6547              	.LCFI273:
 6548              		.cfi_def_cfa_offset 16
 6549 0004 00AF     		add	r7, sp, #0
 6550              	.LCFI274:
 6551              		.cfi_def_cfa_register 7
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
 6552              		.loc 1 3927 25
 6553 0006 0B4B     		ldr	r3, .L439
 6554 0008 1B68     		ldr	r3, [r3]
 6555              		.loc 1 3927 5
ARM GAS  /tmp/ccQcdK8x.s 			page 188


 6556 000a 002B     		cmp	r3, #0
 6557 000c 02D1     		bne	.L435
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
 6558              		.loc 1 3929 12
 6559 000e 0123     		movs	r3, #1
 6560 0010 7B60     		str	r3, [r7, #4]
 6561 0012 08E0     		b	.L436
 6562              	.L435:
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 6563              		.loc 1 3933 29
 6564 0014 084B     		ldr	r3, .L439+4
 6565 0016 1B68     		ldr	r3, [r3]
 6566              		.loc 1 3933 6
 6567 0018 002B     		cmp	r3, #0
 6568 001a 02D1     		bne	.L437
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
 6569              		.loc 1 3935 13
 6570 001c 0223     		movs	r3, #2
 6571 001e 7B60     		str	r3, [r7, #4]
 6572 0020 01E0     		b	.L436
 6573              	.L437:
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
 6574              		.loc 1 3939 13
 6575 0022 0023     		movs	r3, #0
 6576 0024 7B60     		str	r3, [r7, #4]
 6577              	.L436:
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6578              		.loc 1 3943 10
 6579 0026 7B68     		ldr	r3, [r7, #4]
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6580              		.loc 1 3944 2
 6581 0028 1846     		mov	r0, r3
 6582 002a 0C37     		adds	r7, r7, #12
 6583              	.LCFI275:
 6584              		.cfi_def_cfa_offset 4
 6585 002c BD46     		mov	sp, r7
 6586              	.LCFI276:
 6587              		.cfi_def_cfa_register 13
 6588              		@ sp needed
 6589 002e 5DF8047B 		ldr	r7, [sp], #4
 6590              	.LCFI277:
 6591              		.cfi_restore 7
 6592              		.cfi_def_cfa_offset 0
 6593 0032 7047     		bx	lr
 6594              	.L440:
 6595              		.align	2
ARM GAS  /tmp/ccQcdK8x.s 			page 189


 6596              	.L439:
 6597 0034 00000000 		.word	xSchedulerRunning
 6598 0038 00000000 		.word	uxSchedulerSuspended
 6599              		.cfi_endproc
 6600              	.LFE60:
 6602              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 6603              		.align	1
 6604              		.global	xTaskPriorityInherit
 6605              		.syntax unified
 6606              		.thumb
 6607              		.thumb_func
 6608              		.fpu fpv4-sp-d16
 6610              	xTaskPriorityInherit:
 6611              	.LFB61:
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6612              		.loc 1 3952 2
 6613              		.cfi_startproc
 6614              		@ args = 0, pretend = 0, frame = 16
 6615              		@ frame_needed = 1, uses_anonymous_args = 0
 6616 0000 80B5     		push	{r7, lr}
 6617              	.LCFI278:
 6618              		.cfi_def_cfa_offset 8
 6619              		.cfi_offset 7, -8
 6620              		.cfi_offset 14, -4
 6621 0002 84B0     		sub	sp, sp, #16
 6622              	.LCFI279:
 6623              		.cfi_def_cfa_offset 24
 6624 0004 00AF     		add	r7, sp, #0
 6625              	.LCFI280:
 6626              		.cfi_def_cfa_register 7
 6627 0006 7860     		str	r0, [r7, #4]
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 6628              		.loc 1 3953 16
 6629 0008 7B68     		ldr	r3, [r7, #4]
 6630 000a BB60     		str	r3, [r7, #8]
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6631              		.loc 1 3954 13
 6632 000c 0023     		movs	r3, #0
 6633 000e FB60     		str	r3, [r7, #12]
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6634              		.loc 1 3959 5
 6635 0010 7B68     		ldr	r3, [r7, #4]
 6636 0012 002B     		cmp	r3, #0
 6637 0014 51D0     		beq	.L442
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
ARM GAS  /tmp/ccQcdK8x.s 			page 190


3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 6638              		.loc 1 3964 24
 6639 0016 BB68     		ldr	r3, [r7, #8]
 6640 0018 DA6A     		ldr	r2, [r3, #44]
 6641              		.loc 1 3964 51
 6642 001a 2A4B     		ldr	r3, .L449
 6643 001c 1B68     		ldr	r3, [r3]
 6644 001e DB6A     		ldr	r3, [r3, #44]
 6645              		.loc 1 3964 6
 6646 0020 9A42     		cmp	r2, r3
 6647 0022 41D2     		bcs	.L443
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
 6648              		.loc 1 3969 11
 6649 0024 BB68     		ldr	r3, [r7, #8]
 6650 0026 9B69     		ldr	r3, [r3, #24]
 6651              		.loc 1 3969 7
 6652 0028 002B     		cmp	r3, #0
 6653 002a 06DB     		blt	.L444
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
 6654              		.loc 1 3971 6
 6655 002c 254B     		ldr	r3, .L449
 6656 002e 1B68     		ldr	r3, [r3]
 6657 0030 DB6A     		ldr	r3, [r3, #44]
 6658 0032 C3F13802 		rsb	r2, r3, #56
 6659 0036 BB68     		ldr	r3, [r7, #8]
 6660 0038 9A61     		str	r2, [r3, #24]
 6661              	.L444:
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
 6662              		.loc 1 3980 9
 6663 003a BB68     		ldr	r3, [r7, #8]
 6664 003c 5969     		ldr	r1, [r3, #20]
 6665 003e BB68     		ldr	r3, [r7, #8]
 6666 0040 DA6A     		ldr	r2, [r3, #44]
 6667 0042 1346     		mov	r3, r2
 6668 0044 9B00     		lsls	r3, r3, #2
 6669 0046 1344     		add	r3, r3, r2
 6670 0048 9B00     		lsls	r3, r3, #2
 6671 004a 1F4A     		ldr	r2, .L449+4
 6672 004c 1344     		add	r3, r3, r2
 6673              		.loc 1 3980 7
 6674 004e 9942     		cmp	r1, r3
 6675 0050 22D1     		bne	.L445
ARM GAS  /tmp/ccQcdK8x.s 			page 191


3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6676              		.loc 1 3982 10
 6677 0052 BB68     		ldr	r3, [r7, #8]
 6678 0054 0433     		adds	r3, r3, #4
 6679 0056 1846     		mov	r0, r3
 6680 0058 FFF7FEFF 		bl	uxListRemove
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6681              		.loc 1 3992 49
 6682 005c 194B     		ldr	r3, .L449
 6683 005e 1B68     		ldr	r3, [r3]
 6684 0060 DA6A     		ldr	r2, [r3, #44]
 6685              		.loc 1 3992 35
 6686 0062 BB68     		ldr	r3, [r7, #8]
 6687 0064 DA62     		str	r2, [r3, #44]
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 6688              		.loc 1 3993 6
 6689 0066 BB68     		ldr	r3, [r7, #8]
 6690 0068 DA6A     		ldr	r2, [r3, #44]
 6691 006a 184B     		ldr	r3, .L449+8
 6692 006c 1B68     		ldr	r3, [r3]
 6693 006e 9A42     		cmp	r2, r3
 6694 0070 03D9     		bls	.L446
 6695              		.loc 1 3993 6 is_stmt 0 discriminator 1
 6696 0072 BB68     		ldr	r3, [r7, #8]
 6697 0074 DB6A     		ldr	r3, [r3, #44]
 6698 0076 154A     		ldr	r2, .L449+8
 6699 0078 1360     		str	r3, [r2]
 6700              	.L446:
 6701              		.loc 1 3993 6 discriminator 3
 6702 007a BB68     		ldr	r3, [r7, #8]
 6703 007c DA6A     		ldr	r2, [r3, #44]
 6704 007e 1346     		mov	r3, r2
 6705 0080 9B00     		lsls	r3, r3, #2
 6706 0082 1344     		add	r3, r3, r2
 6707 0084 9B00     		lsls	r3, r3, #2
 6708 0086 104A     		ldr	r2, .L449+4
 6709 0088 1A44     		add	r2, r2, r3
 6710 008a BB68     		ldr	r3, [r7, #8]
 6711 008c 0433     		adds	r3, r3, #4
 6712 008e 1946     		mov	r1, r3
 6713 0090 1046     		mov	r0, r2
 6714 0092 FFF7FEFF 		bl	vListInsertEnd
 6715 0096 04E0     		b	.L447
 6716              	.L445:
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccQcdK8x.s 			page 192


3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 6717              		.loc 1 3998 49 is_stmt 1
 6718 0098 0A4B     		ldr	r3, .L449
 6719 009a 1B68     		ldr	r3, [r3]
 6720 009c DA6A     		ldr	r2, [r3, #44]
 6721              		.loc 1 3998 35
 6722 009e BB68     		ldr	r3, [r7, #8]
 6723 00a0 DA62     		str	r2, [r3, #44]
 6724              	.L447:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 6725              		.loc 1 4004 13
 6726 00a2 0123     		movs	r3, #1
 6727 00a4 FB60     		str	r3, [r7, #12]
 6728 00a6 08E0     		b	.L442
 6729              	.L443:
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 6730              		.loc 1 4008 25
 6731 00a8 BB68     		ldr	r3, [r7, #8]
 6732 00aa DA6C     		ldr	r2, [r3, #76]
 6733              		.loc 1 4008 56
 6734 00ac 054B     		ldr	r3, .L449
 6735 00ae 1B68     		ldr	r3, [r3]
 6736 00b0 DB6A     		ldr	r3, [r3, #44]
 6737              		.loc 1 4008 7
 6738 00b2 9A42     		cmp	r2, r3
 6739 00b4 01D2     		bcs	.L442
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6740              		.loc 1 4017 14
 6741 00b6 0123     		movs	r3, #1
 6742 00b8 FB60     		str	r3, [r7, #12]
 6743              	.L442:
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccQcdK8x.s 			page 193


4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6744              		.loc 1 4030 10
 6745 00ba FB68     		ldr	r3, [r7, #12]
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6746              		.loc 1 4031 2
 6747 00bc 1846     		mov	r0, r3
 6748 00be 1037     		adds	r7, r7, #16
 6749              	.LCFI281:
 6750              		.cfi_def_cfa_offset 8
 6751 00c0 BD46     		mov	sp, r7
 6752              	.LCFI282:
 6753              		.cfi_def_cfa_register 13
 6754              		@ sp needed
 6755 00c2 80BD     		pop	{r7, pc}
 6756              	.L450:
 6757              		.align	2
 6758              	.L449:
 6759 00c4 00000000 		.word	pxCurrentTCB
 6760 00c8 00000000 		.word	pxReadyTasksLists
 6761 00cc 00000000 		.word	uxTopReadyPriority
 6762              		.cfi_endproc
 6763              	.LFE61:
 6765              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 6766              		.align	1
 6767              		.global	xTaskPriorityDisinherit
 6768              		.syntax unified
 6769              		.thumb
 6770              		.thumb_func
 6771              		.fpu fpv4-sp-d16
 6773              	xTaskPriorityDisinherit:
 6774              	.LFB62:
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6775              		.loc 1 4039 2
 6776              		.cfi_startproc
 6777              		@ args = 0, pretend = 0, frame = 24
 6778              		@ frame_needed = 1, uses_anonymous_args = 0
 6779 0000 80B5     		push	{r7, lr}
 6780              	.LCFI283:
 6781              		.cfi_def_cfa_offset 8
 6782              		.cfi_offset 7, -8
 6783              		.cfi_offset 14, -4
 6784 0002 86B0     		sub	sp, sp, #24
 6785              	.LCFI284:
 6786              		.cfi_def_cfa_offset 32
 6787 0004 00AF     		add	r7, sp, #0
 6788              	.LCFI285:
 6789              		.cfi_def_cfa_register 7
ARM GAS  /tmp/ccQcdK8x.s 			page 194


 6790 0006 7860     		str	r0, [r7, #4]
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6791              		.loc 1 4040 16
 6792 0008 7B68     		ldr	r3, [r7, #4]
 6793 000a 3B61     		str	r3, [r7, #16]
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
 6794              		.loc 1 4041 13
 6795 000c 0023     		movs	r3, #0
 6796 000e 7B61     		str	r3, [r7, #20]
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6797              		.loc 1 4043 5
 6798 0010 7B68     		ldr	r3, [r7, #4]
 6799 0012 002B     		cmp	r3, #0
 6800 0014 54D0     		beq	.L452
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
 6801              		.loc 1 4049 4
 6802 0016 2D4B     		ldr	r3, .L459
 6803 0018 1B68     		ldr	r3, [r3]
 6804 001a 3A69     		ldr	r2, [r7, #16]
 6805 001c 9A42     		cmp	r2, r3
 6806 001e 09D0     		beq	.L453
 6807              	.LBB218:
 6808              	.LBB219:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6809              		.loc 2 195 2 discriminator 1
 6810              		.syntax unified
 6811              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6812 0020 4FF05003 			mov r3, #80												
 6813 0024 83F31188 		msr basepri, r3											
 6814 0028 BFF36F8F 		isb														
 6815 002c BFF34F8F 		dsb														
 6816              	
 6817              	@ 0 "" 2
 6818              		.thumb
 6819              		.syntax unified
 6820 0030 FB60     		str	r3, [r7, #12]
 6821              	.L454:
 6822              	.LBE219:
 6823              	.LBE218:
 6824              		.loc 1 4049 4 discriminator 1
 6825 0032 FEE7     		b	.L454
 6826              	.L453:
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6827              		.loc 1 4050 4
 6828 0034 3B69     		ldr	r3, [r7, #16]
 6829 0036 1B6D     		ldr	r3, [r3, #80]
 6830 0038 002B     		cmp	r3, #0
 6831 003a 09D1     		bne	.L455
 6832              	.LBB220:
 6833              	.LBB221:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  /tmp/ccQcdK8x.s 			page 195


 6834              		.loc 2 195 2 discriminator 1
 6835              		.syntax unified
 6836              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6837 003c 4FF05003 			mov r3, #80												
 6838 0040 83F31188 		msr basepri, r3											
 6839 0044 BFF36F8F 		isb														
 6840 0048 BFF34F8F 		dsb														
 6841              	
 6842              	@ 0 "" 2
 6843              		.thumb
 6844              		.syntax unified
 6845 004c BB60     		str	r3, [r7, #8]
 6846              	.L456:
 6847              	.LBE221:
 6848              	.LBE220:
 6849              		.loc 1 4050 4 discriminator 2
 6850 004e FEE7     		b	.L456
 6851              	.L455:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 6852              		.loc 1 4051 11
 6853 0050 3B69     		ldr	r3, [r7, #16]
 6854 0052 1B6D     		ldr	r3, [r3, #80]
 6855              		.loc 1 4051 28
 6856 0054 5A1E     		subs	r2, r3, #1
 6857 0056 3B69     		ldr	r3, [r7, #16]
 6858 0058 1A65     		str	r2, [r3, #80]
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 6859              		.loc 1 4055 13
 6860 005a 3B69     		ldr	r3, [r7, #16]
 6861 005c DA6A     		ldr	r2, [r3, #44]
 6862              		.loc 1 4055 34
 6863 005e 3B69     		ldr	r3, [r7, #16]
 6864 0060 DB6C     		ldr	r3, [r3, #76]
 6865              		.loc 1 4055 6
 6866 0062 9A42     		cmp	r2, r3
 6867 0064 2CD0     		beq	.L452
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 6868              		.loc 1 4058 14
 6869 0066 3B69     		ldr	r3, [r7, #16]
 6870 0068 1B6D     		ldr	r3, [r3, #80]
 6871              		.loc 1 4058 7
 6872 006a 002B     		cmp	r3, #0
 6873 006c 28D1     		bne	.L452
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 6874              		.loc 1 4065 10
 6875 006e 3B69     		ldr	r3, [r7, #16]
ARM GAS  /tmp/ccQcdK8x.s 			page 196


 6876 0070 0433     		adds	r3, r3, #4
 6877 0072 1846     		mov	r0, r3
 6878 0074 FFF7FEFF 		bl	uxListRemove
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
 6879              		.loc 1 4077 31
 6880 0078 3B69     		ldr	r3, [r7, #16]
 6881 007a DA6C     		ldr	r2, [r3, #76]
 6882              		.loc 1 4077 24
 6883 007c 3B69     		ldr	r3, [r7, #16]
 6884 007e DA62     		str	r2, [r3, #44]
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
 6885              		.loc 1 4082 6
 6886 0080 3B69     		ldr	r3, [r7, #16]
 6887 0082 DB6A     		ldr	r3, [r3, #44]
 6888 0084 C3F13802 		rsb	r2, r3, #56
 6889 0088 3B69     		ldr	r3, [r7, #16]
 6890 008a 9A61     		str	r2, [r3, #24]
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6891              		.loc 1 4083 6
 6892 008c 3B69     		ldr	r3, [r7, #16]
 6893 008e DA6A     		ldr	r2, [r3, #44]
 6894 0090 0F4B     		ldr	r3, .L459+4
 6895 0092 1B68     		ldr	r3, [r3]
 6896 0094 9A42     		cmp	r2, r3
 6897 0096 03D9     		bls	.L457
 6898              		.loc 1 4083 6 is_stmt 0 discriminator 1
 6899 0098 3B69     		ldr	r3, [r7, #16]
 6900 009a DB6A     		ldr	r3, [r3, #44]
 6901 009c 0C4A     		ldr	r2, .L459+4
 6902 009e 1360     		str	r3, [r2]
 6903              	.L457:
 6904              		.loc 1 4083 6 discriminator 3
 6905 00a0 3B69     		ldr	r3, [r7, #16]
 6906 00a2 DA6A     		ldr	r2, [r3, #44]
 6907 00a4 1346     		mov	r3, r2
 6908 00a6 9B00     		lsls	r3, r3, #2
 6909 00a8 1344     		add	r3, r3, r2
 6910 00aa 9B00     		lsls	r3, r3, #2
 6911 00ac 094A     		ldr	r2, .L459+8
 6912 00ae 1A44     		add	r2, r2, r3
 6913 00b0 3B69     		ldr	r3, [r7, #16]
 6914 00b2 0433     		adds	r3, r3, #4
ARM GAS  /tmp/ccQcdK8x.s 			page 197


 6915 00b4 1946     		mov	r1, r3
 6916 00b6 1046     		mov	r0, r2
 6917 00b8 FFF7FEFF 		bl	vListInsertEnd
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
 6918              		.loc 1 4093 14 is_stmt 1 discriminator 3
 6919 00bc 0123     		movs	r3, #1
 6920 00be 7B61     		str	r3, [r7, #20]
 6921              	.L452:
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 6922              		.loc 1 4110 10
 6923 00c0 7B69     		ldr	r3, [r7, #20]
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 6924              		.loc 1 4111 2
 6925 00c2 1846     		mov	r0, r3
 6926 00c4 1837     		adds	r7, r7, #24
 6927              	.LCFI286:
 6928              		.cfi_def_cfa_offset 8
 6929 00c6 BD46     		mov	sp, r7
 6930              	.LCFI287:
 6931              		.cfi_def_cfa_register 13
 6932              		@ sp needed
 6933 00c8 80BD     		pop	{r7, pc}
 6934              	.L460:
 6935 00ca 00BF     		.align	2
 6936              	.L459:
 6937 00cc 00000000 		.word	pxCurrentTCB
 6938 00d0 00000000 		.word	uxTopReadyPriority
 6939 00d4 00000000 		.word	pxReadyTasksLists
 6940              		.cfi_endproc
 6941              	.LFE62:
 6943              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 6944              		.align	1
ARM GAS  /tmp/ccQcdK8x.s 			page 198


 6945              		.global	vTaskPriorityDisinheritAfterTimeout
 6946              		.syntax unified
 6947              		.thumb
 6948              		.thumb_func
 6949              		.fpu fpv4-sp-d16
 6951              	vTaskPriorityDisinheritAfterTimeout:
 6952              	.LFB63:
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 6953              		.loc 1 4119 2
 6954              		.cfi_startproc
 6955              		@ args = 0, pretend = 0, frame = 32
 6956              		@ frame_needed = 1, uses_anonymous_args = 0
 6957 0000 80B5     		push	{r7, lr}
 6958              	.LCFI288:
 6959              		.cfi_def_cfa_offset 8
 6960              		.cfi_offset 7, -8
 6961              		.cfi_offset 14, -4
 6962 0002 88B0     		sub	sp, sp, #32
 6963              	.LCFI289:
 6964              		.cfi_def_cfa_offset 40
 6965 0004 00AF     		add	r7, sp, #0
 6966              	.LCFI290:
 6967              		.cfi_def_cfa_register 7
 6968 0006 7860     		str	r0, [r7, #4]
 6969 0008 3960     		str	r1, [r7]
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = pxMutexHolder;
 6970              		.loc 1 4120 16
 6971 000a 7B68     		ldr	r3, [r7, #4]
 6972 000c BB61     		str	r3, [r7, #24]
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 6973              		.loc 1 4122 20
 6974 000e 0123     		movs	r3, #1
 6975 0010 7B61     		str	r3, [r7, #20]
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
 6976              		.loc 1 4124 5
 6977 0012 7B68     		ldr	r3, [r7, #4]
 6978 0014 002B     		cmp	r3, #0
 6979 0016 68D0     		beq	.L471
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 6980              		.loc 1 4128 4
 6981 0018 BB69     		ldr	r3, [r7, #24]
 6982 001a 1B6D     		ldr	r3, [r3, #80]
 6983 001c 002B     		cmp	r3, #0
 6984 001e 09D1     		bne	.L463
 6985              	.LBB222:
ARM GAS  /tmp/ccQcdK8x.s 			page 199


 6986              	.LBB223:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 6987              		.loc 2 195 2 discriminator 1
 6988              		.syntax unified
 6989              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6990 0020 4FF05003 			mov r3, #80												
 6991 0024 83F31188 		msr basepri, r3											
 6992 0028 BFF36F8F 		isb														
 6993 002c BFF34F8F 		dsb														
 6994              	
 6995              	@ 0 "" 2
 6996              		.thumb
 6997              		.syntax unified
 6998 0030 FB60     		str	r3, [r7, #12]
 6999              	.L464:
 7000              	.LBE223:
 7001              	.LBE222:
 7002              		.loc 1 4128 4 discriminator 1
 7003 0032 FEE7     		b	.L464
 7004              	.L463:
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 7005              		.loc 1 4134 13
 7006 0034 BB69     		ldr	r3, [r7, #24]
 7007 0036 DB6C     		ldr	r3, [r3, #76]
 7008              		.loc 1 4134 6
 7009 0038 3A68     		ldr	r2, [r7]
 7010 003a 9A42     		cmp	r2, r3
 7011 003c 02D9     		bls	.L465
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
 7012              		.loc 1 4136 21
 7013 003e 3B68     		ldr	r3, [r7]
 7014 0040 FB61     		str	r3, [r7, #28]
 7015 0042 02E0     		b	.L466
 7016              	.L465:
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
 7017              		.loc 1 4140 21
 7018 0044 BB69     		ldr	r3, [r7, #24]
 7019 0046 DB6C     		ldr	r3, [r3, #76]
 7020 0048 FB61     		str	r3, [r7, #28]
 7021              	.L466:
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
 7022              		.loc 1 4144 13
 7023 004a BB69     		ldr	r3, [r7, #24]
 7024 004c DB6A     		ldr	r3, [r3, #44]
 7025              		.loc 1 4144 6
ARM GAS  /tmp/ccQcdK8x.s 			page 200


 7026 004e FA69     		ldr	r2, [r7, #28]
 7027 0050 9A42     		cmp	r2, r3
 7028 0052 4AD0     		beq	.L471
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 7029              		.loc 1 4150 14
 7030 0054 BB69     		ldr	r3, [r7, #24]
 7031 0056 1B6D     		ldr	r3, [r3, #80]
 7032              		.loc 1 4150 7
 7033 0058 7A69     		ldr	r2, [r7, #20]
 7034 005a 9A42     		cmp	r2, r3
 7035 005c 45D1     		bne	.L471
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
 7036              		.loc 1 4155 6
 7037 005e 254B     		ldr	r3, .L472
 7038 0060 1B68     		ldr	r3, [r3]
 7039 0062 BA69     		ldr	r2, [r7, #24]
 7040 0064 9A42     		cmp	r2, r3
 7041 0066 09D1     		bne	.L467
 7042              	.LBB224:
 7043              	.LBB225:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7044              		.loc 2 195 2 discriminator 1
 7045              		.syntax unified
 7046              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7047 0068 4FF05003 			mov r3, #80												
 7048 006c 83F31188 		msr basepri, r3											
 7049 0070 BFF36F8F 		isb														
 7050 0074 BFF34F8F 		dsb														
 7051              	
 7052              	@ 0 "" 2
 7053              		.thumb
 7054              		.syntax unified
 7055 0078 BB60     		str	r3, [r7, #8]
 7056              	.L468:
 7057              	.LBE225:
 7058              	.LBE224:
 7059              		.loc 1 4155 6 discriminator 2
 7060 007a FEE7     		b	.L468
 7061              	.L467:
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 7062              		.loc 1 4161 28
 7063 007c BB69     		ldr	r3, [r7, #24]
 7064 007e DB6A     		ldr	r3, [r3, #44]
ARM GAS  /tmp/ccQcdK8x.s 			page 201


 7065 0080 3B61     		str	r3, [r7, #16]
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
 7066              		.loc 1 4162 24
 7067 0082 BB69     		ldr	r3, [r7, #24]
 7068 0084 FA69     		ldr	r2, [r7, #28]
 7069 0086 DA62     		str	r2, [r3, #44]
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
 7070              		.loc 1 4166 12
 7071 0088 BB69     		ldr	r3, [r7, #24]
 7072 008a 9B69     		ldr	r3, [r3, #24]
 7073              		.loc 1 4166 8
 7074 008c 002B     		cmp	r3, #0
 7075 008e 04DB     		blt	.L469
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
 7076              		.loc 1 4168 7
 7077 0090 FB69     		ldr	r3, [r7, #28]
 7078 0092 C3F13802 		rsb	r2, r3, #56
 7079 0096 BB69     		ldr	r3, [r7, #24]
 7080 0098 9A61     		str	r2, [r3, #24]
 7081              	.L469:
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
 7082              		.loc 1 4181 10
 7083 009a BB69     		ldr	r3, [r7, #24]
 7084 009c 5969     		ldr	r1, [r3, #20]
 7085 009e 3A69     		ldr	r2, [r7, #16]
 7086 00a0 1346     		mov	r3, r2
 7087 00a2 9B00     		lsls	r3, r3, #2
 7088 00a4 1344     		add	r3, r3, r2
 7089 00a6 9B00     		lsls	r3, r3, #2
 7090 00a8 134A     		ldr	r2, .L472+4
 7091 00aa 1344     		add	r3, r3, r2
 7092              		.loc 1 4181 8
 7093 00ac 9942     		cmp	r1, r3
 7094 00ae 1CD1     		bne	.L471
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 7095              		.loc 1 4183 11
 7096 00b0 BB69     		ldr	r3, [r7, #24]
 7097 00b2 0433     		adds	r3, r3, #4
 7098 00b4 1846     		mov	r0, r3
 7099 00b6 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccQcdK8x.s 			page 202


4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
 7100              		.loc 1 4192 7
 7101 00ba BB69     		ldr	r3, [r7, #24]
 7102 00bc DA6A     		ldr	r2, [r3, #44]
 7103 00be 0F4B     		ldr	r3, .L472+8
 7104 00c0 1B68     		ldr	r3, [r3]
 7105 00c2 9A42     		cmp	r2, r3
 7106 00c4 03D9     		bls	.L470
 7107              		.loc 1 4192 7 is_stmt 0 discriminator 1
 7108 00c6 BB69     		ldr	r3, [r7, #24]
 7109 00c8 DB6A     		ldr	r3, [r3, #44]
 7110 00ca 0C4A     		ldr	r2, .L472+8
 7111 00cc 1360     		str	r3, [r2]
 7112              	.L470:
 7113              		.loc 1 4192 7 discriminator 3
 7114 00ce BB69     		ldr	r3, [r7, #24]
 7115 00d0 DA6A     		ldr	r2, [r3, #44]
 7116 00d2 1346     		mov	r3, r2
 7117 00d4 9B00     		lsls	r3, r3, #2
 7118 00d6 1344     		add	r3, r3, r2
 7119 00d8 9B00     		lsls	r3, r3, #2
 7120 00da 074A     		ldr	r2, .L472+4
 7121 00dc 1A44     		add	r2, r2, r3
 7122 00de BB69     		ldr	r3, [r7, #24]
 7123 00e0 0433     		adds	r3, r3, #4
 7124 00e2 1946     		mov	r1, r3
 7125 00e4 1046     		mov	r0, r2
 7126 00e6 FFF7FEFF 		bl	vListInsertEnd
 7127              	.L471:
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccQcdK8x.s 			page 203


4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7128              		.loc 1 4213 2 is_stmt 1
 7129 00ea 00BF     		nop
 7130 00ec 2037     		adds	r7, r7, #32
 7131              	.LCFI291:
 7132              		.cfi_def_cfa_offset 8
 7133 00ee BD46     		mov	sp, r7
 7134              	.LCFI292:
 7135              		.cfi_def_cfa_register 13
 7136              		@ sp needed
 7137 00f0 80BD     		pop	{r7, pc}
 7138              	.L473:
 7139 00f2 00BF     		.align	2
 7140              	.L472:
 7141 00f4 00000000 		.word	pxCurrentTCB
 7142 00f8 00000000 		.word	pxReadyTasksLists
 7143 00fc 00000000 		.word	uxTopReadyPriority
 7144              		.cfi_endproc
 7145              	.LFE63:
 7147              		.section	.text.prvWriteNameToBuffer,"ax",%progbits
 7148              		.align	1
 7149              		.syntax unified
 7150              		.thumb
 7151              		.thumb_func
 7152              		.fpu fpv4-sp-d16
 7154              	prvWriteNameToBuffer:
 7155              	.LFB64:
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccQcdK8x.s 			page 204


4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7156              		.loc 1 4284 2
 7157              		.cfi_startproc
 7158              		@ args = 0, pretend = 0, frame = 16
 7159              		@ frame_needed = 1, uses_anonymous_args = 0
 7160 0000 80B5     		push	{r7, lr}
 7161              	.LCFI293:
 7162              		.cfi_def_cfa_offset 8
 7163              		.cfi_offset 7, -8
 7164              		.cfi_offset 14, -4
 7165 0002 84B0     		sub	sp, sp, #16
 7166              	.LCFI294:
 7167              		.cfi_def_cfa_offset 24
 7168 0004 00AF     		add	r7, sp, #0
 7169              	.LCFI295:
 7170              		.cfi_def_cfa_register 7
 7171 0006 7860     		str	r0, [r7, #4]
ARM GAS  /tmp/ccQcdK8x.s 			page 205


 7172 0008 3960     		str	r1, [r7]
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
 7173              		.loc 1 4288 3
 7174 000a 3968     		ldr	r1, [r7]
 7175 000c 7868     		ldr	r0, [r7, #4]
 7176 000e FFF7FEFF 		bl	strcpy
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 7177              		.loc 1 4292 12
 7178 0012 7868     		ldr	r0, [r7, #4]
 7179 0014 FFF7FEFF 		bl	strlen
 7180 0018 F860     		str	r0, [r7, #12]
 7181              		.loc 1 4292 3
 7182 001a 07E0     		b	.L475
 7183              	.L476:
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
 7184              		.loc 1 4294 12 discriminator 3
 7185 001c 7A68     		ldr	r2, [r7, #4]
 7186 001e FB68     		ldr	r3, [r7, #12]
 7187 0020 1344     		add	r3, r3, r2
 7188              		.loc 1 4294 18 discriminator 3
 7189 0022 2022     		movs	r2, #32
 7190 0024 1A70     		strb	r2, [r3]
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 7191              		.loc 1 4292 81 discriminator 3
 7192 0026 FB68     		ldr	r3, [r7, #12]
 7193 0028 0133     		adds	r3, r3, #1
 7194 002a FB60     		str	r3, [r7, #12]
 7195              	.L475:
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 7196              		.loc 1 4292 3 discriminator 1
 7197 002c FB68     		ldr	r3, [r7, #12]
 7198 002e 0E2B     		cmp	r3, #14
 7199 0030 F4D9     		bls	.L476
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = ( char ) 0x00;
 7200              		.loc 1 4298 11
 7201 0032 7A68     		ldr	r2, [r7, #4]
 7202 0034 FB68     		ldr	r3, [r7, #12]
 7203 0036 1344     		add	r3, r3, r2
 7204              		.loc 1 4298 17
 7205 0038 0022     		movs	r2, #0
 7206 003a 1A70     		strb	r2, [r3]
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
 7207              		.loc 1 4301 10
 7208 003c 7A68     		ldr	r2, [r7, #4]
 7209 003e FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccQcdK8x.s 			page 206


 7210 0040 1344     		add	r3, r3, r2
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7211              		.loc 1 4302 2
 7212 0042 1846     		mov	r0, r3
 7213 0044 1037     		adds	r7, r7, #16
 7214              	.LCFI296:
 7215              		.cfi_def_cfa_offset 8
 7216 0046 BD46     		mov	sp, r7
 7217              	.LCFI297:
 7218              		.cfi_def_cfa_register 13
 7219              		@ sp needed
 7220 0048 80BD     		pop	{r7, pc}
 7221              		.cfi_endproc
 7222              	.LFE64:
 7224              		.section	.rodata
 7225 0005 000000   		.align	2
 7226              	.LC1:
 7227 0008 09256309 		.ascii	"\011%c\011%u\011%u\011%u\015\012\000"
 7227      25750925 
 7227      75092575 
 7227      0D0A00
 7228              		.section	.text.vTaskList,"ax",%progbits
 7229              		.align	1
 7230              		.global	vTaskList
 7231              		.syntax unified
 7232              		.thumb
 7233              		.thumb_func
 7234              		.fpu fpv4-sp-d16
 7236              	vTaskList:
 7237              	.LFB65:
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7238              		.loc 1 4310 2
 7239              		.cfi_startproc
 7240              		@ args = 0, pretend = 0, frame = 24
 7241              		@ frame_needed = 1, uses_anonymous_args = 0
 7242 0000 90B5     		push	{r4, r7, lr}
 7243              	.LCFI298:
 7244              		.cfi_def_cfa_offset 12
 7245              		.cfi_offset 4, -12
 7246              		.cfi_offset 7, -8
 7247              		.cfi_offset 14, -4
 7248 0002 89B0     		sub	sp, sp, #36
 7249              	.LCFI299:
 7250              		.cfi_def_cfa_offset 48
 7251 0004 02AF     		add	r7, sp, #8
 7252              	.LCFI300:
 7253              		.cfi_def_cfa 7, 40
 7254 0006 7860     		str	r0, [r7, #4]
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
ARM GAS  /tmp/ccQcdK8x.s 			page 207


4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
 7255              		.loc 1 4341 18
 7256 0008 7B68     		ldr	r3, [r7, #4]
 7257 000a 0022     		movs	r2, #0
 7258 000c 1A70     		strb	r2, [r3]
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
 7259              		.loc 1 4345 15
 7260 000e 454B     		ldr	r3, .L491
 7261 0010 1B68     		ldr	r3, [r3]
 7262 0012 FB60     		str	r3, [r7, #12]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
 7263              		.loc 1 4350 23
 7264 0014 434B     		ldr	r3, .L491
 7265 0016 1A68     		ldr	r2, [r3]
 7266              		.loc 1 4350 60
 7267 0018 1346     		mov	r3, r2
 7268 001a DB00     		lsls	r3, r3, #3
 7269 001c 1344     		add	r3, r3, r2
 7270 001e 9B00     		lsls	r3, r3, #2
 7271              		.loc 1 4350 23
 7272 0020 1846     		mov	r0, r3
 7273 0022 FFF7FEFF 		bl	pvPortMalloc
ARM GAS  /tmp/ccQcdK8x.s 			page 208


 7274 0026 B860     		str	r0, [r7, #8]
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
 7275              		.loc 1 4352 5
 7276 0028 BB68     		ldr	r3, [r7, #8]
 7277 002a 002B     		cmp	r3, #0
 7278 002c 76D0     		beq	.L490
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 7279              		.loc 1 4355 18
 7280 002e 0022     		movs	r2, #0
 7281 0030 F968     		ldr	r1, [r7, #12]
 7282 0032 B868     		ldr	r0, [r7, #8]
 7283 0034 FFF7FEFF 		bl	uxTaskGetSystemState
 7284 0038 F860     		str	r0, [r7, #12]
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
 7285              		.loc 1 4358 11
 7286 003a 0023     		movs	r3, #0
 7287 003c 7B61     		str	r3, [r7, #20]
 7288              		.loc 1 4358 4
 7289 003e 66E0     		b	.L480
 7290              	.L489:
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
 7291              		.loc 1 4360 30
 7292 0040 7A69     		ldr	r2, [r7, #20]
 7293 0042 1346     		mov	r3, r2
 7294 0044 DB00     		lsls	r3, r3, #3
 7295 0046 1344     		add	r3, r3, r2
 7296 0048 9B00     		lsls	r3, r3, #2
 7297 004a 1A46     		mov	r2, r3
 7298 004c BB68     		ldr	r3, [r7, #8]
 7299 004e 1344     		add	r3, r3, r2
 7300              		.loc 1 4360 35
 7301 0050 1B7B     		ldrb	r3, [r3, #12]	@ zero_extendqisi2
 7302              		.loc 1 4360 5
 7303 0052 042B     		cmp	r3, #4
 7304 0054 1BD8     		bhi	.L481
 7305 0056 01A2     		adr	r2, .L483
 7306 0058 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7307              		.p2align 2
 7308              	.L483:
 7309 005c 71000000 		.word	.L487+1
 7310 0060 77000000 		.word	.L486+1
 7311 0064 7D000000 		.word	.L485+1
 7312 0068 83000000 		.word	.L484+1
 7313 006c 89000000 		.word	.L482+1
 7314              		.p2align 1
 7315              	.L487:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
 7316              		.loc 1 4362 30
 7317 0070 5823     		movs	r3, #88
 7318 0072 FB74     		strb	r3, [r7, #19]
ARM GAS  /tmp/ccQcdK8x.s 			page 209


4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 7319              		.loc 1 4363 11
 7320 0074 0EE0     		b	.L488
 7321              	.L486:
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
 7322              		.loc 1 4365 28
 7323 0076 5223     		movs	r3, #82
 7324 0078 FB74     		strb	r3, [r7, #19]
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 7325              		.loc 1 4366 11
 7326 007a 0BE0     		b	.L488
 7327              	.L485:
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 7328              		.loc 1 4368 30
 7329 007c 4223     		movs	r3, #66
 7330 007e FB74     		strb	r3, [r7, #19]
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 7331              		.loc 1 4369 11
 7332 0080 08E0     		b	.L488
 7333              	.L484:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 7334              		.loc 1 4371 31
 7335 0082 5323     		movs	r3, #83
 7336 0084 FB74     		strb	r3, [r7, #19]
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 7337              		.loc 1 4372 11
 7338 0086 05E0     		b	.L488
 7339              	.L482:
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
 7340              		.loc 1 4374 30
 7341 0088 4423     		movs	r3, #68
 7342 008a FB74     		strb	r3, [r7, #19]
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 7343              		.loc 1 4375 11
 7344 008c 02E0     		b	.L488
 7345              	.L481:
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eInvalid:		/* Fall through. */
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = ( char ) 0x00;
 7346              		.loc 1 4380 19
 7347 008e 0023     		movs	r3, #0
 7348 0090 FB74     		strb	r3, [r7, #19]
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
 7349              		.loc 1 4381 11
 7350 0092 00BF     		nop
 7351              	.L488:
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
ARM GAS  /tmp/ccQcdK8x.s 			page 210


 7352              		.loc 1 4386 75 discriminator 2
 7353 0094 7A69     		ldr	r2, [r7, #20]
 7354 0096 1346     		mov	r3, r2
 7355 0098 DB00     		lsls	r3, r3, #3
 7356 009a 1344     		add	r3, r3, r2
 7357 009c 9B00     		lsls	r3, r3, #2
 7358 009e 1A46     		mov	r2, r3
 7359 00a0 BB68     		ldr	r3, [r7, #8]
 7360 00a2 1344     		add	r3, r3, r2
 7361              		.loc 1 4386 21 discriminator 2
 7362 00a4 5B68     		ldr	r3, [r3, #4]
 7363 00a6 1946     		mov	r1, r3
 7364 00a8 7868     		ldr	r0, [r7, #4]
 7365 00aa FFF7FEFF 		bl	prvWriteNameToBuffer
 7366 00ae 7860     		str	r0, [r7, #4]
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
 7367              		.loc 1 4389 5 discriminator 2
 7368 00b0 F97C     		ldrb	r1, [r7, #19]	@ zero_extendqisi2
 7369              		.loc 1 4389 96 discriminator 2
 7370 00b2 7A69     		ldr	r2, [r7, #20]
 7371 00b4 1346     		mov	r3, r2
 7372 00b6 DB00     		lsls	r3, r3, #3
 7373 00b8 1344     		add	r3, r3, r2
 7374 00ba 9B00     		lsls	r3, r3, #2
 7375 00bc 1A46     		mov	r2, r3
 7376 00be BB68     		ldr	r3, [r7, #8]
 7377 00c0 1344     		add	r3, r3, r2
 7378              		.loc 1 4389 101 discriminator 2
 7379 00c2 1869     		ldr	r0, [r3, #16]
 7380              		.loc 1 4389 155 discriminator 2
 7381 00c4 7A69     		ldr	r2, [r7, #20]
 7382 00c6 1346     		mov	r3, r2
 7383 00c8 DB00     		lsls	r3, r3, #3
 7384 00ca 1344     		add	r3, r3, r2
 7385 00cc 9B00     		lsls	r3, r3, #2
 7386 00ce 1A46     		mov	r2, r3
 7387 00d0 BB68     		ldr	r3, [r7, #8]
 7388 00d2 1344     		add	r3, r3, r2
 7389              		.loc 1 4389 160 discriminator 2
 7390 00d4 1B8C     		ldrh	r3, [r3, #32]
 7391              		.loc 1 4389 5 discriminator 2
 7392 00d6 1C46     		mov	r4, r3
 7393              		.loc 1 4389 217 discriminator 2
 7394 00d8 7A69     		ldr	r2, [r7, #20]
 7395 00da 1346     		mov	r3, r2
 7396 00dc DB00     		lsls	r3, r3, #3
 7397 00de 1344     		add	r3, r3, r2
 7398 00e0 9B00     		lsls	r3, r3, #2
 7399 00e2 1A46     		mov	r2, r3
 7400 00e4 BB68     		ldr	r3, [r7, #8]
 7401 00e6 1344     		add	r3, r3, r2
 7402              		.loc 1 4389 222 discriminator 2
 7403 00e8 9B68     		ldr	r3, [r3, #8]
 7404              		.loc 1 4389 5 discriminator 2
 7405 00ea 0193     		str	r3, [sp, #4]
ARM GAS  /tmp/ccQcdK8x.s 			page 211


 7406 00ec 0094     		str	r4, [sp]
 7407 00ee 0346     		mov	r3, r0
 7408 00f0 0A46     		mov	r2, r1
 7409 00f2 0D49     		ldr	r1, .L491+4
 7410 00f4 7868     		ldr	r0, [r7, #4]
 7411 00f6 FFF7FEFF 		bl	sprintf
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers 
 7412              		.loc 1 4390 22 discriminator 2
 7413 00fa 7868     		ldr	r0, [r7, #4]
 7414 00fc FFF7FEFF 		bl	strlen
 7415 0100 0246     		mov	r2, r0
 7416              		.loc 1 4390 19 discriminator 2
 7417 0102 7B68     		ldr	r3, [r7, #4]
 7418 0104 1344     		add	r3, r3, r2
 7419 0106 7B60     		str	r3, [r7, #4]
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 7420              		.loc 1 4358 34 discriminator 2
 7421 0108 7B69     		ldr	r3, [r7, #20]
 7422 010a 0133     		adds	r3, r3, #1
 7423 010c 7B61     		str	r3, [r7, #20]
 7424              	.L480:
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 7425              		.loc 1 4358 4 discriminator 1
 7426 010e 7A69     		ldr	r2, [r7, #20]
 7427 0110 FB68     		ldr	r3, [r7, #12]
 7428 0112 9A42     		cmp	r2, r3
 7429 0114 94D3     		bcc	.L489
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
 7430              		.loc 1 4395 4
 7431 0116 B868     		ldr	r0, [r7, #8]
 7432 0118 FFF7FEFF 		bl	vPortFree
 7433              	.L490:
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7434              		.loc 1 4401 2
 7435 011c 00BF     		nop
 7436 011e 1C37     		adds	r7, r7, #28
 7437              	.LCFI301:
 7438              		.cfi_def_cfa_offset 12
 7439 0120 BD46     		mov	sp, r7
 7440              	.LCFI302:
 7441              		.cfi_def_cfa_register 13
 7442              		@ sp needed
 7443 0122 90BD     		pop	{r4, r7, pc}
 7444              	.L492:
 7445              		.align	2
 7446              	.L491:
 7447 0124 00000000 		.word	uxCurrentNumberOfTasks
 7448 0128 08000000 		.word	.LC1
ARM GAS  /tmp/ccQcdK8x.s 			page 212


 7449              		.cfi_endproc
 7450              	.LFE65:
 7452              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 7453              		.align	1
 7454              		.global	uxTaskResetEventItemValue
 7455              		.syntax unified
 7456              		.thumb
 7457              		.thumb_func
 7458              		.fpu fpv4-sp-d16
 7460              	uxTaskResetEventItemValue:
 7461              	.LFB66:
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxArraySize, x;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = ( char ) 0x00;
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 213


4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e907
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0UL )
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  /tmp/ccQcdK8x.s 			page 214


4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 7462              		.loc 1 4534 1
 7463              		.cfi_startproc
 7464              		@ args = 0, pretend = 0, frame = 8
 7465              		@ frame_needed = 1, uses_anonymous_args = 0
 7466              		@ link register save eliminated.
 7467 0000 80B4     		push	{r7}
 7468              	.LCFI303:
 7469              		.cfi_def_cfa_offset 4
 7470              		.cfi_offset 7, -4
 7471 0002 83B0     		sub	sp, sp, #12
 7472              	.LCFI304:
 7473              		.cfi_def_cfa_offset 16
 7474 0004 00AF     		add	r7, sp, #0
 7475              	.LCFI305:
 7476              		.cfi_def_cfa_register 7
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 7477              		.loc 1 4537 13
 7478 0006 094B     		ldr	r3, .L495
 7479 0008 1B68     		ldr	r3, [r3]
 7480              		.loc 1 4537 11
 7481 000a 9B69     		ldr	r3, [r3, #24]
 7482 000c 7B60     		str	r3, [r7, #4]
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
ARM GAS  /tmp/ccQcdK8x.s 			page 215


4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
 7483              		.loc 1 4541 2
 7484 000e 074B     		ldr	r3, .L495
 7485 0010 1B68     		ldr	r3, [r3]
 7486 0012 DA6A     		ldr	r2, [r3, #44]
 7487 0014 054B     		ldr	r3, .L495
 7488 0016 1B68     		ldr	r3, [r3]
 7489 0018 C2F13802 		rsb	r2, r2, #56
 7490 001c 9A61     		str	r2, [r3, #24]
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
 7491              		.loc 1 4543 9
 7492 001e 7B68     		ldr	r3, [r7, #4]
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 7493              		.loc 1 4544 1
 7494 0020 1846     		mov	r0, r3
 7495 0022 0C37     		adds	r7, r7, #12
 7496              	.LCFI306:
 7497              		.cfi_def_cfa_offset 4
 7498 0024 BD46     		mov	sp, r7
 7499              	.LCFI307:
 7500              		.cfi_def_cfa_register 13
 7501              		@ sp needed
 7502 0026 5DF8047B 		ldr	r7, [sp], #4
 7503              	.LCFI308:
 7504              		.cfi_restore 7
 7505              		.cfi_def_cfa_offset 0
 7506 002a 7047     		bx	lr
 7507              	.L496:
 7508              		.align	2
 7509              	.L495:
 7510 002c 00000000 		.word	pxCurrentTCB
 7511              		.cfi_endproc
 7512              	.LFE66:
 7514              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 7515              		.align	1
 7516              		.global	pvTaskIncrementMutexHeldCount
 7517              		.syntax unified
 7518              		.thumb
 7519              		.thumb_func
 7520              		.fpu fpv4-sp-d16
 7522              	pvTaskIncrementMutexHeldCount:
 7523              	.LFB67:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7524              		.loc 1 4550 2
 7525              		.cfi_startproc
 7526              		@ args = 0, pretend = 0, frame = 0
 7527              		@ frame_needed = 1, uses_anonymous_args = 0
 7528              		@ link register save eliminated.
 7529 0000 80B4     		push	{r7}
 7530              	.LCFI309:
 7531              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccQcdK8x.s 			page 216


 7532              		.cfi_offset 7, -4
 7533 0002 00AF     		add	r7, sp, #0
 7534              	.LCFI310:
 7535              		.cfi_def_cfa_register 7
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
 7536              		.loc 1 4553 20
 7537 0004 074B     		ldr	r3, .L500
 7538 0006 1B68     		ldr	r3, [r3]
 7539              		.loc 1 4553 5
 7540 0008 002B     		cmp	r3, #0
 7541 000a 04D0     		beq	.L498
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
 7542              		.loc 1 4555 18
 7543 000c 054B     		ldr	r3, .L500
 7544 000e 1B68     		ldr	r3, [r3]
 7545 0010 1A6D     		ldr	r2, [r3, #80]
 7546              		.loc 1 4555 35
 7547 0012 0132     		adds	r2, r2, #1
 7548 0014 1A65     		str	r2, [r3, #80]
 7549              	.L498:
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
 7550              		.loc 1 4558 10
 7551 0016 034B     		ldr	r3, .L500
 7552 0018 1B68     		ldr	r3, [r3]
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7553              		.loc 1 4559 2
 7554 001a 1846     		mov	r0, r3
 7555 001c BD46     		mov	sp, r7
 7556              	.LCFI311:
 7557              		.cfi_def_cfa_register 13
 7558              		@ sp needed
 7559 001e 5DF8047B 		ldr	r7, [sp], #4
 7560              	.LCFI312:
 7561              		.cfi_restore 7
 7562              		.cfi_def_cfa_offset 0
 7563 0022 7047     		bx	lr
 7564              	.L501:
 7565              		.align	2
 7566              	.L500:
 7567 0024 00000000 		.word	pxCurrentTCB
 7568              		.cfi_endproc
 7569              	.LFE67:
 7571              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 7572              		.align	1
 7573              		.global	ulTaskNotifyTake
 7574              		.syntax unified
 7575              		.thumb
 7576              		.thumb_func
 7577              		.fpu fpv4-sp-d16
 7579              	ulTaskNotifyTake:
 7580              	.LFB68:
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 217


4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7581              		.loc 1 4567 2
 7582              		.cfi_startproc
 7583              		@ args = 0, pretend = 0, frame = 16
 7584              		@ frame_needed = 1, uses_anonymous_args = 0
 7585 0000 80B5     		push	{r7, lr}
 7586              	.LCFI313:
 7587              		.cfi_def_cfa_offset 8
 7588              		.cfi_offset 7, -8
 7589              		.cfi_offset 14, -4
 7590 0002 84B0     		sub	sp, sp, #16
 7591              	.LCFI314:
 7592              		.cfi_def_cfa_offset 24
 7593 0004 00AF     		add	r7, sp, #0
 7594              	.LCFI315:
 7595              		.cfi_def_cfa_register 7
 7596 0006 7860     		str	r0, [r7, #4]
 7597 0008 3960     		str	r1, [r7]
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7598              		.loc 1 4570 3
 7599 000a FFF7FEFF 		bl	vPortEnterCritical
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 7600              		.loc 1 4573 20
 7601 000e 1E4B     		ldr	r3, .L508
 7602 0010 1B68     		ldr	r3, [r3]
 7603 0012 9B6D     		ldr	r3, [r3, #88]
 7604              		.loc 1 4573 6
 7605 0014 002B     		cmp	r3, #0
 7606 0016 13D1     		bne	.L503
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7607              		.loc 1 4576 17
 7608 0018 1B4B     		ldr	r3, .L508
 7609 001a 1B68     		ldr	r3, [r3]
 7610              		.loc 1 4576 33
 7611 001c 0122     		movs	r2, #1
 7612 001e 83F85C20 		strb	r2, [r3, #92]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7613              		.loc 1 4578 7
 7614 0022 3B68     		ldr	r3, [r7]
 7615 0024 002B     		cmp	r3, #0
 7616 0026 0BD0     		beq	.L503
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7617              		.loc 1 4580 6
ARM GAS  /tmp/ccQcdK8x.s 			page 218


 7618 0028 0121     		movs	r1, #1
 7619 002a 3868     		ldr	r0, [r7]
 7620 002c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 7621              		.loc 1 4587 6
 7622 0030 164B     		ldr	r3, .L508+4
 7623 0032 4FF08052 		mov	r2, #268435456
 7624 0036 1A60     		str	r2, [r3]
 7625              		.syntax unified
 7626              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7627 0038 BFF34F8F 		dsb
 7628              	@ 0 "" 2
 7629              	@ 4587 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7630 003c BFF36F8F 		isb
 7631              	@ 0 "" 2
 7632              		.thumb
 7633              		.syntax unified
 7634              	.L503:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7635              		.loc 1 4599 3
 7636 0040 FFF7FEFF 		bl	vPortExitCritical
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7637              		.loc 1 4601 3
 7638 0044 FFF7FEFF 		bl	vPortEnterCritical
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
 7639              		.loc 1 4604 27
 7640 0048 0F4B     		ldr	r3, .L508
 7641 004a 1B68     		ldr	r3, [r3]
 7642              		.loc 1 4604 13
 7643 004c 9B6D     		ldr	r3, [r3, #88]
 7644 004e FB60     		str	r3, [r7, #12]
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
 7645              		.loc 1 4606 6
 7646 0050 FB68     		ldr	r3, [r7, #12]
 7647 0052 002B     		cmp	r3, #0
 7648 0054 0CD0     		beq	.L504
ARM GAS  /tmp/ccQcdK8x.s 			page 219


4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
 7649              		.loc 1 4608 7
 7650 0056 7B68     		ldr	r3, [r7, #4]
 7651 0058 002B     		cmp	r3, #0
 7652 005a 04D0     		beq	.L505
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
 7653              		.loc 1 4610 18
 7654 005c 0A4B     		ldr	r3, .L508
 7655 005e 1B68     		ldr	r3, [r3]
 7656              		.loc 1 4610 36
 7657 0060 0022     		movs	r2, #0
 7658 0062 9A65     		str	r2, [r3, #88]
 7659 0064 04E0     		b	.L504
 7660              	.L505:
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 7661              		.loc 1 4614 18
 7662 0066 084B     		ldr	r3, .L508
 7663 0068 1B68     		ldr	r3, [r3]
 7664              		.loc 1 4614 47
 7665 006a FA68     		ldr	r2, [r7, #12]
 7666 006c 013A     		subs	r2, r2, #1
 7667              		.loc 1 4614 36
 7668 006e 9A65     		str	r2, [r3, #88]
 7669              	.L504:
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7670              		.loc 1 4622 16
 7671 0070 054B     		ldr	r3, .L508
 7672 0072 1B68     		ldr	r3, [r3]
 7673              		.loc 1 4622 32
 7674 0074 0022     		movs	r2, #0
 7675 0076 83F85C20 		strb	r2, [r3, #92]
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7676              		.loc 1 4624 3
 7677 007a FFF7FEFF 		bl	vPortExitCritical
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
 7678              		.loc 1 4626 10
 7679 007e FB68     		ldr	r3, [r7, #12]
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7680              		.loc 1 4627 2
 7681 0080 1846     		mov	r0, r3
 7682 0082 1037     		adds	r7, r7, #16
 7683              	.LCFI316:
 7684              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccQcdK8x.s 			page 220


 7685 0084 BD46     		mov	sp, r7
 7686              	.LCFI317:
 7687              		.cfi_def_cfa_register 13
 7688              		@ sp needed
 7689 0086 80BD     		pop	{r7, pc}
 7690              	.L509:
 7691              		.align	2
 7692              	.L508:
 7693 0088 00000000 		.word	pxCurrentTCB
 7694 008c 04ED00E0 		.word	-536810236
 7695              		.cfi_endproc
 7696              	.LFE68:
 7698              		.section	.text.xTaskNotifyWait,"ax",%progbits
 7699              		.align	1
 7700              		.global	xTaskNotifyWait
 7701              		.syntax unified
 7702              		.thumb
 7703              		.thumb_func
 7704              		.fpu fpv4-sp-d16
 7706              	xTaskNotifyWait:
 7707              	.LFB69:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7708              		.loc 1 4635 2
 7709              		.cfi_startproc
 7710              		@ args = 0, pretend = 0, frame = 24
 7711              		@ frame_needed = 1, uses_anonymous_args = 0
 7712 0000 80B5     		push	{r7, lr}
 7713              	.LCFI318:
 7714              		.cfi_def_cfa_offset 8
 7715              		.cfi_offset 7, -8
 7716              		.cfi_offset 14, -4
 7717 0002 86B0     		sub	sp, sp, #24
 7718              	.LCFI319:
 7719              		.cfi_def_cfa_offset 32
 7720 0004 00AF     		add	r7, sp, #0
 7721              	.LCFI320:
 7722              		.cfi_def_cfa_register 7
 7723 0006 F860     		str	r0, [r7, #12]
 7724 0008 B960     		str	r1, [r7, #8]
 7725 000a 7A60     		str	r2, [r7, #4]
 7726 000c 3B60     		str	r3, [r7]
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7727              		.loc 1 4638 3
 7728 000e FFF7FEFF 		bl	vPortEnterCritical
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7729              		.loc 1 4641 20
ARM GAS  /tmp/ccQcdK8x.s 			page 221


 7730 0012 264B     		ldr	r3, .L516
 7731 0014 1B68     		ldr	r3, [r3]
 7732 0016 93F85C30 		ldrb	r3, [r3, #92]
 7733 001a DBB2     		uxtb	r3, r3
 7734              		.loc 1 4641 6
 7735 001c 022B     		cmp	r3, #2
 7736 001e 1AD0     		beq	.L511
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 7737              		.loc 1 4646 35
 7738 0020 224B     		ldr	r3, .L516
 7739 0022 1B68     		ldr	r3, [r3]
 7740 0024 996D     		ldr	r1, [r3, #88]
 7741              		.loc 1 4646 38
 7742 0026 FA68     		ldr	r2, [r7, #12]
 7743 0028 D243     		mvns	r2, r2
 7744              		.loc 1 4646 35
 7745 002a 0A40     		ands	r2, r2, r1
 7746 002c 9A65     		str	r2, [r3, #88]
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 7747              		.loc 1 4649 17
 7748 002e 1F4B     		ldr	r3, .L516
 7749 0030 1B68     		ldr	r3, [r3]
 7750              		.loc 1 4649 33
 7751 0032 0122     		movs	r2, #1
 7752 0034 83F85C20 		strb	r2, [r3, #92]
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
 7753              		.loc 1 4651 7
 7754 0038 3B68     		ldr	r3, [r7]
 7755 003a 002B     		cmp	r3, #0
 7756 003c 0BD0     		beq	.L511
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 7757              		.loc 1 4653 6
 7758 003e 0121     		movs	r1, #1
 7759 0040 3868     		ldr	r0, [r7]
 7760 0042 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
 7761              		.loc 1 4660 6
 7762 0046 1A4B     		ldr	r3, .L516+4
 7763 0048 4FF08052 		mov	r2, #268435456
 7764 004c 1A60     		str	r2, [r3]
 7765              		.syntax unified
 7766              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7767 004e BFF34F8F 		dsb
ARM GAS  /tmp/ccQcdK8x.s 			page 222


 7768              	@ 0 "" 2
 7769              	@ 4660 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 7770 0052 BFF36F8F 		isb
 7771              	@ 0 "" 2
 7772              		.thumb
 7773              		.syntax unified
 7774              	.L511:
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7775              		.loc 1 4672 3
 7776 0056 FFF7FEFF 		bl	vPortExitCritical
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7777              		.loc 1 4674 3
 7778 005a FFF7FEFF 		bl	vPortEnterCritical
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
 7779              		.loc 1 4678 6
 7780 005e 7B68     		ldr	r3, [r7, #4]
 7781 0060 002B     		cmp	r3, #0
 7782 0062 04D0     		beq	.L512
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 7783              		.loc 1 4682 41
 7784 0064 114B     		ldr	r3, .L516
 7785 0066 1B68     		ldr	r3, [r3]
 7786 0068 9A6D     		ldr	r2, [r3, #88]
 7787              		.loc 1 4682 27
 7788 006a 7B68     		ldr	r3, [r7, #4]
 7789 006c 1A60     		str	r2, [r3]
 7790              	.L512:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 7791              		.loc 1 4689 20
 7792 006e 0F4B     		ldr	r3, .L516
 7793 0070 1B68     		ldr	r3, [r3]
 7794 0072 93F85C30 		ldrb	r3, [r3, #92]
 7795 0076 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/ccQcdK8x.s 			page 223


 7796              		.loc 1 4689 6
 7797 0078 022B     		cmp	r3, #2
 7798 007a 02D0     		beq	.L513
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
 7799              		.loc 1 4692 13
 7800 007c 0023     		movs	r3, #0
 7801 007e 7B61     		str	r3, [r7, #20]
 7802 0080 08E0     		b	.L514
 7803              	.L513:
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 7804              		.loc 1 4698 35
 7805 0082 0A4B     		ldr	r3, .L516
 7806 0084 1B68     		ldr	r3, [r3]
 7807 0086 996D     		ldr	r1, [r3, #88]
 7808              		.loc 1 4698 38
 7809 0088 BA68     		ldr	r2, [r7, #8]
 7810 008a D243     		mvns	r2, r2
 7811              		.loc 1 4698 35
 7812 008c 0A40     		ands	r2, r2, r1
 7813 008e 9A65     		str	r2, [r3, #88]
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 7814              		.loc 1 4699 13
 7815 0090 0123     		movs	r3, #1
 7816 0092 7B61     		str	r3, [r7, #20]
 7817              	.L514:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 7818              		.loc 1 4702 16
 7819 0094 054B     		ldr	r3, .L516
 7820 0096 1B68     		ldr	r3, [r3]
 7821              		.loc 1 4702 32
 7822 0098 0022     		movs	r2, #0
 7823 009a 83F85C20 		strb	r2, [r3, #92]
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 7824              		.loc 1 4704 3
 7825 009e FFF7FEFF 		bl	vPortExitCritical
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 7826              		.loc 1 4706 10
 7827 00a2 7B69     		ldr	r3, [r7, #20]
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 7828              		.loc 1 4707 2
 7829 00a4 1846     		mov	r0, r3
 7830 00a6 1837     		adds	r7, r7, #24
 7831              	.LCFI321:
 7832              		.cfi_def_cfa_offset 8
 7833 00a8 BD46     		mov	sp, r7
 7834              	.LCFI322:
ARM GAS  /tmp/ccQcdK8x.s 			page 224


 7835              		.cfi_def_cfa_register 13
 7836              		@ sp needed
 7837 00aa 80BD     		pop	{r7, pc}
 7838              	.L517:
 7839              		.align	2
 7840              	.L516:
 7841 00ac 00000000 		.word	pxCurrentTCB
 7842 00b0 04ED00E0 		.word	-536810236
 7843              		.cfi_endproc
 7844              	.LFE69:
 7846              		.section	.text.xTaskGenericNotify,"ax",%progbits
 7847              		.align	1
 7848              		.global	xTaskGenericNotify
 7849              		.syntax unified
 7850              		.thumb
 7851              		.thumb_func
 7852              		.fpu fpv4-sp-d16
 7854              	xTaskGenericNotify:
 7855              	.LFB70:
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 7856              		.loc 1 4715 2
 7857              		.cfi_startproc
 7858              		@ args = 0, pretend = 0, frame = 40
 7859              		@ frame_needed = 1, uses_anonymous_args = 0
 7860 0000 80B5     		push	{r7, lr}
 7861              	.LCFI323:
 7862              		.cfi_def_cfa_offset 8
 7863              		.cfi_offset 7, -8
 7864              		.cfi_offset 14, -4
 7865 0002 8AB0     		sub	sp, sp, #40
 7866              	.LCFI324:
 7867              		.cfi_def_cfa_offset 48
 7868 0004 00AF     		add	r7, sp, #0
 7869              	.LCFI325:
 7870              		.cfi_def_cfa_register 7
 7871 0006 F860     		str	r0, [r7, #12]
 7872 0008 B960     		str	r1, [r7, #8]
 7873 000a 3B60     		str	r3, [r7]
 7874 000c 1346     		mov	r3, r2
 7875 000e FB71     		strb	r3, [r7, #7]
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 7876              		.loc 1 4717 13
 7877 0010 0123     		movs	r3, #1
 7878 0012 7B62     		str	r3, [r7, #36]
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 7879              		.loc 1 4720 3
 7880 0014 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccQcdK8x.s 			page 225


 7881 0016 002B     		cmp	r3, #0
 7882 0018 09D1     		bne	.L519
 7883              	.LBB226:
 7884              	.LBB227:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7885              		.loc 2 195 2 discriminator 1
 7886              		.syntax unified
 7887              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7888 001a 4FF05003 			mov r3, #80												
 7889 001e 83F31188 		msr basepri, r3											
 7890 0022 BFF36F8F 		isb														
 7891 0026 BFF34F8F 		dsb														
 7892              	
 7893              	@ 0 "" 2
 7894              		.thumb
 7895              		.syntax unified
 7896 002a BB61     		str	r3, [r7, #24]
 7897              	.L520:
 7898              	.LBE227:
 7899              	.LBE226:
 7900              		.loc 1 4720 3 discriminator 1
 7901 002c FEE7     		b	.L520
 7902              	.L519:
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 7903              		.loc 1 4721 9
 7904 002e FB68     		ldr	r3, [r7, #12]
 7905 0030 3B62     		str	r3, [r7, #32]
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 7906              		.loc 1 4723 3
 7907 0032 FFF7FEFF 		bl	vPortEnterCritical
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 7908              		.loc 1 4725 6
 7909 0036 3B68     		ldr	r3, [r7]
 7910 0038 002B     		cmp	r3, #0
 7911 003a 03D0     		beq	.L521
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 7912              		.loc 1 4727 42
 7913 003c 3B6A     		ldr	r3, [r7, #32]
 7914 003e 9A6D     		ldr	r2, [r3, #88]
 7915              		.loc 1 4727 35
 7916 0040 3B68     		ldr	r3, [r7]
 7917 0042 1A60     		str	r2, [r3]
 7918              	.L521:
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 7919              		.loc 1 4730 26
 7920 0044 3B6A     		ldr	r3, [r7, #32]
 7921 0046 93F85C30 		ldrb	r3, [r3, #92]
 7922 004a FB77     		strb	r3, [r7, #31]
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 7923              		.loc 1 4732 25
 7924 004c 3B6A     		ldr	r3, [r7, #32]
ARM GAS  /tmp/ccQcdK8x.s 			page 226


 7925 004e 0222     		movs	r2, #2
 7926 0050 83F85C20 		strb	r2, [r3, #92]
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 7927              		.loc 1 4734 4
 7928 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 7929 0056 042B     		cmp	r3, #4
 7930 0058 27D8     		bhi	.L522
 7931 005a 01A2     		adr	r2, .L524
 7932 005c 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 7933              		.p2align 2
 7934              	.L524:
 7935 0060 C9000000 		.word	.L539+1
 7936 0064 75000000 		.word	.L527+1
 7937 0068 83000000 		.word	.L526+1
 7938 006c 8F000000 		.word	.L525+1
 7939 0070 97000000 		.word	.L523+1
 7940              		.p2align 1
 7941              	.L527:
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 7942              		.loc 1 4737 29
 7943 0074 3B6A     		ldr	r3, [r7, #32]
 7944 0076 9A6D     		ldr	r2, [r3, #88]
 7945 0078 BB68     		ldr	r3, [r7, #8]
 7946 007a 1A43     		orrs	r2, r2, r3
 7947 007c 3B6A     		ldr	r3, [r7, #32]
 7948 007e 9A65     		str	r2, [r3, #88]
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7949              		.loc 1 4738 6
 7950 0080 25E0     		b	.L529
 7951              	.L526:
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 7952              		.loc 1 4741 13
 7953 0082 3B6A     		ldr	r3, [r7, #32]
 7954 0084 9B6D     		ldr	r3, [r3, #88]
 7955              		.loc 1 4741 32
 7956 0086 5A1C     		adds	r2, r3, #1
 7957 0088 3B6A     		ldr	r3, [r7, #32]
 7958 008a 9A65     		str	r2, [r3, #88]
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7959              		.loc 1 4742 6
 7960 008c 1FE0     		b	.L529
 7961              	.L525:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 7962              		.loc 1 4745 29
 7963 008e 3B6A     		ldr	r3, [r7, #32]
 7964 0090 BA68     		ldr	r2, [r7, #8]
 7965 0092 9A65     		str	r2, [r3, #88]
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7966              		.loc 1 4746 6
 7967 0094 1BE0     		b	.L529
ARM GAS  /tmp/ccQcdK8x.s 			page 227


 7968              	.L523:
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 7969              		.loc 1 4749 8
 7970 0096 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 7971 0098 022B     		cmp	r3, #2
 7972 009a 03D0     		beq	.L530
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 7973              		.loc 1 4751 30
 7974 009c 3B6A     		ldr	r3, [r7, #32]
 7975 009e BA68     		ldr	r2, [r7, #8]
 7976 00a0 9A65     		str	r2, [r3, #88]
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 7977              		.loc 1 4758 6
 7978 00a2 14E0     		b	.L529
 7979              	.L530:
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 7980              		.loc 1 4756 15
 7981 00a4 0023     		movs	r3, #0
 7982 00a6 7B62     		str	r3, [r7, #36]
 7983              		.loc 1 4758 6
 7984 00a8 11E0     		b	.L529
 7985              	.L522:
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 7986              		.loc 1 4769 6
 7987 00aa 3B6A     		ldr	r3, [r7, #32]
 7988 00ac 9B6D     		ldr	r3, [r3, #88]
 7989 00ae B3F1FF3F 		cmp	r3, #-1
 7990 00b2 0BD0     		beq	.L540
 7991              	.LBB228:
 7992              	.LBB229:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 7993              		.loc 2 195 2 discriminator 1
 7994              		.syntax unified
 7995              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 7996 00b4 4FF05003 			mov r3, #80												
 7997 00b8 83F31188 		msr basepri, r3											
 7998 00bc BFF36F8F 		isb														
 7999 00c0 BFF34F8F 		dsb														
ARM GAS  /tmp/ccQcdK8x.s 			page 228


 8000              	
 8001              	@ 0 "" 2
 8002              		.thumb
 8003              		.syntax unified
 8004 00c4 7B61     		str	r3, [r7, #20]
 8005              	.L533:
 8006              	.LBE229:
 8007              	.LBE228:
 8008              		.loc 1 4769 6 discriminator 2
 8009 00c6 FEE7     		b	.L533
 8010              	.L539:
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8011              		.loc 1 4763 6
 8012 00c8 00BF     		nop
 8013 00ca 00E0     		b	.L529
 8014              	.L540:
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 8015              		.loc 1 4771 6
 8016 00cc 00BF     		nop
 8017              	.L529:
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018              		.loc 1 4778 6
 8019 00ce FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 8020 00d0 012B     		cmp	r3, #1
 8021 00d2 39D1     		bne	.L534
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8022              		.loc 1 4780 14
 8023 00d4 3B6A     		ldr	r3, [r7, #32]
 8024 00d6 0433     		adds	r3, r3, #4
 8025 00d8 1846     		mov	r0, r3
 8026 00da FFF7FEFF 		bl	uxListRemove
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 8027              		.loc 1 4781 5
 8028 00de 3B6A     		ldr	r3, [r7, #32]
 8029 00e0 DA6A     		ldr	r2, [r3, #44]
 8030 00e2 1D4B     		ldr	r3, .L541
 8031 00e4 1B68     		ldr	r3, [r3]
 8032 00e6 9A42     		cmp	r2, r3
 8033 00e8 03D9     		bls	.L535
 8034              		.loc 1 4781 5 is_stmt 0 discriminator 1
 8035 00ea 3B6A     		ldr	r3, [r7, #32]
 8036 00ec DB6A     		ldr	r3, [r3, #44]
 8037 00ee 1A4A     		ldr	r2, .L541
 8038 00f0 1360     		str	r3, [r2]
 8039              	.L535:
 8040              		.loc 1 4781 5 discriminator 3
 8041 00f2 3B6A     		ldr	r3, [r7, #32]
 8042 00f4 DA6A     		ldr	r2, [r3, #44]
 8043 00f6 1346     		mov	r3, r2
ARM GAS  /tmp/ccQcdK8x.s 			page 229


 8044 00f8 9B00     		lsls	r3, r3, #2
 8045 00fa 1344     		add	r3, r3, r2
 8046 00fc 9B00     		lsls	r3, r3, #2
 8047 00fe 174A     		ldr	r2, .L541+4
 8048 0100 1A44     		add	r2, r2, r3
 8049 0102 3B6A     		ldr	r3, [r7, #32]
 8050 0104 0433     		adds	r3, r3, #4
 8051 0106 1946     		mov	r1, r3
 8052 0108 1046     		mov	r0, r2
 8053 010a FFF7FEFF 		bl	vListInsertEnd
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8054              		.loc 1 4784 5 is_stmt 1 discriminator 3
 8055 010e 3B6A     		ldr	r3, [r7, #32]
 8056 0110 9B6A     		ldr	r3, [r3, #40]
 8057 0112 002B     		cmp	r3, #0
 8058 0114 09D0     		beq	.L536
 8059              	.LBB230:
 8060              	.LBB231:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8061              		.loc 2 195 2 discriminator 1
 8062              		.syntax unified
 8063              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8064 0116 4FF05003 			mov r3, #80												
 8065 011a 83F31188 		msr basepri, r3											
 8066 011e BFF36F8F 		isb														
 8067 0122 BFF34F8F 		dsb														
 8068              	
 8069              	@ 0 "" 2
 8070              		.thumb
 8071              		.syntax unified
 8072 0126 3B61     		str	r3, [r7, #16]
 8073              	.L537:
 8074              	.LBE231:
 8075              	.LBE230:
 8076              		.loc 1 4784 5 discriminator 3
 8077 0128 FEE7     		b	.L537
 8078              	.L536:
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
ARM GAS  /tmp/ccQcdK8x.s 			page 230


 8079              		.loc 1 4802 14
 8080 012a 3B6A     		ldr	r3, [r7, #32]
 8081 012c DA6A     		ldr	r2, [r3, #44]
 8082              		.loc 1 4802 41
 8083 012e 0C4B     		ldr	r3, .L541+8
 8084 0130 1B68     		ldr	r3, [r3]
 8085 0132 DB6A     		ldr	r3, [r3, #44]
 8086              		.loc 1 4802 7
 8087 0134 9A42     		cmp	r2, r3
 8088 0136 07D9     		bls	.L534
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
 8089              		.loc 1 4806 6
 8090 0138 0A4B     		ldr	r3, .L541+12
 8091 013a 4FF08052 		mov	r2, #268435456
 8092 013e 1A60     		str	r2, [r3]
 8093              		.syntax unified
 8094              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 8095 0140 BFF34F8F 		dsb
 8096              	@ 0 "" 2
 8097              	@ 4806 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 8098 0144 BFF36F8F 		isb
 8099              	@ 0 "" 2
 8100              		.thumb
 8101              		.syntax unified
 8102              	.L534:
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 8103              		.loc 1 4818 3
 8104 0148 FFF7FEFF 		bl	vPortExitCritical
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 8105              		.loc 1 4820 10
 8106 014c 7B6A     		ldr	r3, [r7, #36]
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8107              		.loc 1 4821 2
 8108 014e 1846     		mov	r0, r3
 8109 0150 2837     		adds	r7, r7, #40
 8110              	.LCFI326:
 8111              		.cfi_def_cfa_offset 8
 8112 0152 BD46     		mov	sp, r7
 8113              	.LCFI327:
 8114              		.cfi_def_cfa_register 13
 8115              		@ sp needed
 8116 0154 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccQcdK8x.s 			page 231


 8117              	.L542:
 8118 0156 00BF     		.align	2
 8119              	.L541:
 8120 0158 00000000 		.word	uxTopReadyPriority
 8121 015c 00000000 		.word	pxReadyTasksLists
 8122 0160 00000000 		.word	pxCurrentTCB
 8123 0164 04ED00E0 		.word	-536810236
 8124              		.cfi_endproc
 8125              	.LFE70:
 8127              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 8128              		.align	1
 8129              		.global	xTaskGenericNotifyFromISR
 8130              		.syntax unified
 8131              		.thumb
 8132              		.thumb_func
 8133              		.fpu fpv4-sp-d16
 8135              	xTaskGenericNotifyFromISR:
 8136              	.LFB71:
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 8137              		.loc 1 4829 2
 8138              		.cfi_startproc
 8139              		@ args = 4, pretend = 0, frame = 56
 8140              		@ frame_needed = 1, uses_anonymous_args = 0
 8141 0000 80B5     		push	{r7, lr}
 8142              	.LCFI328:
 8143              		.cfi_def_cfa_offset 8
 8144              		.cfi_offset 7, -8
 8145              		.cfi_offset 14, -4
 8146 0002 8EB0     		sub	sp, sp, #56
 8147              	.LCFI329:
 8148              		.cfi_def_cfa_offset 64
 8149 0004 00AF     		add	r7, sp, #0
 8150              	.LCFI330:
 8151              		.cfi_def_cfa_register 7
 8152 0006 F860     		str	r0, [r7, #12]
 8153 0008 B960     		str	r1, [r7, #8]
 8154 000a 3B60     		str	r3, [r7]
 8155 000c 1346     		mov	r3, r2
 8156 000e FB71     		strb	r3, [r7, #7]
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
 8157              		.loc 1 4832 13
 8158 0010 0123     		movs	r3, #1
 8159 0012 7B63     		str	r3, [r7, #52]
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 8160              		.loc 1 4835 3
 8161 0014 FB68     		ldr	r3, [r7, #12]
ARM GAS  /tmp/ccQcdK8x.s 			page 232


 8162 0016 002B     		cmp	r3, #0
 8163 0018 09D1     		bne	.L544
 8164              	.LBB232:
 8165              	.LBB233:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8166              		.loc 2 195 2 discriminator 1
 8167              		.syntax unified
 8168              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8169 001a 4FF05003 			mov r3, #80												
 8170 001e 83F31188 		msr basepri, r3											
 8171 0022 BFF36F8F 		isb														
 8172 0026 BFF34F8F 		dsb														
 8173              	
 8174              	@ 0 "" 2
 8175              		.thumb
 8176              		.syntax unified
 8177 002a 7B62     		str	r3, [r7, #36]
 8178              	.L545:
 8179              	.LBE233:
 8180              	.LBE232:
 8181              		.loc 1 4835 3 discriminator 1
 8182 002c FEE7     		b	.L545
 8183              	.L544:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8184              		.loc 1 4853 3
 8185 002e FFF7FEFF 		bl	vPortValidateInterruptPriority
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 8186              		.loc 1 4855 9
 8187 0032 FB68     		ldr	r3, [r7, #12]
 8188 0034 3B63     		str	r3, [r7, #48]
 8189              	.LBB234:
 8190              	.LBB235:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8191              		.loc 2 211 2
 8192              		.syntax unified
 8193              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8194 0036 EFF31182 			mrs r2, basepri											
 8195 003a 4FF05003 		mov r3, #80												
 8196 003e 83F31188 		msr basepri, r3											
ARM GAS  /tmp/ccQcdK8x.s 			page 233


 8197 0042 BFF36F8F 		isb														
 8198 0046 BFF34F8F 		dsb														
 8199              	
 8200              	@ 0 "" 2
 8201              		.thumb
 8202              		.syntax unified
 8203 004a 3A62     		str	r2, [r7, #32]
 8204 004c FB61     		str	r3, [r7, #28]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 8205              		.loc 2 223 9
 8206 004e 3B6A     		ldr	r3, [r7, #32]
 8207              	.LBE235:
 8208              	.LBE234:
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8209              		.loc 1 4857 28
 8210 0050 FB62     		str	r3, [r7, #44]
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
 8211              		.loc 1 4859 6
 8212 0052 3B68     		ldr	r3, [r7]
 8213 0054 002B     		cmp	r3, #0
 8214 0056 03D0     		beq	.L547
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8215              		.loc 1 4861 42
 8216 0058 3B6B     		ldr	r3, [r7, #48]
 8217 005a 9A6D     		ldr	r2, [r3, #88]
 8218              		.loc 1 4861 35
 8219 005c 3B68     		ldr	r3, [r7]
 8220 005e 1A60     		str	r2, [r3]
 8221              	.L547:
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8222              		.loc 1 4864 26
 8223 0060 3B6B     		ldr	r3, [r7, #48]
 8224 0062 93F85C30 		ldrb	r3, [r3, #92]
 8225 0066 87F82B30 		strb	r3, [r7, #43]
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8226              		.loc 1 4865 25
 8227 006a 3B6B     		ldr	r3, [r7, #48]
 8228 006c 0222     		movs	r2, #2
 8229 006e 83F85C20 		strb	r2, [r3, #92]
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
 8230              		.loc 1 4867 4
 8231 0072 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 8232 0074 042B     		cmp	r3, #4
 8233 0076 29D8     		bhi	.L548
 8234 0078 01A2     		adr	r2, .L550
 8235 007a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 8236 007e 00BF     		.p2align 2
 8237              	.L550:
 8238 0080 EB000000 		.word	.L568+1
 8239 0084 95000000 		.word	.L553+1
 8240 0088 A3000000 		.word	.L552+1
ARM GAS  /tmp/ccQcdK8x.s 			page 234


 8241 008c AF000000 		.word	.L551+1
 8242 0090 B7000000 		.word	.L549+1
 8243              		.p2align 1
 8244              	.L553:
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
 8245              		.loc 1 4870 29
 8246 0094 3B6B     		ldr	r3, [r7, #48]
 8247 0096 9A6D     		ldr	r2, [r3, #88]
 8248 0098 BB68     		ldr	r3, [r7, #8]
 8249 009a 1A43     		orrs	r2, r2, r3
 8250 009c 3B6B     		ldr	r3, [r7, #48]
 8251 009e 9A65     		str	r2, [r3, #88]
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 8252              		.loc 1 4871 6
 8253 00a0 26E0     		b	.L555
 8254              	.L552:
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
 8255              		.loc 1 4874 13
 8256 00a2 3B6B     		ldr	r3, [r7, #48]
 8257 00a4 9B6D     		ldr	r3, [r3, #88]
 8258              		.loc 1 4874 32
 8259 00a6 5A1C     		adds	r2, r3, #1
 8260 00a8 3B6B     		ldr	r3, [r7, #48]
 8261 00aa 9A65     		str	r2, [r3, #88]
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 8262              		.loc 1 4875 6
 8263 00ac 20E0     		b	.L555
 8264              	.L551:
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
 8265              		.loc 1 4878 29
 8266 00ae 3B6B     		ldr	r3, [r7, #48]
 8267 00b0 BA68     		ldr	r2, [r7, #8]
 8268 00b2 9A65     		str	r2, [r3, #88]
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 8269              		.loc 1 4879 6
 8270 00b4 1CE0     		b	.L555
 8271              	.L549:
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8272              		.loc 1 4882 8
 8273 00b6 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 8274 00ba 022B     		cmp	r3, #2
 8275 00bc 03D0     		beq	.L556
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
 8276              		.loc 1 4884 30
 8277 00be 3B6B     		ldr	r3, [r7, #48]
 8278 00c0 BA68     		ldr	r2, [r7, #8]
 8279 00c2 9A65     		str	r2, [r3, #88]
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  /tmp/ccQcdK8x.s 			page 235


4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 8280              		.loc 1 4891 6
 8281 00c4 14E0     		b	.L555
 8282              	.L556:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 8283              		.loc 1 4889 15
 8284 00c6 0023     		movs	r3, #0
 8285 00c8 7B63     		str	r3, [r7, #52]
 8286              		.loc 1 4891 6
 8287 00ca 11E0     		b	.L555
 8288              	.L548:
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				default:
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Should not get here if all enums are handled.
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Artificially force an assert by testing a value the
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					compiler can't assume is const. */
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8289              		.loc 1 4902 6
 8290 00cc 3B6B     		ldr	r3, [r7, #48]
 8291 00ce 9B6D     		ldr	r3, [r3, #88]
 8292 00d0 B3F1FF3F 		cmp	r3, #-1
 8293 00d4 0BD0     		beq	.L569
 8294              	.LBB236:
 8295              	.LBB237:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8296              		.loc 2 195 2 discriminator 1
 8297              		.syntax unified
 8298              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8299 00d6 4FF05003 			mov r3, #80												
 8300 00da 83F31188 		msr basepri, r3											
 8301 00de BFF36F8F 		isb														
 8302 00e2 BFF34F8F 		dsb														
 8303              	
 8304              	@ 0 "" 2
 8305              		.thumb
 8306              		.syntax unified
 8307 00e6 BB61     		str	r3, [r7, #24]
 8308              	.L559:
 8309              	.LBE237:
 8310              	.LBE236:
 8311              		.loc 1 4902 6 discriminator 2
 8312 00e8 FEE7     		b	.L559
 8313              	.L568:
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8314              		.loc 1 4896 6
 8315 00ea 00BF     		nop
 8316 00ec 00E0     		b	.L555
ARM GAS  /tmp/ccQcdK8x.s 			page 236


 8317              	.L569:
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 8318              		.loc 1 4903 6
 8319 00ee 00BF     		nop
 8320              	.L555:
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8321              		.loc 1 4910 6
 8322 00f0 97F82B30 		ldrb	r3, [r7, #43]	@ zero_extendqisi2
 8323 00f4 012B     		cmp	r3, #1
 8324 00f6 45D1     		bne	.L560
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8325              		.loc 1 4913 5
 8326 00f8 3B6B     		ldr	r3, [r7, #48]
 8327 00fa 9B6A     		ldr	r3, [r3, #40]
 8328 00fc 002B     		cmp	r3, #0
 8329 00fe 09D0     		beq	.L561
 8330              	.LBB238:
 8331              	.LBB239:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8332              		.loc 2 195 2 discriminator 1
 8333              		.syntax unified
 8334              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8335 0100 4FF05003 			mov r3, #80												
 8336 0104 83F31188 		msr basepri, r3											
 8337 0108 BFF36F8F 		isb														
 8338 010c BFF34F8F 		dsb														
 8339              	
 8340              	@ 0 "" 2
 8341              		.thumb
 8342              		.syntax unified
 8343 0110 7B61     		str	r3, [r7, #20]
 8344              	.L562:
 8345              	.LBE239:
 8346              	.LBE238:
 8347              		.loc 1 4913 5 discriminator 3
 8348 0112 FEE7     		b	.L562
 8349              	.L561:
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8350              		.loc 1 4915 30
 8351 0114 204B     		ldr	r3, .L570
 8352 0116 1B68     		ldr	r3, [r3]
 8353              		.loc 1 4915 7
 8354 0118 002B     		cmp	r3, #0
 8355 011a 1DD1     		bne	.L563
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8356              		.loc 1 4917 15
 8357 011c 3B6B     		ldr	r3, [r7, #48]
ARM GAS  /tmp/ccQcdK8x.s 			page 237


 8358 011e 0433     		adds	r3, r3, #4
 8359 0120 1846     		mov	r0, r3
 8360 0122 FFF7FEFF 		bl	uxListRemove
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 8361              		.loc 1 4918 6
 8362 0126 3B6B     		ldr	r3, [r7, #48]
 8363 0128 DA6A     		ldr	r2, [r3, #44]
 8364 012a 1C4B     		ldr	r3, .L570+4
 8365 012c 1B68     		ldr	r3, [r3]
 8366 012e 9A42     		cmp	r2, r3
 8367 0130 03D9     		bls	.L564
 8368              		.loc 1 4918 6 is_stmt 0 discriminator 1
 8369 0132 3B6B     		ldr	r3, [r7, #48]
 8370 0134 DB6A     		ldr	r3, [r3, #44]
 8371 0136 194A     		ldr	r2, .L570+4
 8372 0138 1360     		str	r3, [r2]
 8373              	.L564:
 8374              		.loc 1 4918 6 discriminator 3
 8375 013a 3B6B     		ldr	r3, [r7, #48]
 8376 013c DA6A     		ldr	r2, [r3, #44]
 8377 013e 1346     		mov	r3, r2
 8378 0140 9B00     		lsls	r3, r3, #2
 8379 0142 1344     		add	r3, r3, r2
 8380 0144 9B00     		lsls	r3, r3, #2
 8381 0146 164A     		ldr	r2, .L570+8
 8382 0148 1A44     		add	r2, r2, r3
 8383 014a 3B6B     		ldr	r3, [r7, #48]
 8384 014c 0433     		adds	r3, r3, #4
 8385 014e 1946     		mov	r1, r3
 8386 0150 1046     		mov	r0, r2
 8387 0152 FFF7FEFF 		bl	vListInsertEnd
 8388 0156 05E0     		b	.L565
 8389              	.L563:
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8390              		.loc 1 4924 6 is_stmt 1
 8391 0158 3B6B     		ldr	r3, [r7, #48]
 8392 015a 1833     		adds	r3, r3, #24
 8393 015c 1946     		mov	r1, r3
 8394 015e 1148     		ldr	r0, .L570+12
 8395 0160 FFF7FEFF 		bl	vListInsertEnd
 8396              	.L565:
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8397              		.loc 1 4927 14
 8398 0164 3B6B     		ldr	r3, [r7, #48]
 8399 0166 DA6A     		ldr	r2, [r3, #44]
 8400              		.loc 1 4927 41
 8401 0168 0F4B     		ldr	r3, .L570+16
 8402 016a 1B68     		ldr	r3, [r3]
 8403 016c DB6A     		ldr	r3, [r3, #44]
 8404              		.loc 1 4927 7
ARM GAS  /tmp/ccQcdK8x.s 			page 238


 8405 016e 9A42     		cmp	r2, r3
 8406 0170 08D9     		bls	.L560
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 8407              		.loc 1 4931 8
 8408 0172 3B6C     		ldr	r3, [r7, #64]
 8409 0174 002B     		cmp	r3, #0
 8410 0176 02D0     		beq	.L566
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 8411              		.loc 1 4933 34
 8412 0178 3B6C     		ldr	r3, [r7, #64]
 8413 017a 0122     		movs	r2, #1
 8414 017c 1A60     		str	r2, [r3]
 8415              	.L566:
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter to an ISR
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 8416              		.loc 1 4939 20
 8417 017e 0B4B     		ldr	r3, .L570+20
 8418 0180 0122     		movs	r2, #1
 8419 0182 1A60     		str	r2, [r3]
 8420              	.L560:
 8421 0184 FB6A     		ldr	r3, [r7, #44]
 8422 0186 3B61     		str	r3, [r7, #16]
 8423              	.LBB240:
 8424              	.LBB241:
 8425              		.loc 2 229 2
 8426 0188 3B69     		ldr	r3, [r7, #16]
 8427              		.syntax unified
 8428              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8429 018a 83F31188 			msr basepri, r3	
 8430              	@ 0 "" 2
 8431              		.thumb
 8432              		.syntax unified
 8433              	.LBE241:
 8434              	.LBE240:
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 8435              		.loc 1 4949 10
 8436 018e 7B6B     		ldr	r3, [r7, #52]
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8437              		.loc 1 4950 2
 8438 0190 1846     		mov	r0, r3
ARM GAS  /tmp/ccQcdK8x.s 			page 239


 8439 0192 3837     		adds	r7, r7, #56
 8440              	.LCFI331:
 8441              		.cfi_def_cfa_offset 8
 8442 0194 BD46     		mov	sp, r7
 8443              	.LCFI332:
 8444              		.cfi_def_cfa_register 13
 8445              		@ sp needed
 8446 0196 80BD     		pop	{r7, pc}
 8447              	.L571:
 8448              		.align	2
 8449              	.L570:
 8450 0198 00000000 		.word	uxSchedulerSuspended
 8451 019c 00000000 		.word	uxTopReadyPriority
 8452 01a0 00000000 		.word	pxReadyTasksLists
 8453 01a4 00000000 		.word	xPendingReadyList
 8454 01a8 00000000 		.word	pxCurrentTCB
 8455 01ac 00000000 		.word	xYieldPending
 8456              		.cfi_endproc
 8457              	.LFE71:
 8459              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 8460              		.align	1
 8461              		.global	vTaskNotifyGiveFromISR
 8462              		.syntax unified
 8463              		.thumb
 8464              		.thumb_func
 8465              		.fpu fpv4-sp-d16
 8467              	vTaskNotifyGiveFromISR:
 8468              	.LFB72:
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 8469              		.loc 1 4958 2
 8470              		.cfi_startproc
 8471              		@ args = 0, pretend = 0, frame = 40
 8472              		@ frame_needed = 1, uses_anonymous_args = 0
 8473 0000 80B5     		push	{r7, lr}
 8474              	.LCFI333:
 8475              		.cfi_def_cfa_offset 8
 8476              		.cfi_offset 7, -8
 8477              		.cfi_offset 14, -4
 8478 0002 8AB0     		sub	sp, sp, #40
 8479              	.LCFI334:
 8480              		.cfi_def_cfa_offset 48
 8481 0004 00AF     		add	r7, sp, #0
 8482              	.LCFI335:
 8483              		.cfi_def_cfa_register 7
 8484 0006 7860     		str	r0, [r7, #4]
 8485 0008 3960     		str	r1, [r7]
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 240


4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
 8486              		.loc 1 4963 3
 8487 000a 7B68     		ldr	r3, [r7, #4]
 8488 000c 002B     		cmp	r3, #0
 8489 000e 09D1     		bne	.L573
 8490              	.LBB242:
 8491              	.LBB243:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8492              		.loc 2 195 2 discriminator 1
 8493              		.syntax unified
 8494              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8495 0010 4FF05003 			mov r3, #80												
 8496 0014 83F31188 		msr basepri, r3											
 8497 0018 BFF36F8F 		isb														
 8498 001c BFF34F8F 		dsb														
 8499              	
 8500              	@ 0 "" 2
 8501              		.thumb
 8502              		.syntax unified
 8503 0020 BB61     		str	r3, [r7, #24]
 8504              	.L574:
 8505              	.LBE243:
 8506              	.LBE242:
 8507              		.loc 1 4963 3 discriminator 1
 8508 0022 FEE7     		b	.L574
 8509              	.L573:
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8510              		.loc 1 4981 3
 8511 0024 FFF7FEFF 		bl	vPortValidateInterruptPriority
4982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = xTaskToNotify;
 8512              		.loc 1 4983 9
 8513 0028 7B68     		ldr	r3, [r7, #4]
 8514 002a 7B62     		str	r3, [r7, #36]
 8515              	.LBB244:
 8516              	.LBB245:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8517              		.loc 2 211 2
 8518              		.syntax unified
 8519              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccQcdK8x.s 			page 241


 8520 002c EFF31182 			mrs r2, basepri											
 8521 0030 4FF05003 		mov r3, #80												
 8522 0034 83F31188 		msr basepri, r3											
 8523 0038 BFF36F8F 		isb														
 8524 003c BFF34F8F 		dsb														
 8525              	
 8526              	@ 0 "" 2
 8527              		.thumb
 8528              		.syntax unified
 8529 0040 7A61     		str	r2, [r7, #20]
 8530 0042 3B61     		str	r3, [r7, #16]
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 8531              		.loc 2 223 9
 8532 0044 7B69     		ldr	r3, [r7, #20]
 8533              	.LBE245:
 8534              	.LBE244:
4984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8535              		.loc 1 4985 28
 8536 0046 3B62     		str	r3, [r7, #32]
4986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8537              		.loc 1 4987 26
 8538 0048 7B6A     		ldr	r3, [r7, #36]
 8539 004a 93F85C30 		ldrb	r3, [r3, #92]
 8540 004e FB77     		strb	r3, [r7, #31]
4988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8541              		.loc 1 4988 25
 8542 0050 7B6A     		ldr	r3, [r7, #36]
 8543 0052 0222     		movs	r2, #2
 8544 0054 83F85C20 		strb	r2, [r3, #92]
4989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
 8545              		.loc 1 4992 11
 8546 0058 7B6A     		ldr	r3, [r7, #36]
 8547 005a 9B6D     		ldr	r3, [r3, #88]
 8548              		.loc 1 4992 30
 8549 005c 5A1C     		adds	r2, r3, #1
 8550 005e 7B6A     		ldr	r3, [r7, #36]
 8551 0060 9A65     		str	r2, [r3, #88]
4993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8552              		.loc 1 4998 6
 8553 0062 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 8554 0064 012B     		cmp	r3, #1
 8555 0066 45D1     		bne	.L576
4999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
5001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8556              		.loc 1 5001 5
 8557 0068 7B6A     		ldr	r3, [r7, #36]
ARM GAS  /tmp/ccQcdK8x.s 			page 242


 8558 006a 9B6A     		ldr	r3, [r3, #40]
 8559 006c 002B     		cmp	r3, #0
 8560 006e 09D0     		beq	.L577
 8561              	.LBB246:
 8562              	.LBB247:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 8563              		.loc 2 195 2 discriminator 1
 8564              		.syntax unified
 8565              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8566 0070 4FF05003 			mov r3, #80												
 8567 0074 83F31188 		msr basepri, r3											
 8568 0078 BFF36F8F 		isb														
 8569 007c BFF34F8F 		dsb														
 8570              	
 8571              	@ 0 "" 2
 8572              		.thumb
 8573              		.syntax unified
 8574 0080 FB60     		str	r3, [r7, #12]
 8575              	.L578:
 8576              	.LBE247:
 8577              	.LBE246:
 8578              		.loc 1 5001 5 discriminator 2
 8579 0082 FEE7     		b	.L578
 8580              	.L577:
5002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8581              		.loc 1 5003 30
 8582 0084 204B     		ldr	r3, .L583
 8583 0086 1B68     		ldr	r3, [r3]
 8584              		.loc 1 5003 7
 8585 0088 002B     		cmp	r3, #0
 8586 008a 1DD1     		bne	.L579
5004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8587              		.loc 1 5005 15
 8588 008c 7B6A     		ldr	r3, [r7, #36]
 8589 008e 0433     		adds	r3, r3, #4
 8590 0090 1846     		mov	r0, r3
 8591 0092 FFF7FEFF 		bl	uxListRemove
5006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 8592              		.loc 1 5006 6
 8593 0096 7B6A     		ldr	r3, [r7, #36]
 8594 0098 DA6A     		ldr	r2, [r3, #44]
 8595 009a 1C4B     		ldr	r3, .L583+4
 8596 009c 1B68     		ldr	r3, [r3]
 8597 009e 9A42     		cmp	r2, r3
 8598 00a0 03D9     		bls	.L580
 8599              		.loc 1 5006 6 is_stmt 0 discriminator 1
 8600 00a2 7B6A     		ldr	r3, [r7, #36]
 8601 00a4 DB6A     		ldr	r3, [r3, #44]
 8602 00a6 194A     		ldr	r2, .L583+4
 8603 00a8 1360     		str	r3, [r2]
 8604              	.L580:
 8605              		.loc 1 5006 6 discriminator 3
 8606 00aa 7B6A     		ldr	r3, [r7, #36]
 8607 00ac DA6A     		ldr	r2, [r3, #44]
 8608 00ae 1346     		mov	r3, r2
ARM GAS  /tmp/ccQcdK8x.s 			page 243


 8609 00b0 9B00     		lsls	r3, r3, #2
 8610 00b2 1344     		add	r3, r3, r2
 8611 00b4 9B00     		lsls	r3, r3, #2
 8612 00b6 164A     		ldr	r2, .L583+8
 8613 00b8 1A44     		add	r2, r2, r3
 8614 00ba 7B6A     		ldr	r3, [r7, #36]
 8615 00bc 0433     		adds	r3, r3, #4
 8616 00be 1946     		mov	r1, r3
 8617 00c0 1046     		mov	r0, r2
 8618 00c2 FFF7FEFF 		bl	vListInsertEnd
 8619 00c6 05E0     		b	.L581
 8620              	.L579:
5007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
5011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
5012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8621              		.loc 1 5012 6 is_stmt 1
 8622 00c8 7B6A     		ldr	r3, [r7, #36]
 8623 00ca 1833     		adds	r3, r3, #24
 8624 00cc 1946     		mov	r1, r3
 8625 00ce 1148     		ldr	r0, .L583+12
 8626 00d0 FFF7FEFF 		bl	vListInsertEnd
 8627              	.L581:
5013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8628              		.loc 1 5015 14
 8629 00d4 7B6A     		ldr	r3, [r7, #36]
 8630 00d6 DA6A     		ldr	r2, [r3, #44]
 8631              		.loc 1 5015 41
 8632 00d8 0F4B     		ldr	r3, .L583+16
 8633 00da 1B68     		ldr	r3, [r3]
 8634 00dc DB6A     		ldr	r3, [r3, #44]
 8635              		.loc 1 5015 7
 8636 00de 9A42     		cmp	r2, r3
 8637 00e0 08D9     		bls	.L576
5016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
5018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
5019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
 8638              		.loc 1 5019 8
 8639 00e2 3B68     		ldr	r3, [r7]
 8640 00e4 002B     		cmp	r3, #0
 8641 00e6 02D0     		beq	.L582
5020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
5021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
 8642              		.loc 1 5021 34
 8643 00e8 3B68     		ldr	r3, [r7]
 8644 00ea 0122     		movs	r2, #1
 8645 00ec 1A60     		str	r2, [r3]
 8646              	.L582:
5022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
5023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Mark that a yield is pending in case the user is not
5025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					using the "xHigherPriorityTaskWoken" parameter in an ISR
ARM GAS  /tmp/ccQcdK8x.s 			page 244


5026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					safe FreeRTOS function. */
5027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldPending = pdTRUE;
 8647              		.loc 1 5027 20
 8648 00ee 0B4B     		ldr	r3, .L583+20
 8649 00f0 0122     		movs	r2, #1
 8650 00f2 1A60     		str	r2, [r3]
 8651              	.L576:
 8652 00f4 3B6A     		ldr	r3, [r7, #32]
 8653 00f6 BB60     		str	r3, [r7, #8]
 8654              	.LBB248:
 8655              	.LBB249:
 8656              		.loc 2 229 2
 8657 00f8 BB68     		ldr	r3, [r7, #8]
 8658              		.syntax unified
 8659              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 8660 00fa 83F31188 			msr basepri, r3	
 8661              	@ 0 "" 2
 8662              		.thumb
 8663              		.syntax unified
 8664              	.LBE249:
 8665              	.LBE248:
5028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
5036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8666              		.loc 1 5036 2
 8667 00fe 00BF     		nop
 8668 0100 2837     		adds	r7, r7, #40
 8669              	.LCFI336:
 8670              		.cfi_def_cfa_offset 8
 8671 0102 BD46     		mov	sp, r7
 8672              	.LCFI337:
 8673              		.cfi_def_cfa_register 13
 8674              		@ sp needed
 8675 0104 80BD     		pop	{r7, pc}
 8676              	.L584:
 8677 0106 00BF     		.align	2
 8678              	.L583:
 8679 0108 00000000 		.word	uxSchedulerSuspended
 8680 010c 00000000 		.word	uxTopReadyPriority
 8681 0110 00000000 		.word	pxReadyTasksLists
 8682 0114 00000000 		.word	xPendingReadyList
 8683 0118 00000000 		.word	pxCurrentTCB
 8684 011c 00000000 		.word	xYieldPending
 8685              		.cfi_endproc
 8686              	.LFE72:
 8688              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 8689              		.align	1
 8690              		.global	xTaskNotifyStateClear
 8691              		.syntax unified
 8692              		.thumb
 8693              		.thumb_func
ARM GAS  /tmp/ccQcdK8x.s 			page 245


 8694              		.fpu fpv4-sp-d16
 8696              	xTaskNotifyStateClear:
 8697              	.LFB73:
5037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
5043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
5045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 8698              		.loc 1 5045 2
 8699              		.cfi_startproc
 8700              		@ args = 0, pretend = 0, frame = 16
 8701              		@ frame_needed = 1, uses_anonymous_args = 0
 8702 0000 80B5     		push	{r7, lr}
 8703              	.LCFI338:
 8704              		.cfi_def_cfa_offset 8
 8705              		.cfi_offset 7, -8
 8706              		.cfi_offset 14, -4
 8707 0002 84B0     		sub	sp, sp, #16
 8708              	.LCFI339:
 8709              		.cfi_def_cfa_offset 24
 8710 0004 00AF     		add	r7, sp, #0
 8711              	.LCFI340:
 8712              		.cfi_def_cfa_register 7
 8713 0006 7860     		str	r0, [r7, #4]
5046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
5047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
5048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
5050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
5051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
 8714              		.loc 1 5051 11
 8715 0008 7B68     		ldr	r3, [r7, #4]
 8716 000a 002B     		cmp	r3, #0
 8717 000c 02D1     		bne	.L586
 8718              		.loc 1 5051 11 is_stmt 0 discriminator 1
 8719 000e 0E4B     		ldr	r3, .L591
 8720 0010 1B68     		ldr	r3, [r3]
 8721 0012 00E0     		b	.L587
 8722              	.L586:
 8723              		.loc 1 5051 11 discriminator 2
 8724 0014 7B68     		ldr	r3, [r7, #4]
 8725              	.L587:
 8726              		.loc 1 5051 9 is_stmt 1 discriminator 4
 8727 0016 BB60     		str	r3, [r7, #8]
5052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
 8728              		.loc 1 5053 3 discriminator 4
 8729 0018 FFF7FEFF 		bl	vPortEnterCritical
5054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8730              		.loc 1 5055 13 discriminator 4
 8731 001c BB68     		ldr	r3, [r7, #8]
 8732 001e 93F85C30 		ldrb	r3, [r3, #92]
ARM GAS  /tmp/ccQcdK8x.s 			page 246


 8733 0022 DBB2     		uxtb	r3, r3
 8734              		.loc 1 5055 6 discriminator 4
 8735 0024 022B     		cmp	r3, #2
 8736 0026 06D1     		bne	.L588
5056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8737              		.loc 1 5057 26
 8738 0028 BB68     		ldr	r3, [r7, #8]
 8739 002a 0022     		movs	r2, #0
 8740 002c 83F85C20 		strb	r2, [r3, #92]
5058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 8741              		.loc 1 5058 13
 8742 0030 0123     		movs	r3, #1
 8743 0032 FB60     		str	r3, [r7, #12]
 8744 0034 01E0     		b	.L589
 8745              	.L588:
5059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
 8746              		.loc 1 5062 13
 8747 0036 0023     		movs	r3, #0
 8748 0038 FB60     		str	r3, [r7, #12]
 8749              	.L589:
5063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
 8750              		.loc 1 5065 3
 8751 003a FFF7FEFF 		bl	vPortExitCritical
5066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 8752              		.loc 1 5067 10
 8753 003e FB68     		ldr	r3, [r7, #12]
5068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 8754              		.loc 1 5068 2
 8755 0040 1846     		mov	r0, r3
 8756 0042 1037     		adds	r7, r7, #16
 8757              	.LCFI341:
 8758              		.cfi_def_cfa_offset 8
 8759 0044 BD46     		mov	sp, r7
 8760              	.LCFI342:
 8761              		.cfi_def_cfa_register 13
 8762              		@ sp needed
 8763 0046 80BD     		pop	{r7, pc}
 8764              	.L592:
 8765              		.align	2
 8766              	.L591:
 8767 0048 00000000 		.word	pxCurrentTCB
 8768              		.cfi_endproc
 8769              	.LFE73:
 8771              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 8772              		.align	1
 8773              		.syntax unified
 8774              		.thumb
 8775              		.thumb_func
 8776              		.fpu fpv4-sp-d16
 8778              	prvAddCurrentTaskToDelayedList:
ARM GAS  /tmp/ccQcdK8x.s 			page 247


 8779              	.LFB74:
5069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
5071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) )
5074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTaskGetIdleRunTimeCounter( void )
5075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle->ulRunTimeCounter;
5077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
5079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
5080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
5082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 8780              		.loc 1 5082 1
 8781              		.cfi_startproc
 8782              		@ args = 0, pretend = 0, frame = 16
 8783              		@ frame_needed = 1, uses_anonymous_args = 0
 8784 0000 80B5     		push	{r7, lr}
 8785              	.LCFI343:
 8786              		.cfi_def_cfa_offset 8
 8787              		.cfi_offset 7, -8
 8788              		.cfi_offset 14, -4
 8789 0002 84B0     		sub	sp, sp, #16
 8790              	.LCFI344:
 8791              		.cfi_def_cfa_offset 24
 8792 0004 00AF     		add	r7, sp, #0
 8793              	.LCFI345:
 8794              		.cfi_def_cfa_register 7
 8795 0006 7860     		str	r0, [r7, #4]
 8796 0008 3960     		str	r1, [r7]
5083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
5084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 8797              		.loc 1 5084 18
 8798 000a 214B     		ldr	r3, .L598
 8799 000c 1B68     		ldr	r3, [r3]
 8800 000e FB60     		str	r3, [r7, #12]
5085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
5087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
5089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
5090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
5091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
5092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
5094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
5096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
5097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8801              		.loc 1 5097 35
 8802 0010 204B     		ldr	r3, .L598+4
 8803 0012 1B68     		ldr	r3, [r3]
 8804              		.loc 1 5097 6
 8805 0014 0433     		adds	r3, r3, #4
 8806 0016 1846     		mov	r0, r3
ARM GAS  /tmp/ccQcdK8x.s 			page 248


 8807 0018 FFF7FEFF 		bl	uxListRemove
5098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
5100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
5101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentT
5102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
5104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
5106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
5109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8808              		.loc 1 5110 5
 8809 001c 7B68     		ldr	r3, [r7, #4]
 8810 001e B3F1FF3F 		cmp	r3, #-1
 8811 0022 0AD1     		bne	.L594
 8812              		.loc 1 5110 41 discriminator 1
 8813 0024 3B68     		ldr	r3, [r7]
 8814 0026 002B     		cmp	r3, #0
 8815 0028 07D0     		beq	.L594
5111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
5113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
5114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
5115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8816              		.loc 1 5115 56
 8817 002a 1A4B     		ldr	r3, .L598+4
 8818 002c 1B68     		ldr	r3, [r3]
 8819              		.loc 1 5115 4
 8820 002e 0433     		adds	r3, r3, #4
 8821 0030 1946     		mov	r1, r3
 8822 0032 1948     		ldr	r0, .L598+8
 8823 0034 FFF7FEFF 		bl	vListInsertEnd
5116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
5120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
5121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
5123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
5128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
5130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
5136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
ARM GAS  /tmp/ccQcdK8x.s 			page 249


5138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
5140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
5141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
5143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
5145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
5147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
5148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
5149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
5150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
5154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
5155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
5156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
5157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
5158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
5159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
5161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
5162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
5164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
5166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
5169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
5170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			too. */
5176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
5181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
5182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
5184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
5185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
5186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
5189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
5190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 8824              		.loc 1 5190 1
 8825 0038 26E0     		b	.L597
 8826              	.L594:
5122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccQcdK8x.s 			page 250


 8827              		.loc 1 5122 16
 8828 003a FA68     		ldr	r2, [r7, #12]
 8829 003c 7B68     		ldr	r3, [r7, #4]
 8830 003e 1344     		add	r3, r3, r2
 8831 0040 BB60     		str	r3, [r7, #8]
5125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8832              		.loc 1 5125 4
 8833 0042 144B     		ldr	r3, .L598+4
 8834 0044 1B68     		ldr	r3, [r3]
 8835 0046 BA68     		ldr	r2, [r7, #8]
 8836 0048 5A60     		str	r2, [r3, #4]
5127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 8837              		.loc 1 5127 6
 8838 004a BA68     		ldr	r2, [r7, #8]
 8839 004c FB68     		ldr	r3, [r7, #12]
 8840 004e 9A42     		cmp	r2, r3
 8841 0050 09D2     		bcs	.L596
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8842              		.loc 1 5131 5
 8843 0052 124B     		ldr	r3, .L598+12
 8844 0054 1A68     		ldr	r2, [r3]
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8845              		.loc 1 5131 60
 8846 0056 0F4B     		ldr	r3, .L598+4
 8847 0058 1B68     		ldr	r3, [r3]
5131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 8848              		.loc 1 5131 5
 8849 005a 0433     		adds	r3, r3, #4
 8850 005c 1946     		mov	r1, r3
 8851 005e 1046     		mov	r0, r2
 8852 0060 FFF7FEFF 		bl	vListInsert
 8853              		.loc 1 5190 1
 8854 0064 10E0     		b	.L597
 8855              	.L596:
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8856              		.loc 1 5137 5
 8857 0066 0E4B     		ldr	r3, .L598+16
 8858 0068 1A68     		ldr	r2, [r3]
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8859              		.loc 1 5137 52
 8860 006a 0A4B     		ldr	r3, .L598+4
 8861 006c 1B68     		ldr	r3, [r3]
5137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 8862              		.loc 1 5137 5
 8863 006e 0433     		adds	r3, r3, #4
 8864 0070 1946     		mov	r1, r3
 8865 0072 1046     		mov	r0, r2
 8866 0074 FFF7FEFF 		bl	vListInsert
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8867              		.loc 1 5142 21
 8868 0078 0A4B     		ldr	r3, .L598+20
 8869 007a 1B68     		ldr	r3, [r3]
5142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 8870              		.loc 1 5142 7
 8871 007c BA68     		ldr	r2, [r7, #8]
 8872 007e 9A42     		cmp	r2, r3
 8873 0080 02D2     		bcs	.L597
ARM GAS  /tmp/ccQcdK8x.s 			page 251


5144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 8874              		.loc 1 5144 27
 8875 0082 084A     		ldr	r2, .L598+20
 8876 0084 BB68     		ldr	r3, [r7, #8]
 8877 0086 1360     		str	r3, [r2]
 8878              	.L597:
 8879              		.loc 1 5190 1
 8880 0088 00BF     		nop
 8881 008a 1037     		adds	r7, r7, #16
 8882              	.LCFI346:
 8883              		.cfi_def_cfa_offset 8
 8884 008c BD46     		mov	sp, r7
 8885              	.LCFI347:
 8886              		.cfi_def_cfa_register 13
 8887              		@ sp needed
 8888 008e 80BD     		pop	{r7, pc}
 8889              	.L599:
 8890              		.align	2
 8891              	.L598:
 8892 0090 00000000 		.word	xTickCount
 8893 0094 00000000 		.word	pxCurrentTCB
 8894 0098 00000000 		.word	xSuspendedTaskList
 8895 009c 00000000 		.word	pxOverflowDelayedTaskList
 8896 00a0 00000000 		.word	pxDelayedTaskList
 8897 00a4 00000000 		.word	xNextTaskUnblockTime
 8898              		.cfi_endproc
 8899              	.LFE74:
 8901              		.text
 8902              	.Letext0:
 8903              		.file 3 "/home/mip-laptop/uros_frtos_ws/firmware/toolchain/lib/gcc/arm-none-eabi/8.3.1/include/std
 8904              		.file 4 "/home/mip-laptop/uros_frtos_ws/firmware/toolchain/arm-none-eabi/include/machine/_default_
 8905              		.file 5 "/home/mip-laptop/uros_frtos_ws/firmware/toolchain/arm-none-eabi/include/sys/_types.h"
 8906              		.file 6 "/home/mip-laptop/uros_frtos_ws/firmware/toolchain/arm-none-eabi/include/sys/reent.h"
 8907              		.file 7 "/home/mip-laptop/uros_frtos_ws/firmware/toolchain/arm-none-eabi/include/sys/lock.h"
 8908              		.file 8 "/home/mip-laptop/uros_frtos_ws/firmware/toolchain/arm-none-eabi/include/stdlib.h"
 8909              		.file 9 "/home/mip-laptop/uros_frtos_ws/firmware/toolchain/arm-none-eabi/include/sys/_stdint.h"
 8910              		.file 10 "Inc/FreeRTOSConfig.h"
 8911              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 8912              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 8913              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 8914              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
ARM GAS  /tmp/ccQcdK8x.s 			page 252


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccQcdK8x.s:22     .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccQcdK8x.s:19     .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccQcdK8x.s:25     .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccQcdK8x.s:28     .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccQcdK8x.s:31     .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccQcdK8x.s:34     .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccQcdK8x.s:37     .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccQcdK8x.s:40     .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccQcdK8x.s:43     .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccQcdK8x.s:46     .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccQcdK8x.s:49     .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccQcdK8x.s:52     .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccQcdK8x.s:55     .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccQcdK8x.s:58     .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccQcdK8x.s:61     .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccQcdK8x.s:64     .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccQcdK8x.s:67     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccQcdK8x.s:70     .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccQcdK8x.s:73     .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccQcdK8x.s:76     .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccQcdK8x.s:83     .bss.FreeRTOS_errno:0000000000000000 FreeRTOS_errno
     /tmp/ccQcdK8x.s:80     .bss.FreeRTOS_errno:0000000000000000 $d
     /tmp/ccQcdK8x.s:86     .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccQcdK8x.s:89     .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccQcdK8x.s:92     .bss.xTickCount:0000000000000000 $d
     /tmp/ccQcdK8x.s:95     .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccQcdK8x.s:98     .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccQcdK8x.s:101    .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccQcdK8x.s:104    .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccQcdK8x.s:107    .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccQcdK8x.s:110    .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccQcdK8x.s:113    .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccQcdK8x.s:116    .bss.xYieldPending:0000000000000000 $d
     /tmp/ccQcdK8x.s:119    .bss.xYieldPending:0000000000000000 xYieldPending
     /tmp/ccQcdK8x.s:122    .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccQcdK8x.s:125    .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccQcdK8x.s:128    .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccQcdK8x.s:131    .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccQcdK8x.s:134    .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccQcdK8x.s:137    .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccQcdK8x.s:140    .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccQcdK8x.s:143    .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccQcdK8x.s:146    .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccQcdK8x.s:149    .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccQcdK8x.s:152    .text.xTaskCreateStatic:0000000000000000 $t
     /tmp/ccQcdK8x.s:160    .text.xTaskCreateStatic:0000000000000000 xTaskCreateStatic
     /tmp/ccQcdK8x.s:441    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccQcdK8x.s:661    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccQcdK8x.s:320    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccQcdK8x.s:327    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccQcdK8x.s:435    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccQcdK8x.s:655    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccQcdK8x.s:5690   .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccQcdK8x.s:811    .text.prvAddNewTaskToReadyList:00000000000000c4 $d
     /tmp/ccQcdK8x.s:822    .text.vTaskDelete:0000000000000000 $t
ARM GAS  /tmp/ccQcdK8x.s 			page 253


     /tmp/ccQcdK8x.s:829    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccQcdK8x.s:6315   .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccQcdK8x.s:6408   .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccQcdK8x.s:986    .text.vTaskDelete:00000000000000c4 $d
     /tmp/ccQcdK8x.s:998    .text.vTaskDelayUntil:0000000000000000 $t
     /tmp/ccQcdK8x.s:1005   .text.vTaskDelayUntil:0000000000000000 vTaskDelayUntil
     /tmp/ccQcdK8x.s:2764   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccQcdK8x.s:8778   .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccQcdK8x.s:2811   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccQcdK8x.s:1206   .text.vTaskDelayUntil:00000000000000e8 $d
     /tmp/ccQcdK8x.s:1213   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccQcdK8x.s:1220   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccQcdK8x.s:1311   .text.vTaskDelay:0000000000000060 $d
     /tmp/ccQcdK8x.s:1317   .text.eTaskGetState:0000000000000000 $t
     /tmp/ccQcdK8x.s:1324   .text.eTaskGetState:0000000000000000 eTaskGetState
     /tmp/ccQcdK8x.s:1480   .text.eTaskGetState:00000000000000b8 $d
     /tmp/ccQcdK8x.s:1489   .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccQcdK8x.s:1496   .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccQcdK8x.s:1551   .text.uxTaskPriorityGet:0000000000000030 $d
     /tmp/ccQcdK8x.s:1556   .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccQcdK8x.s:1563   .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccQcdK8x.s:1652   .text.uxTaskPriorityGetFromISR:0000000000000054 $d
     /tmp/ccQcdK8x.s:1657   .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccQcdK8x.s:1664   .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccQcdK8x.s:1892   .text.vTaskPrioritySet:0000000000000128 $d
     /tmp/ccQcdK8x.s:1900   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccQcdK8x.s:1907   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccQcdK8x.s:4396   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccQcdK8x.s:2077   .text.vTaskSuspend:00000000000000d0 $d
     /tmp/ccQcdK8x.s:2087   .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccQcdK8x.s:2093   .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccQcdK8x.s:2184   .text.prvTaskIsTaskSuspended:0000000000000058 $d
     /tmp/ccQcdK8x.s:2190   .text.vTaskResume:0000000000000000 $t
     /tmp/ccQcdK8x.s:2197   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccQcdK8x.s:2334   .text.vTaskResume:00000000000000ac $d
     /tmp/ccQcdK8x.s:2342   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccQcdK8x.s:2349   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccQcdK8x.s:2518   .text.xTaskResumeFromISR:00000000000000cc $d
     /tmp/ccQcdK8x.s:2527   .rodata:0000000000000000 $d
     /tmp/ccQcdK8x.s:2531   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccQcdK8x.s:2538   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccQcdK8x.s:2683   .text.vTaskStartScheduler:00000000000000b0 $d
     /tmp/ccQcdK8x.s:5633   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccQcdK8x.s:2693   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccQcdK8x.s:2700   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccQcdK8x.s:2752   .text.vTaskEndScheduler:000000000000002c $d
     /tmp/ccQcdK8x.s:2757   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccQcdK8x.s:2799   .text.vTaskSuspendAll:0000000000000018 $d
     /tmp/ccQcdK8x.s:2804   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccQcdK8x.s:3814   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccQcdK8x.s:3028   .text.xTaskResumeAll:0000000000000114 $d
     /tmp/ccQcdK8x.s:3041   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccQcdK8x.s:3048   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccQcdK8x.s:3088   .text.xTaskGetTickCount:000000000000001c $d
     /tmp/ccQcdK8x.s:3093   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccQcdK8x.s:3100   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccQcdK8x.s:3141   .text.xTaskGetTickCountFromISR:0000000000000020 $d
ARM GAS  /tmp/ccQcdK8x.s 			page 254


     /tmp/ccQcdK8x.s:3146   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccQcdK8x.s:3153   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccQcdK8x.s:3184   .text.uxTaskGetNumberOfTasks:0000000000000014 $d
     /tmp/ccQcdK8x.s:3189   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccQcdK8x.s:3196   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccQcdK8x.s:3272   .text.pcTaskGetName:0000000000000044 $d
     /tmp/ccQcdK8x.s:3277   .text.prvSearchForNameWithinSingleList:0000000000000000 $t
     /tmp/ccQcdK8x.s:3283   .text.prvSearchForNameWithinSingleList:0000000000000000 prvSearchForNameWithinSingleList
     /tmp/ccQcdK8x.s:3461   .text.xTaskGetHandle:0000000000000000 $t
     /tmp/ccQcdK8x.s:3468   .text.xTaskGetHandle:0000000000000000 xTaskGetHandle
     /tmp/ccQcdK8x.s:3608   .text.xTaskGetHandle:00000000000000b4 $d
     /tmp/ccQcdK8x.s:3617   .text.uxTaskGetSystemState:0000000000000000 $t
     /tmp/ccQcdK8x.s:3624   .text.uxTaskGetSystemState:0000000000000000 uxTaskGetSystemState
     /tmp/ccQcdK8x.s:6043   .text.prvListTasksWithinSingleList:0000000000000000 prvListTasksWithinSingleList
     /tmp/ccQcdK8x.s:3797   .text.uxTaskGetSystemState:0000000000000104 $d
     /tmp/ccQcdK8x.s:3807   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccQcdK8x.s:4058   .text.xTaskIncrementTick:0000000000000144 $d
     /tmp/ccQcdK8x.s:4073   .text.vTaskSetApplicationTaskTag:0000000000000000 $t
     /tmp/ccQcdK8x.s:4080   .text.vTaskSetApplicationTaskTag:0000000000000000 vTaskSetApplicationTaskTag
     /tmp/ccQcdK8x.s:4134   .text.vTaskSetApplicationTaskTag:0000000000000034 $d
     /tmp/ccQcdK8x.s:4139   .text.xTaskGetApplicationTaskTag:0000000000000000 $t
     /tmp/ccQcdK8x.s:4146   .text.xTaskGetApplicationTaskTag:0000000000000000 xTaskGetApplicationTaskTag
     /tmp/ccQcdK8x.s:4201   .text.xTaskGetApplicationTaskTag:0000000000000030 $d
     /tmp/ccQcdK8x.s:4206   .text.xTaskGetApplicationTaskTagFromISR:0000000000000000 $t
     /tmp/ccQcdK8x.s:4213   .text.xTaskGetApplicationTaskTagFromISR:0000000000000000 xTaskGetApplicationTaskTagFromISR
     /tmp/ccQcdK8x.s:4304   .text.xTaskGetApplicationTaskTagFromISR:0000000000000054 $d
     /tmp/ccQcdK8x.s:4309   .text.xTaskCallApplicationTaskHook:0000000000000000 $t
     /tmp/ccQcdK8x.s:4316   .text.xTaskCallApplicationTaskHook:0000000000000000 xTaskCallApplicationTaskHook
     /tmp/ccQcdK8x.s:4384   .text.xTaskCallApplicationTaskHook:0000000000000040 $d
     /tmp/ccQcdK8x.s:4389   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccQcdK8x.s:4548   .text.vTaskSwitchContext:00000000000000b8 $d
     /tmp/ccQcdK8x.s:4558   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccQcdK8x.s:4565   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccQcdK8x.s:4633   .text.vTaskPlaceOnEventList:0000000000000044 $d
     /tmp/ccQcdK8x.s:4638   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccQcdK8x.s:4645   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccQcdK8x.s:4745   .text.vTaskPlaceOnUnorderedEventList:000000000000006c $d
     /tmp/ccQcdK8x.s:4751   .text.vTaskPlaceOnEventListRestricted:0000000000000000 $t
     /tmp/ccQcdK8x.s:4758   .text.vTaskPlaceOnEventListRestricted:0000000000000000 vTaskPlaceOnEventListRestricted
     /tmp/ccQcdK8x.s:4835   .text.vTaskPlaceOnEventListRestricted:0000000000000050 $d
     /tmp/ccQcdK8x.s:4840   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccQcdK8x.s:4847   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccQcdK8x.s:4985   .text.xTaskRemoveFromEventList:00000000000000ac $d
     /tmp/ccQcdK8x.s:4995   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccQcdK8x.s:5002   .text.vTaskRemoveFromUnorderedEventList:0000000000000000 vTaskRemoveFromUnorderedEventList
     /tmp/ccQcdK8x.s:5142   .text.vTaskRemoveFromUnorderedEventList:00000000000000ac $d
     /tmp/ccQcdK8x.s:5151   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccQcdK8x.s:5158   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccQcdK8x.s:5227   .text.vTaskSetTimeOutState:0000000000000044 $d
     /tmp/ccQcdK8x.s:5233   .text.vTaskInternalSetTimeOutState:0000000000000000 $t
     /tmp/ccQcdK8x.s:5240   .text.vTaskInternalSetTimeOutState:0000000000000000 vTaskInternalSetTimeOutState
     /tmp/ccQcdK8x.s:5285   .text.vTaskInternalSetTimeOutState:0000000000000024 $d
     /tmp/ccQcdK8x.s:5291   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccQcdK8x.s:5298   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccQcdK8x.s:5459   .text.xTaskCheckForTimeOut:00000000000000b8 $d
     /tmp/ccQcdK8x.s:5465   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccQcdK8x.s:5472   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
ARM GAS  /tmp/ccQcdK8x.s 			page 255


     /tmp/ccQcdK8x.s:5504   .text.vTaskMissedYield:0000000000000014 $d
     /tmp/ccQcdK8x.s:5509   .text.uxTaskGetTaskNumber:0000000000000000 $t
     /tmp/ccQcdK8x.s:5516   .text.uxTaskGetTaskNumber:0000000000000000 uxTaskGetTaskNumber
     /tmp/ccQcdK8x.s:5571   .text.vTaskSetTaskNumber:0000000000000000 $t
     /tmp/ccQcdK8x.s:5578   .text.vTaskSetTaskNumber:0000000000000000 vTaskSetTaskNumber
     /tmp/ccQcdK8x.s:5627   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccQcdK8x.s:5786   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccQcdK8x.s:5678   .text.prvIdleTask:0000000000000028 $d
     /tmp/ccQcdK8x.s:5684   .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccQcdK8x.s:5768   .text.prvInitialiseTaskLists:0000000000000060 $d
     /tmp/ccQcdK8x.s:5780   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccQcdK8x.s:5858   .text.prvCheckTasksWaitingTermination:000000000000004c $d
     /tmp/ccQcdK8x.s:5865   .text.vTaskGetInfo:0000000000000000 $t
     /tmp/ccQcdK8x.s:5872   .text.vTaskGetInfo:0000000000000000 vTaskGetInfo
     /tmp/ccQcdK8x.s:6176   .text.prvTaskCheckFreeStackSpace:0000000000000000 prvTaskCheckFreeStackSpace
     /tmp/ccQcdK8x.s:6032   .text.vTaskGetInfo:00000000000000c8 $d
     /tmp/ccQcdK8x.s:6037   .text.prvListTasksWithinSingleList:0000000000000000 $t
     /tmp/ccQcdK8x.s:6170   .text.prvTaskCheckFreeStackSpace:0000000000000000 $t
     /tmp/ccQcdK8x.s:6240   .text.uxTaskGetStackHighWaterMark:0000000000000000 $t
     /tmp/ccQcdK8x.s:6247   .text.uxTaskGetStackHighWaterMark:0000000000000000 uxTaskGetStackHighWaterMark
     /tmp/ccQcdK8x.s:6304   .text.uxTaskGetStackHighWaterMark:0000000000000034 $d
     /tmp/ccQcdK8x.s:6309   .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccQcdK8x.s:6402   .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccQcdK8x.s:6470   .text.prvResetNextTaskUnblockTime:0000000000000038 $d
     /tmp/ccQcdK8x.s:6476   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccQcdK8x.s:6483   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccQcdK8x.s:6523   .text.xTaskGetCurrentTaskHandle:000000000000001c $d
     /tmp/ccQcdK8x.s:6528   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccQcdK8x.s:6535   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccQcdK8x.s:6597   .text.xTaskGetSchedulerState:0000000000000034 $d
     /tmp/ccQcdK8x.s:6603   .text.xTaskPriorityInherit:0000000000000000 $t
     /tmp/ccQcdK8x.s:6610   .text.xTaskPriorityInherit:0000000000000000 xTaskPriorityInherit
     /tmp/ccQcdK8x.s:6759   .text.xTaskPriorityInherit:00000000000000c4 $d
     /tmp/ccQcdK8x.s:6766   .text.xTaskPriorityDisinherit:0000000000000000 $t
     /tmp/ccQcdK8x.s:6773   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccQcdK8x.s:6937   .text.xTaskPriorityDisinherit:00000000000000cc $d
     /tmp/ccQcdK8x.s:6944   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 $t
     /tmp/ccQcdK8x.s:6951   .text.vTaskPriorityDisinheritAfterTimeout:0000000000000000 vTaskPriorityDisinheritAfterTimeout
     /tmp/ccQcdK8x.s:7141   .text.vTaskPriorityDisinheritAfterTimeout:00000000000000f4 $d
     /tmp/ccQcdK8x.s:7148   .text.prvWriteNameToBuffer:0000000000000000 $t
     /tmp/ccQcdK8x.s:7154   .text.prvWriteNameToBuffer:0000000000000000 prvWriteNameToBuffer
     /tmp/ccQcdK8x.s:7229   .text.vTaskList:0000000000000000 $t
     /tmp/ccQcdK8x.s:7236   .text.vTaskList:0000000000000000 vTaskList
     /tmp/ccQcdK8x.s:7309   .text.vTaskList:000000000000005c $d
     /tmp/ccQcdK8x.s:7314   .text.vTaskList:0000000000000070 $t
     /tmp/ccQcdK8x.s:7447   .text.vTaskList:0000000000000124 $d
     /tmp/ccQcdK8x.s:7453   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccQcdK8x.s:7460   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccQcdK8x.s:7510   .text.uxTaskResetEventItemValue:000000000000002c $d
     /tmp/ccQcdK8x.s:7515   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccQcdK8x.s:7522   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccQcdK8x.s:7567   .text.pvTaskIncrementMutexHeldCount:0000000000000024 $d
     /tmp/ccQcdK8x.s:7572   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccQcdK8x.s:7579   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccQcdK8x.s:7693   .text.ulTaskNotifyTake:0000000000000088 $d
     /tmp/ccQcdK8x.s:7699   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccQcdK8x.s:7706   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
ARM GAS  /tmp/ccQcdK8x.s 			page 256


     /tmp/ccQcdK8x.s:7841   .text.xTaskNotifyWait:00000000000000ac $d
     /tmp/ccQcdK8x.s:7847   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccQcdK8x.s:7854   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccQcdK8x.s:7935   .text.xTaskGenericNotify:0000000000000060 $d
     /tmp/ccQcdK8x.s:7940   .text.xTaskGenericNotify:0000000000000074 $t
     /tmp/ccQcdK8x.s:8120   .text.xTaskGenericNotify:0000000000000158 $d
     /tmp/ccQcdK8x.s:8128   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccQcdK8x.s:8135   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccQcdK8x.s:8238   .text.xTaskGenericNotifyFromISR:0000000000000080 $d
     /tmp/ccQcdK8x.s:8243   .text.xTaskGenericNotifyFromISR:0000000000000094 $t
     /tmp/ccQcdK8x.s:8450   .text.xTaskGenericNotifyFromISR:0000000000000198 $d
     /tmp/ccQcdK8x.s:8460   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccQcdK8x.s:8467   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccQcdK8x.s:8679   .text.vTaskNotifyGiveFromISR:0000000000000108 $d
     /tmp/ccQcdK8x.s:8689   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccQcdK8x.s:8696   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccQcdK8x.s:8767   .text.xTaskNotifyStateClear:0000000000000048 $d
     /tmp/ccQcdK8x.s:8772   .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccQcdK8x.s:8892   .text.prvAddCurrentTaskToDelayedList:0000000000000090 $d

UNDEFINED SYMBOLS
pvPortMalloc
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
strlen
vListInsert
vListInitialise
strcpy
sprintf
